var e=JSON.parse('[{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/2","id":2678687256,"node_id":"PR_kwDOPMCTuc6fqYYY","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/2","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/2.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/2.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/2","number":2,"state":"open","locked":false,"title":"[9팀 신홍준] Chapter 1-3. 프레임워크 없이 SPA 만들기 ","user":{"login":"jun17183","id":64164782,"node_id":"MDQ6VXNlcjY0MTY0Nzgy","avatar_url":"https://avatars.githubusercontent.com/u/64164782?v=4","gravatar_id":"","url":"https://api.github.com/users/jun17183","html_url":"https://github.com/jun17183","followers_url":"https://api.github.com/users/jun17183/followers","following_url":"https://api.github.com/users/jun17183/following{/other_user}","gists_url":"https://api.github.com/users/jun17183/gists{/gist_id}","starred_url":"https://api.github.com/users/jun17183/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jun17183/subscriptions","organizations_url":"https://api.github.com/users/jun17183/orgs","repos_url":"https://api.github.com/users/jun17183/repos","events_url":"https://api.github.com/users/jun17183/events{/privacy}","received_events_url":"https://api.github.com/users/jun17183/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://jun17183.github.io/front_6th_chapter1-3/\\r\\n\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n다른 분들은 이번 과제가 재밌을 거 같다고 말씀하셨지만 리액트가 낯선 저에겐 약간 겁이 나는 과제였습니다. useMemo나 useCallback을 제대로 사용해 본 적이 없었으며 커스텀 훅을 만들어 본 경험도 없었습니다. 그렇기 때문에 우선 개념 학습부터 제대로 하고 과제를 진행하기로 했습니다.\\r\\n\\r\\n### ⭐️학습노트 피그잼 링크⭐️\\r\\n### https://www.figma.com/board/19cKvPZ3vmL6MeDC1E8Evl/Untitled?node-id=0-1&p=f&t=E24ExfHWF2QCEs4E-0\\r\\n\\r\\n---\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n## React Fiber\\r\\n\\r\\n개념 정리를 하면서 state나 deps는 어디에 어떤 형태로 저장되는지, 어느 시점에 비교를 하여 어떻게 렌더링이 되는지 궁금했습니다. 궁금증을 따라가다 보니 React Fiber라는 것을 알게 되었고 전반적인 구조와 흐름에 대해 알 수 있었습니다.\\r\\n\\r\\n<img width=\\"1380\\" height=\\"820\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/9605d3c5-4749-43b3-a548-bf51533133d2\\" />\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n## useRef\\r\\n\\r\\nuseRef 구현 후 기왕 이렇게 된 거 DOM 조작 기능까지 구현하고 싶었습니다. 하지만 찾아봤더니 useRef 함수만 구현해도 DOM 조작이 가능하더라구요. 어떤 원리로 가능한지 알아보았습니다.\\r\\n\\r\\n<strong>1. `ref`는 특별한 props</strong>\\r\\n\\r\\n - `className`, `onClick` 같은 일반 props와 달리 DOM에 전달되지 않음\\r\\n - React가 내부적으로 따로 처리하는 특수 속성\\r\\n\\r\\n<strong>2. JSX 컴파일 과정에서 분리됨</strong>\\r\\n\\r\\n```js\\r\\n// JSX: <input ref={myRef} type=\\"text\\" />\\r\\n// 컴파일 결과: { type: \\"input\\", props: { type: \\"text\\" }, ref: myRef }\\r\\n```\\r\\n\\r\\n<strong>3. DOM 생성 후 자동 연결</strong>\\r\\n\\r\\n - React가 실제 DOM 엘리먼트를 생성\\r\\n - `ref.current = domElement` 자동 할당\\r\\n\\r\\n<strong>4. ref 타입 체크</strong>\\r\\n\\r\\n```js\\r\\nif (ref && typeof ref === \'object\' && \'current\' in ref) {\\r\\n  ref.current = domElement; // 우리가 만든 { current: null } 객체\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n## 이전 회사에서의 프로젝트를  떠올리며 (React.memo, useMemo, useCallback)\\r\\n\\r\\n이전 회사에서 항공 예약 사이트를 제작을 맡은 적이 있습니다. 모든 팀원이 React를 실무로 사용해 본 적이 없었기에 많은 이슈가 있었습니다. 그 중에서도 가장 크리티컬한 이슈는 공항 검색 모달이었습니다. \\r\\n\\r\\n출발지와 도착지 input을 클릭하면 대륙-국가-도시-공항 목록을 나타내는 모달이 나타났습니다. 이 모달은 폴더처럼 접혀 있고, 클릭하면 슬라이딩으로 하위 항목이 노출되었습니다. 또한 input에 입력할 때마다 공항 데이터를 다시 불러와 목록을 그렸습니다.\\r\\n\\r\\n전 세계 공항의 수가 워낙 많고 각 input 마다 모달이 노출되었던 점, 슬라이딩 등으로 인해 속도가 엄청나게 느렸고 사이트가 멈추기까지 했습니다. 그때 원인도 모른 채 이런 저런 코드도 고치고 고객사와 타협도 보며 문제를 넘겼던 기억이 있습니다.\\r\\n\\r\\n지금은 퇴사를 하여 당시 코드를 수정할 수 없지만 이번 과제를 통해 배운 내용을 토대로 다음과 같이 코드를 수정하면 어땠을까 하는 아쉬움이 남습니다.\\r\\n\\r\\n```js\\r\\nconst useFilteredAirports = (searchTerm) => {\\r\\n  return useMemo(() => {\\r\\n    if (!searchTerm.trim()) return AIRPORT_DATA;\\r\\n    \\r\\n    const filtered = {};\\r\\n    const term = searchTerm.toLowerCase();\\r\\n    \\r\\n    Object.entries(AIRPORT_DATA).forEach(([continent, countries]) => {\\r\\n      const filteredCountries = {};\\r\\n      \\r\\n      Object.entries(countries).forEach(([country, cities]) => {\\r\\n        const filteredCities = {};\\r\\n        \\r\\n        Object.entries(cities).forEach(([city, airports]) => {\\r\\n          const filteredAirports = airports.filter(airport => \\r\\n            airport.toLowerCase().includes(term) ||\\r\\n            city.toLowerCase().includes(term) ||\\r\\n            country.toLowerCase().includes(term) ||\\r\\n            continent.toLowerCase().includes(term)\\r\\n          );\\r\\n          \\r\\n          if (filteredAirports.length > 0) {\\r\\n            filteredCities[city] = filteredAirports;\\r\\n          }\\r\\n        });\\r\\n        \\r\\n        if (Object.keys(filteredCities).length > 0) {\\r\\n          filteredCountries[country] = filteredCities;\\r\\n        }\\r\\n      });\\r\\n      \\r\\n      if (Object.keys(filteredCountries).length > 0) {\\r\\n        filtered[continent] = filteredCountries;\\r\\n      }\\r\\n    });\\r\\n    \\r\\n    return filtered;\\r\\n  }, [searchTerm]);\\r\\n};\\r\\n\\r\\n// 메모화된 공항 선택 드롭다운 컴포넌트\\r\\nconst AirportDropdown = memo(({ \\r\\n  isOpen, \\r\\n  searchTerm, \\r\\n  onSearchChange, \\r\\n  onAirportSelect, \\r\\n  onClose \\r\\n}) => {\\r\\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\\r\\n  const filteredAirports = useFilteredAirports(debouncedSearchTerm);\\r\\n  const [expandedItems, setExpandedItems] = useState(new Set());\\r\\n\\r\\n  // 토글 함수들을 useCallback으로 메모화\\r\\n  const toggleExpanded = useCallback((path) => {\\r\\n    setExpandedItems(prev => {\\r\\n      const newSet = new Set(prev);\\r\\n      if (newSet.has(path)) {\\r\\n        newSet.delete(path);\\r\\n      } else {\\r\\n        newSet.add(path);\\r\\n      }\\r\\n      return newSet;\\r\\n    });\\r\\n  }, []);\\r\\n\\r\\n  const handleAirportClick = useCallback((airport) => {\\r\\n    onAirportSelect(airport);\\r\\n    onClose();\\r\\n  }, [onAirportSelect, onClose]);\\r\\n\\r\\n  if (!isOpen) return null;\\r\\n  \\r\\n  return ( ... )\\r\\n}\\r\\n``` \\r\\n\\r\\n---\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n2주차 과제에서 normalizeVNode와 같은 함수를 구현할 때, 모든 처리를 한 함수에서 구현했습니다. 하지만 코치님 솔루션을 보니 모두 분리하셨더라구요. 그 부분이 감명 깊어 equals 함수 구현에 이를 적용해 보았습니다.\\r\\n\\r\\n```typescript\\r\\nimport { Types } from \\"./types\\";\\r\\n\\r\\nexport const getType = (value: unknown) => {\\r\\n  if (value === null) return Types.NULL;\\r\\n  if (value === undefined) return Types.UNDEFINED;\\r\\n  if (Array.isArray(value)) return Types.ARRAY;\\r\\n  return typeof value;\\r\\n};\\r\\n\\r\\n\\r\\nimport { Types } from \\"../types\\";\\r\\nimport { getType } from \\"../utils\\";\\r\\n\\r\\n// 배열 얕은 비교\\r\\nconst isShallowArrayEqual = (a: Array<unknown>, b: Array<unknown>) => {\\r\\n  if (a.length !== b.length) return false;\\r\\n\\r\\n  for (let i = 0; i < a.length; i++) {\\r\\n    if (a[i] !== b[i]) return false;\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n};\\r\\n\\r\\n// 객체 얕은 비교\\r\\nconst isShallowObjectEqual = (a: Record<string, unknown>, b: Record<string, unknown>) => {\\r\\n  const keysA = Object.keys(a);\\r\\n  const keysB = Object.keys(b);\\r\\n\\r\\n  if (keysA.length !== keysB.length) return false;\\r\\n\\r\\n  for (const key of keysA) {\\r\\n    if (!keysB.includes(key)) return false;\\r\\n    if (a[key] !== b[key]) return false;\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n};\\r\\n\\r\\nexport const shallowEquals = (a: unknown, b: unknown) => {\\r\\n  const typeA = getType(a);\\r\\n  const typeB = getType(b);\\r\\n\\r\\n  // 1. 타입이 다르면 다른 값\\r\\n  if (typeA !== typeB) return false;\\r\\n\\r\\n  // 2. 배열 비교\\r\\n  if (typeA === Types.ARRAY) {\\r\\n    return isShallowArrayEqual(a as Array<unknown>, b as Array<unknown>);\\r\\n  }\\r\\n\\r\\n  // 3. 객체 비교\\r\\n  if (typeA === Types.OBJECT) {\\r\\n    return isShallowObjectEqual(a as Record<string, unknown>, b as Record<string, unknown>);\\r\\n  }\\r\\n\\r\\n  // 4. 기본 타입 비교\\r\\n  return a === b;\\r\\n};\\r\\n```\\r\\n\\r\\n<strong>(사실 피그잼으로 정리한 내용을 가장 자랑하고 싶다...ㅎ)</strong>\\r\\n\\r\\n---\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\ndeepEquals에서 객체 키를 비교할 때 includes를 통해 존재 여부를 확인했습니다. 하지만 저희 학메 지수님께서 아래와 같이 리뷰해 주셨어요.\\r\\n\\r\\n<img width=\\"1162\\" height=\\"663\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/2c8dc56a-72c3-48f1-9718-080b6e189316\\" />\\r\\n\\r\\n그래서 다음과 같이 수정하면 어떨까 합니다.\\r\\n\\r\\n```js\\r\\nconst isDeepObjectEqual = (a: Record<string, unknown>, b: Record<string, unknown>) => {\\r\\n  const keysA = Object.keys(a);\\r\\n  const keysB = Object.keys(b);\\r\\n\\r\\n  if (keysA.length !== keysB.length) return false;\\r\\n\\r\\n  for (const key of keysA) {\\r\\n    // O(1) 시간복잡도로 개선\\r\\n    if (!Object.prototype.hasOwnProperty.call(b, key)) return false;\\r\\n    if (!deepEquals(a[key], b[key])) return false;\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n};\\r\\n```\\r\\n\\r\\n마찬가지로 지수님이 남겨주신 리뷰인데요, \\r\\n\\r\\n<img width=\\"1412\\" height=\\"787\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/a059a7f3-4470-4926-b1a5-95499466423f\\" />\\r\\n\\r\\n기존의 코드는 `useRef()`와 같이 초기값 없이 호출할 수가 없었으며 return 또한 undefined로 할 수 없었습니다. 아래와 같이 수정하면 이런 케이스를 더욱 잘 처리할 수 있지 않나 생각합니다.\\r\\n\\r\\n```js\\r\\nimport { useState } from \\"react\\";\\r\\n\\r\\ninterface MutableRefObject<T> {\\r\\n  current: T;\\r\\n}\\r\\n\\r\\n// 오버로드 시그니처들\\r\\nexport function useRef<T = undefined>(): MutableRefObject<T | undefined>;\\r\\nexport function useRef<T>(initialValue: T): MutableRefObject<T>;\\r\\n\\r\\n// 실제 구현\\r\\nexport function useRef<T>(initialValue?: T): MutableRefObject<T | undefined> {\\r\\n  const [refObj] = useState<{ current: T | undefined }>(() => ({ \\r\\n    current: initialValue \\r\\n  }));\\r\\n  return refObj;\\r\\n}\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n### 학습 효과 분석 및 과제 피드백\\r\\n\\r\\n가장 큰 배움은 각각의 훅 함수들입니다. 사용을 거의 안 해본 것은 물론이고 useMemo와 useCallback의 차이 등 개념도 잘 몰랐습니다. 이번 기회에 익힐 수 있어서 후련한 마음까지 듭니다. \\r\\n\\r\\n---\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n#### 렌더링 과정 및 최적화\\r\\n1. 상태 변경 시 업데이트 큐에 상대 변화 등록 \\r\\n2. 우선순위에 따른 스케줄링 구성 (우선순위에 따른 최적화)\\r\\n3. 변화가 일어난 컴포넌트부터 루트까지 올라가며 lane 마킹 \\r\\n4. 트리 중 lane이 없는 노드는 자식까지 제외 (렌더링이 필요하지 않는 곳은 제외)\\r\\n5. lane에 따라 각 컴포넌트 리렌더링\\r\\n6. 상태 업데이트 및 상태에 따른 hook 실행\\r\\n7. 이때 deps에 따라 실행 여부 결정\\r\\n\\r\\n#### 렌더링 관련 개념\\r\\n- <strong>Virtual DOM</strong>: 실제 DOM의 가상 복사본, 메모리에서 빠르게 비교\\r\\n- <strong>Reconciliation</strong>: 이전 Virtual DOM과 새 Virtual DOM을 비교해서 차이점 찾기\\r\\n- <strong>diffing</strong>: 트리 구조를 효율적으로 비교하는 알고리즘\\r\\n\\r\\n#### 라이프사이클 메서드\\r\\n- `useEffect(() => { ... }, [])`: mount 시 (componentDidMount)\\r\\n- `useEffect(() => { ... }, [state])`: udpate 시 (componentDidMount + componentDidUpdate)\\r\\n- cleanup으로 componentWillUnmount 구현 가능\\r\\n- `useLayoutEffect`\\r\\n```jsx\\r\\nfunction TimingExample() {\\r\\n  const [count, setCount] = useState(0);\\r\\n\\r\\n  console.log(\'1. 렌더링 중\');\\r\\n\\r\\n  useLayoutEffect(() => {\\r\\n    console.log(\'3. useLayoutEffect - DOM 변경 후, 페인팅 전\');\\r\\n  });\\r\\n\\r\\n  useEffect(() => {\\r\\n    console.log(\'4. useEffect - 페인팅 후, 비동기\');\\r\\n  });\\r\\n\\r\\n  console.log(\'2. 렌더링 완료\');\\r\\n\\r\\n  return <div>{count}</div>;\\r\\n}\\r\\n```\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n#### 메모이제이션이 필요한 경우\\r\\n- 무거운 계산이 반복될 때\\r\\n- 자식 컴포넌트가 불필요하게 렌더링 될 때\\r\\n- 참조값이 동일해야 할 때\\r\\n\\r\\n#### 메모이제이션을 사용하지 않으면 생길 수 있는 문제\\r\\n: 메모이제이션을 사용하지 않으면 부모 컴포넌트의 state나 props와는 아무 상관이 없는 자식 컴포넌트도 불필요하게 리렌더링될 수도 있으며, 어떤 컴포넌트가 렌더링될 때마다 높은 비용의 계산이 계속 실행될 수 있다.\\r\\n\\r\\n#### 주의\\r\\n메모이제이션은 메모리 사용량이 증가하고 복잡성 또한 증가하기에 과도한 사용은 성능 저하를 유발한다.\\r\\n\\r\\n#### 메모이제이션을 사용하지 않고 해결할 수 있는 방법\\r\\n- 컴포넌트를 분리하여 리렌더링 최소화\\r\\n- 부모 컴포넌트에서 너무 많은 상태를 관리하지 않는다.\\r\\n- 하나의 객체로 상태를 관리하지 않고 분리한다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n#### 컨텍스트와 상태관리의 필요성\\r\\n- props drilling 해결\\r\\n- 사용자 정보, 언어와 같은 전역 상태 관리\\r\\n- 컴포넌트 간 소통 용이\\r\\n\\r\\n#### 단점\\r\\n- 컨텍스트 변경 시 하위 컴포넌트 모두 리렌더링\\r\\n- 너무 많은 컨텍스트 사용 시 콜백 지옥처럼 코드가 복잡해진다.\\r\\n\\r\\n#### 컨텍스트, 상태관리를 사용하지 않고 해결할 방법\\r\\n- url 사용\\r\\n- 커스텀 훅으로 분리\\r\\n- children 패턴\\r\\n\\r\\n#### 주의할 점\\r\\n- 매번 새로운 객체가 생성되지 않도록 메모이제이션\\r\\n- 필요한 곳에서만 사용 (모두를 감싸지 않기)\\r\\n\\r\\n---\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\ntypeof로 null이나 배열의 타입 조회 시 object로 나오는 부분 때문에 일관성을 유지하고 싶어서 문자열로 구성된 `Types` 타입을 만들고 getType으로 null, array까지 모두 구분해 주었습니다. 하지만 이 과정에서 as 키워드를 사용하게 되었습니다. 타입스크립트를 공부할 때 as 키워드는 지양하는 것이 타입스크립트 철학에 맞다고 들어서 아래 코드에 의문이 있습니다. 코치님이라면 어떻게 작성할지 궁금합니다!\\r\\n\\r\\n```typescript\\r\\nexport const Types = {\\r\\n  NUMBER: \\"number\\",\\r\\n  STRING: \\"string\\",\\r\\n  BOOLEAN: \\"boolean\\",\\r\\n  SYMBOL: \\"symbol\\",\\r\\n  BIGINT: \\"bigint\\",\\r\\n  NULL: \\"null\\",\\r\\n  UNDEFINED: \\"undefined\\",\\r\\n  ARRAY: \\"array\\",\\r\\n  OBJECT: \\"object\\",\\r\\n} as const;\\r\\n```\\r\\n```typescript\\r\\nimport { Types } from \\"./types\\";\\r\\n\\r\\nexport const getType = (value: unknown) => {\\r\\n  if (value === null) return Types.NULL;\\r\\n  if (value === undefined) return Types.UNDEFINED;\\r\\n  if (Array.isArray(value)) return Types.ARRAY;\\r\\n  return typeof value;\\r\\n};\\r\\n```\\r\\n```typescript\\r\\nimport { Types } from \\"../types\\";\\r\\nimport { getType } from \\"../utils\\";\\r\\n\\r\\n// 배열 얕은 비교\\r\\nconst isShallowArrayEqual = (a: Array<unknown>, b: Array<unknown>) => {\\r\\n  if (a.length !== b.length) return false;\\r\\n\\r\\n  for (let i = 0; i < a.length; i++) {\\r\\n    if (a[i] !== b[i]) return false;\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n};\\r\\n\\r\\n// 객체 얕은 비교\\r\\nconst isShallowObjectEqual = (a: Record<string, unknown>, b: Record<string, unknown>) => {\\r\\n  const keysA = Object.keys(a);\\r\\n  const keysB = Object.keys(b);\\r\\n\\r\\n  if (keysA.length !== keysB.length) return false;\\r\\n\\r\\n  for (const key of keysA) {\\r\\n    if (!keysB.includes(key)) return false;\\r\\n    if (a[key] !== b[key]) return false;\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n};\\r\\n\\r\\nexport const shallowEquals = (a: unknown, b: unknown) => {\\r\\n  const typeA = getType(a);\\r\\n  const typeB = getType(b);\\r\\n\\r\\n  // 1. 타입이 다르면 다른 값\\r\\n  if (typeA !== typeB) return false;\\r\\n\\r\\n  // 2. 배열 비교\\r\\n  if (typeA === Types.ARRAY) {\\r\\n    return isShallowArrayEqual(a as Array<unknown>, b as Array<unknown>);\\r\\n  }\\r\\n\\r\\n  // 3. 객체 비교\\r\\n  if (typeA === Types.OBJECT) {\\r\\n    return isShallowObjectEqual(a as Record<string, unknown>, b as Record<string, unknown>);\\r\\n  }\\r\\n\\r\\n  // 4. 기본 타입 비교\\r\\n  return a === b;\\r\\n};\\r\\n```\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-19T04:23:59Z","updated_at":"2025-07-26T05:29:52Z","closed_at":null,"merged_at":null,"merge_commit_sha":"8d397eb12ecb397d74ab4f9bfe1c7315c7e7712d","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/2/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/2/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/2/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/fe4455a021a702c53423d87a84c8e1fa26392b07","head":{"label":"jun17183:main","ref":"main","sha":"fe4455a021a702c53423d87a84c8e1fa26392b07","user":{"login":"jun17183","id":64164782,"node_id":"MDQ6VXNlcjY0MTY0Nzgy","avatar_url":"https://avatars.githubusercontent.com/u/64164782?v=4","gravatar_id":"","url":"https://api.github.com/users/jun17183","html_url":"https://github.com/jun17183","followers_url":"https://api.github.com/users/jun17183/followers","following_url":"https://api.github.com/users/jun17183/following{/other_user}","gists_url":"https://api.github.com/users/jun17183/gists{/gist_id}","starred_url":"https://api.github.com/users/jun17183/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jun17183/subscriptions","organizations_url":"https://api.github.com/users/jun17183/orgs","repos_url":"https://api.github.com/users/jun17183/repos","events_url":"https://api.github.com/users/jun17183/events{/privacy}","received_events_url":"https://api.github.com/users/jun17183/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022431577,"node_id":"R_kgDOPPERWQ","name":"front_6th_chapter1-3","full_name":"jun17183/front_6th_chapter1-3","private":false,"owner":{"login":"jun17183","id":64164782,"node_id":"MDQ6VXNlcjY0MTY0Nzgy","avatar_url":"https://avatars.githubusercontent.com/u/64164782?v=4","gravatar_id":"","url":"https://api.github.com/users/jun17183","html_url":"https://github.com/jun17183","followers_url":"https://api.github.com/users/jun17183/followers","following_url":"https://api.github.com/users/jun17183/following{/other_user}","gists_url":"https://api.github.com/users/jun17183/gists{/gist_id}","starred_url":"https://api.github.com/users/jun17183/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jun17183/subscriptions","organizations_url":"https://api.github.com/users/jun17183/orgs","repos_url":"https://api.github.com/users/jun17183/repos","events_url":"https://api.github.com/users/jun17183/events{/privacy}","received_events_url":"https://api.github.com/users/jun17183/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/jun17183/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/jun17183/front_6th_chapter1-3/deployments","created_at":"2025-07-19T04:15:40Z","updated_at":"2025-07-23T17:31:00Z","pushed_at":"2025-07-23T17:45:12Z","git_url":"git://github.com/jun17183/front_6th_chapter1-3.git","ssh_url":"git@github.com:jun17183/front_6th_chapter1-3.git","clone_url":"https://github.com/jun17183/front_6th_chapter1-3.git","svn_url":"https://github.com/jun17183/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":299,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":1,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/2"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/2"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/2"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/2/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/2/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/2/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/fe4455a021a702c53423d87a84c8e1fa26392b07"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/3","id":2678692308,"node_id":"PR_kwDOPMCTuc6fqZnU","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/3","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/3.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/3.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/3","number":3,"state":"open","locked":false,"title":"[9팀 권지호] Chapter 1-3. React, Beyond the Basics","user":{"login":"tomatopickles404","id":210817015,"node_id":"U_kgDODJDP9w","avatar_url":"https://avatars.githubusercontent.com/u/210817015?v=4","gravatar_id":"","url":"https://api.github.com/users/tomatopickles404","html_url":"https://github.com/tomatopickles404","followers_url":"https://api.github.com/users/tomatopickles404/followers","following_url":"https://api.github.com/users/tomatopickles404/following{/other_user}","gists_url":"https://api.github.com/users/tomatopickles404/gists{/gist_id}","starred_url":"https://api.github.com/users/tomatopickles404/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tomatopickles404/subscriptions","organizations_url":"https://api.github.com/users/tomatopickles404/orgs","repos_url":"https://api.github.com/users/tomatopickles404/repos","events_url":"https://api.github.com/users/tomatopickles404/events{/privacy}","received_events_url":"https://api.github.com/users/tomatopickles404/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://hanghae-plus.github.io/front_6th_chapter1-3/\\r\\n\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n#### 취업준비와 과제를 병행하는 것에 대한 회고\\r\\n사실은 첫 주차에서도 기업 과제 준비를 병행 했었습니다. 당시 pr에도 언급했었지만 그 때는 얼레벌레 ai로 구현해서 스노우볼을 만든 채로 넘어갔습니다. 이런 상황이 앞으로도 계속 될 수 있기 때문에 과제와 취업준비의 밸런스에 대해 고민을 하게 되었습니다.\\r\\n금주 멘토링에서의 테오의 조언이 방향을 잡는 것에 대해 도움이 되었습니다.\\r\\n테오가 언급해주신 키워드는 두 가지였습니다.\\r\\n\\r\\n  - 해야만 한다는 강박에서 벗어나도 괜찮다는 안심(?)\\r\\n  - 컨텍스트 스위칭은 오히려 지치지 않게 해준다.\\r\\n\\r\\n저는 스스로 집중력이 좋지 않다고 생각해 컨텍스트 스위칭을 두려워 했으나, 적절한 전환이 몰입을 도와준다는 것을 알게 되었습니다.\\r\\n적절한 스위칭으로 저에게 맞는 컨디션을 오래 유지하는 방법을 찾아서 과제든, 취업이든 \\"해야만 하는 것\\"이 아니라 호기심으로 파고드는 마음 가짐을 가지고 싶습니다. 결론은 어디에 얼마나 시간을 할애하던, 그 자체에 강박을 가지지 않고 순간순간에 집중 하는 것을 목표로 두기로 했습니다.\\r\\n\\r\\n\\r\\n\\r\\n<br/>\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n#### 1. useAutoCallback\\r\\n\\r\\n**[고민 포인트]**\\r\\n\\r\\n- **“렌더링 시점에 최신화\\"의 정확한 의미**\\r\\n\\r\\n처음에 React 의 라이프 사이클을 고려하여 useEffect를 활용해 ref에 함수를 할당하고자 했습니다. \\r\\n\\r\\n```tsx\\r\\n\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  const ref = useRef<T | null>(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    ref.current = fn;  // 렌더링 완료 후 업데이트\\r\\n  }, [fn]);\\r\\n\\r\\n  return useCallback((...args: Parameters<T>) => {\\r\\n    return ref.current!(...args);\\r\\n  }, []) as T;\\r\\n};\\r\\n\\r\\n```\\r\\n\\r\\n- 테스트코드 실패 후 다시 생각해보니 useEffect는 커밋 단계 이후 시점에 등록된 콜백이 실행된다는 것이 생각났습니다.\\r\\n- 렌더링이 완료된 이후에 할당했기 때문에 “렌더링 시점”에는 ref.current가 null이었다는 것을 이해했습니다.\\r\\n\\r\\n**[최종 코드]**\\r\\n\\r\\n```tsx\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  const prevFn = useRef<T | null>(null);\\r\\n\\r\\n  prevFn.current = fn;\\r\\n\\r\\n  return useCallback((...args: Parameters<T>) => {\\r\\n    return prevFn.current?.(...args);\\r\\n  }, []) as T;\\r\\n};\\r\\n```\\r\\n\\r\\n- 렌더링 중에 prevFn을 업데이트 하기 위해 useAutoCallback이 호출되는 시점에 함수를 할당하도록 개선했습니다.\\r\\n- 실행 시점에 *prevFn*.current를 호출하여 최신 함수를 사용하도록 했습니다.\\r\\n- 빈 의존성 배열로 함수의 참조를 유지하고자 했습니다.\\r\\n\\r\\n**[의문점]**\\r\\n\\r\\n#### 부수효과는 useEffect에서 처리해야하는 것 아닌가?\\r\\n\\r\\n저는 훅 내부에서 발생하는 부수효과는 useEffect에서 처리해야한다고 생각했기 때문에 이 부분을 개선하는 과정에서 한동안 병목이 있었습니다. (당연히 useEffect에서 할당해야한다고 생각해 다른 곳에서 이유를 찾으려고 했습니다.)\\r\\n\\r\\nuseEffect에서 수행되어야 한다고 생각한 이유는 다음과 같습니다.\\r\\n\\r\\n- React의 함수 컴포넌트는 순수(pure)해야 한다. (동일 입력 → 동일 출력) \\r\\n   그리고 ref의 값을 변경 하는 행위는 사이드 이펙트에 해당한다고 생각했습니다.\\r\\n- 이러한 사이드 이펙트를 다루는 것이 useEffect이기 때문에 useEffect에서 수행되어야 한다고 생각했습니다.\\r\\n- 또한 ref.current를 렌더링 중에 읽거나 쓰지 말아야 한다고 공식문서에서 보고 정리한 기억이 있어서 헷갈렸던 것 같습니다.\\r\\n\\r\\n**[알게된 사실]**\\r\\n\\r\\n- 이 코드에서는 예외(?)일 수 있다.\\r\\n- gemini가 답변해준 렌더링 중에 변경하는 것이 오히려 안전한 이유 입니다.\\r\\n\\r\\n```tsx\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  const prevFn = useRef<T | null>(null);\\r\\n\\r\\n// 1. 렌더링 최상단에서 \\"무조건\\" 값을 덮어쓴다.\\r\\n  prevFn.current = fn;\\r\\n\\r\\n// 2. 이 할당 행위가 현재 렌더링의 결과물에 영향을 주지 않는다.\\r\\n  return useCallback((...args: Parameters<T>) => {\\r\\n    return prevFn.current?.(...args);\\r\\n  }, []) as T;\\r\\n};\\r\\n```\\r\\n\\r\\n#### 왜 안전한가?\\r\\n\\r\\n- 멱등성: Strict Mode에서 이 코드가 두 번 실행된다고 해도, prevFn.current = fn 은 두 번 다 똑같은 fn을 할당할 뿐입니다.\\r\\n**여러 번 실행해도 결과는 한 번 실행한 것과 같습니다.**\\r\\n- 렌더링 결과에 영향을 주지 않음\\r\\n    prevFn.current = fn 이라는 할당 행위 자체가 useCallback이 반환하는 함수의 참조값에 영향을 주지 않습니다.\\r\\n    useCallback은 의존성 배열이 []이므로 항상 최초에 만들어진 함수를 그대로 반환합니다.\\r\\n    즉, 렌더링의 순수성이 지켜집니다. ref에 값을 쓰는 행위는 \\"나중에\\" 실행될 콜백 함수를 위한 준비 작업일 뿐, 현재 렌더링의 출력을 결정하지 않습니다.\\r\\n\\r\\n- 공식문서에서 “렌더링 중 ref를 변경하지 말라”고 하는 진짜 의도는 다음과 같습니다.\\r\\n\\r\\n> \\"렌더링 중에 ref를 변경해서, **그 변경으로 인해 현재 렌더링의 결과물(JSX)이 달라지게 만들지 마세요.**  렌더링은 순수해야 합니다.\\"\\r\\n\\r\\n\\r\\n<br/>\\r\\n\\r\\n#### 2. useMemo\\r\\n\\r\\n**[고민 포인트]**\\r\\n\\r\\n\\"의존성 배열이 변경될 때만 factory를 실행하고, 그렇지 않으면 이전 값을 반환\\"하는 로직을 구현할 때\\r\\n 내부적으로 useRef를 활용해 이전 의존성과 값을 저장했습니다.\\r\\n\\"**객체의 속성만 변경**\\"하는 방식과 \\"**객체 자체를 재할당**\\"하는 방식 중 어떤 것이 더 적절한지, \\r\\nReact의 실제 구현과 어떤 차이가 있는지 궁금하여 분석했습니다.\\r\\n\\r\\n\\r\\n#### 1. 속성 변경 방식\\r\\n```ts\\r\\nref.current.deps = deps;\\r\\nref.current.value = factory();\\r\\n```\\r\\n- 기존 객체의 속성만 변경\\r\\n- 참조는 그대로 유지\\r\\n\\r\\n#### 2. 객체 재할당 방식\\r\\n```ts\\r\\nref.current = { deps, value };\\r\\n```\\r\\n- 새로운 객체를 할당\\r\\n- 참조가 변경됨\\r\\n\\r\\n#### 3. 구조적/동작적 차이점\\r\\n\\r\\n| 구분 | 속성 변경 방식 | 객체 재할당 방식 |\\r\\n|------|----------------|------------------|\\r\\n| 참조 | 동일 | 변경됨 |\\r\\n| 메모리 | 기존 객체 재사용 | 새 객체 할당 |\\r\\n| GC 부담 | 적음 | 약간 증가 |\\r\\n| 외부 참조 | 항상 동일 | 변경될 수 있음 |\\r\\n\\r\\n- **속성 변경**: 외부에서 ref.current를 저장해두면, 항상 같은 객체를 참조\\r\\n- **객체 재할당**: 외부에서 ref.current를 저장해두면, 변경 시 참조가 달라짐\\r\\n\\r\\n#### 4. React 내부 구현과의 비교\\r\\n\\r\\nReact의 useMemo/useRef 내부 구현(의사코드)\\r\\n```ts\\r\\n// useMemo\\r\\nif (hook.memoizedState === null || !areHookInputsEqual(deps, hook.memoizedState.deps)) {\\r\\n  hook.memoizedState = { deps, value };\\r\\n}\\r\\n\\r\\n// useRef\\r\\nif (hook.memoizedState === null) {\\r\\n  hook.memoizedState = { current: initialValue };\\r\\n}\\r\\n```\\r\\n- React는 **객체 재할당** 패턴을 선호\\r\\n- 불변성(immutability) 원칙을 지키고, 상태 변경을 명확히 표현\\r\\n\\r\\n#### 5. 객체 재할당의 장점\\r\\n\\r\\n1. **불변성 유지**: 참조가 바뀌므로 변경 여부를 쉽게 감지\\r\\n2. **상태 변경의 명확성**: 새로운 상태임을 명확히 표현\\r\\n3. **최적화**: 참조 비교(`===`)만으로 변경 여부 판단 가능\\r\\n4. **React 패턴과 일치**: 공식 구현과 동일한 구조로 미래 호환성↑\\r\\n\\r\\n\\r\\n**[결론]**\\r\\n- React의 구현이 객체 재할당 패턴으로 구성되어 있어 유사한 구조로 설계하기로 결정했습니다. \\r\\n- 객체 재할당 패턴은 불변성/최적화/유지보수 측면에서 더 유리한 면이 있다고 이해했습니다.\\r\\n- 성능 차이는 미미할지라도 구조적 일관성을 유지하기로 했습니다.\\r\\n\\r\\n**[최종 코드]**\\r\\n\\r\\n```ts\\r\\nexport function useMemo<T>(factory: () => T, deps: DependencyList, equals = shallowEquals): T {\\r\\n  const ref = useRef<{ deps: DependencyList; value: T } | null>(null);\\r\\n\\r\\n  if (ref.current === null || !equals(ref.current.deps, deps)) {\\r\\n    const value = factory();\\r\\n    ref.current = { deps, value };\\r\\n    return value;\\r\\n  }\\r\\n\\r\\n  return ref.current.value;\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n<br/>\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\nReact의 `memo` HOC(Higher-Order Component)를 직접 구현하면서 메모이제이션의 핵심 개념과 동작 원리를 학습했습니다.\\r\\n\\r\\n\\r\\n#### 1. 메모이제이션의 목적\\r\\n\\r\\n메모이제이션은 **불필요한 리렌더링을 방지**하여 성능을 최적화하는 기법입니다.\\r\\n\\r\\n```typescript\\r\\n// 메모이제이션 없이: props가 같아도 매번 새로운 컴포넌트 생성\\r\\nconst Component = (props) => <div>{props.name}</div>;\\r\\n\\r\\n// 메모이제이션 적용: props가 같으면 이전 결과 재사용\\r\\nconst MemoizedComponent = memo(Component);\\r\\n```\\r\\n\\r\\n#### 2. 두 가지 ref의 역할\\r\\n\\r\\n메모이제이션을 위해서는 **두 가지 정보를 유지**해야 합니다.\\r\\n\\r\\n```typescript\\r\\nconst prevPropsRef = useRef<P | null>(null);        // 이전 props\\r\\nconst prevResultRef = useRef<React.ReactElement | null>(null); // 이전 렌더링 결과\\r\\n```\\r\\n\\r\\n#### prevPropsRef\\r\\n- 얕은 비교를 위한 이전 props 저장\\r\\n\\r\\n```typescript\\r\\n// 이전 props와 현재 props를 얕은 비교\\r\\nconst propsChanged = !prevPropsRef.current || !equals(prevPropsRef.current, props);\\r\\n```\\r\\n\\r\\n- 필요 이유: props가 실제로 변경되었는지 확인하기 위해\\r\\n\\r\\n#### prevResultRef\\r\\n- 렌더링된 컴포넌트 재사용\\r\\n\\r\\n```typescript\\r\\nif (propsChanged) {\\r\\n  // props가 변경되었을 때만 새로운 React 엘리먼트 생성\\r\\n  prevResultRef.current = React.createElement(Component, props);\\r\\n}\\r\\n\\r\\n// 이전 렌더링 결과 반환 (메모이제이션)\\r\\nreturn prevResultRef.current;\\r\\n```\\r\\n\\r\\n- 필요 이유: props가 같을 때 이전에 생성된 React 엘리먼트를 재사용하기 위해\\r\\n\\r\\n#### 3. 구현 과정에서의 학습\\r\\n\\r\\n- HOC는 **새로운 컴포넌트를 반환**해야 한다.\\r\\n\\r\\n```typescript\\r\\n//  컴포넌트를 반환하는 HOC\\r\\nexport function memo<P extends object>(Component: FunctionComponent<P>) {\\r\\n  return function MemoizedComponent(props: P) {\\r\\n    const prevPropsRef = useRef<P | null>(null);\\r\\n    const prevResultRef = useRef<React.ReactElement | null>(null);\\r\\n    \\r\\n    // 메모이제이션 로직...\\r\\n    \\r\\n    return prevResultRef.current;\\r\\n  };\\r\\n}\\r\\n```\\r\\n\\r\\n-  메모이제이션 로직의 핵심\\r\\n\\r\\n```typescript\\r\\n// 1. Props 비교 (얕은 비교)\\r\\nconst propsChanged = !prevPropsRef.current || !equals(prevPropsRef.current, props);\\r\\n\\r\\nif (propsChanged) {\\r\\n  // 2. 메모이제이션된 컴포넌트 생성\\r\\n  prevPropsRef.current = props;\\r\\n  prevResultRef.current = React.createElement(Component, props);\\r\\n}\\r\\n\\r\\n// 3. 메모이제이션된 결과 반환\\r\\nreturn prevResultRef.current;\\r\\n```\\r\\n\\r\\n#### 얕은 비교(Shallow Comparison)란?\\r\\n- 객체의 첫 번째 레벨 속성들만 비교하는 방식\\r\\n\\r\\n```typescript\\r\\n// 얕은 비교 예시\\r\\nconst prevProps = { name: \\"John\\", age: 30 };\\r\\nconst currentProps = { name: \\"John\\", age: 30 };\\r\\n\\r\\n// 얕은 비교: true (모든 속성이 동일)\\r\\n// 깊은 비교: true (내용이 동일)\\r\\n```\\r\\n\\r\\n#### 리엑트는 왜 얕은 비교를 사용하는가?\\r\\n - 성능상의 이점\\r\\n    - 리액트의 VirtualDOM은 객체 덩어리 -> 참조 비교만 해도 리랜더링 여부를 충분히 알 수 있다.\\r\\n    - 깊은 비교는 모든 중첩 객체를 재귀적으로 비교해야 하므로 비싼 비용이 든다.\\r\\n - React의 철학 -> \\"변경이 있을 때만 리랜더링\\"\\r\\n - 불변성 원칙\\r\\n ```ts\\r\\n// ❌ 잘못된 방식 (변경)\\r\\nconst user = { name: \\"John\\", age: 30 };\\r\\nuser.age = 31; // 같은 참조, 다른 내용\\r\\n\\r\\n// ✅ 올바른 방식 (불변)\\r\\nconst user = { name: \\"John\\", age: 30 };\\r\\nconst updatedUser = { ...user, age: 31 }; // 새로운 참조, 새로운 내용\\r\\n```\\r\\nReact는 데이터의 불변성을 권장하기 때문에 객체나 배열을 **직접 수정하는 대신** 새로운 **객체를 생성**하여 상태를 업데이트 하는 방식을 사용한다.\\r\\n\\r\\n**[최종 코드]**\\r\\n\\r\\n```typescript\\r\\nimport React, { type FunctionComponent } from \\"react\\";\\r\\nimport { shallowEquals } from \\"../equals\\";\\r\\nimport { useRef } from \\"../hooks/useRef\\";\\r\\n\\r\\nexport function memo<P extends object>(Component: FunctionComponent<P>, equals = shallowEquals) {\\r\\n  return function MemoizedComponent(props: P) {\\r\\n    const prevPropsRef = useRef<P | null>(null);\\r\\n    const prevResultRef = useRef<React.ReactElement | null>(null);\\r\\n\\r\\n    const propsChanged = !prevPropsRef.current || !equals(prevPropsRef.current, props);\\r\\n\\r\\n    if (propsChanged) {\\r\\n      prevPropsRef.current = props;\\r\\n      prevResultRef.current = React.createElement(Component, props);\\r\\n    }\\r\\n\\r\\n    return prevResultRef.current;\\r\\n  };\\r\\n}\\r\\n```\\r\\n\\r\\n#### 학습한 핵심 포인트\\r\\n- 메모이제이션의 핵심은 두 가지 ref를 활용 상태 관리이다.\\r\\n- React는 불변성을 권장하므로 참조가 바뀌면 내용도 바뀌었다고 확신할 수 있어 얕은 비교만으로도 충분히 변경 감지가 가능하다.\\r\\n- 메모이제이션은 메모리 사용량을 증가시키지만, 불필요한 렌더링을 방지하여 전반적인 성능을 향상시킬 수 있다.\\r\\n\\r\\n<br/>\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n- 리액트가 재밌게 느껴지는 과제였습니다.\\r\\n- 역시 직접 만들어보는게 책 다독 하는 것 보다 훨씬 구조적인 이해가 쉽다는 것을 알게 되었습니다.\\r\\n- 자연스럽게 리액트의 렌더링 사이클에 대해 깊게 생각해볼 수 있는 계기가 되었습니다!\\r\\n\\r\\n<br/>\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n**[리액트의 렌더링 과정]**\\r\\n\\r\\n리엑트의 렌더링 단계는 3가지로 구별할 수 있습니다. \\r\\n(준일 코치님의 발제자료를 참고하여 작성합니다.)\\r\\n\\r\\n#### 1. Trigger\\r\\n\\r\\n> “**너 렌더링을 시작해!**” 라고 명령 받는 단계 \\r\\n    \\r\\n렌더링을 의도하는 호출을 했을 때 가장 먼저 시작되는 단계입니다.\\r\\n    \\r\\n- 첫번째 렌더링이 수행 될 때(DOM에 마운트)\\r\\n    \\r\\n    `ReactDOM.createRoot(....).render()`\\r\\n    \\r\\n- 컴포넌트의 state가 변경될 때(상태 변경 훅의 setter 함수 호출)\\r\\n- 부모컴포넌트로부터 받는 props가 변경될 때 (자식 컴포넌트의 렌더링이 트리거)\\r\\n\\r\\n#### 2. Render\\r\\n    \\r\\n> “어떤 부분”을 “**어떻게**” 업데이트 해야하는지 확인하는 단계\\r\\n\\r\\n- Virual DOM을 기준으로 변경할 내용을 계산하고(Reconciliation), 이 변경 내역을 내부에 저장합니다.\\r\\n- 렌더 단계에서는 DOM에 직접적인 수정이 일어나지 않고, 변경할 요소를 React의 메모리에 저장하는 단계입니다.\\r\\n- 이 단계에서 컴포넌트 함수(함수형 컴포넌트일 경우)를 호출합니다. 이 호출을 통해 어떤 JSX가 반환 되는지, 즉 UI가 어떻게 보여야 하는지 확인합니다.\\r\\n\\r\\n#### 3. Commit\\r\\n    \\r\\n> 렌더링 과정이 끝나고 “**변화한 부분을 실제 DOM**”에 반영하는 단계\\r\\n\\r\\n- 실제 DOM에 변경 사항을 적용하며 이 과정에서 컴포넌트의 생명주기 메소드를 실행합니다.\\r\\n- 이 부분에서 컴포넌트가 화면에 표시되기 적전과 직후에 실행되는 메소드들이 중요한 역할을 합니다. (useEffect, useLayoutEffect etc..)\\r\\n\\r\\n<br/>\\r\\n\\r\\n**[리액트의 렌더링 최적화 방법]**\\r\\n\\r\\n리액트 렌더링의 핵심은 **바뀌지 않은 부분을 다시 그리지 않게 하는 것** 입니다.\\r\\n목적에 따라 3가지로 나눌 수 있습니다.\\r\\n\\r\\n1. 컴포넌트 리렌더링 방지(memo)\\r\\n- 부모 컴포넌트가 리렌더링될 때, 자식 컴포넌트 props의 변경사항은 없을 때\\r\\n- 렌더링 비용이 비싼 컴포넌트(UI가 복잡하거나 자식 컴포넌트가 많은 경우)\\r\\n\\r\\n2. 함수 재생성 방지(useCallback)\\r\\n- React.memo와 함께 사용 - props로 전달된 함수의 참조를 유지하여 자식 컴포넌트의 리렌더링을 방지\\r\\n- 렌더링 최적화는 아니지만 useEffect의 의존성으로 관리되는 함수의 참조를 유지하여 렌더링사이드 이펙트를 방지\\r\\n\\r\\n3. 고비용 연산 결과 재사용(useMemo)\\r\\n- 연산 결과가 props로 전달되어야 할 때\\r\\n- 연산 결과 자체가 비용이 많이 드는 경우\\r\\n\\r\\n<br/>\\r\\n\\r\\n\\r\\n**[리액트의 렌더링과 관련된 개념들]**\\r\\n    \\r\\n제가 생각하는 렌더링과 관련된 주요 키워드는 세가지 입니다.\\r\\n    \\r\\n**Fiber**  \\r\\n- 재조정 과정을 효율적으로 하기 위한 아키택처\\r\\n- 과거에는 재조정이 시작되면 멈출 수 없어서 화면이 멈춰보이는 현상이 있었는데, Fiber라는 작은 단위로 재조정 과정을 쪼깨어 우선순위를 매길 수 있게 만듦 → 사용자를 기다리지 않게 한다.\\r\\n    \\r\\n **Virtual DOM**\\r\\n- 자바스크립트 메모리상에 존재하는 가벼운 복사본\\r\\n- DOM을 직접 조작하는 것은 매우 느리고 비싼 비용 → 가벼운 가상돔에 먼저 수정하고, 최종적인 변경만 DOM에 반영하여 최소한의 DOM 비용을 소모한다.\\r\\n    \\r\\n **Reconciliation**\\r\\n- 무엇이 바뀌었는지 알아내는 과정\\r\\n- 컴포넌트의 상태가 변경되면 React는 새로운 가상돔 트리를 만들어 이전 가상돔 트리와 비교하는데, 이 차이점(diff)을 계산하는 과정을 말한다.\\r\\n\\r\\n**[리액트의 렌더링과 관련된 라이프사이클 메서드]**\\r\\n\\r\\n**useEffect**\\r\\n- 렌더링 단계(Commit 단계) 후, 브라우저의 **화면 그리기(Painting) 과정이 완료된 이후**에 **비동기적으로 실행**됩니다.\\r\\n- Fetching, Subscriptions, DOM 수동 조작(React에서는 ref를 권장합니다.)\\r\\n- 대부분의 사이드 이펙트를 처리합니다.\\r\\n\\r\\n**useLayoutEffect**\\r\\n- 렌더링(Commit 단계)은 완료되었지만, **브라우저가 화면을 그리기(Painting) 직전**에 **동기적**으로 실행됩니다.\\r\\n- DOM의 레이아웃(스크롤 위치, 크기 등)을 읽고, 그 값에 따라 동기적으로 DOM을 변경하여 사용자 경험이 좋아야 할 때.\\r\\n예) 스크롤 위치를 특정 값으로 설정\\r\\n\\r\\n\\r\\n<br />\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n#### 메모이제이션이 언제 필요할까?\\r\\n- 비용이 많이 드는 계산\\r\\n- 동일한 입력에 대해 반복적으로 계산되는 값을 캐싱할 때\\r\\n- 자주 변경되지 않는 값이 있을 때\\r\\n\\r\\n#### 메모이제이션이 유용하지 않은 경우\\r\\n- **처리량이 적은 경우** → 오히려 오버헤드를 유발한다.\\r\\n- **초기화** 하는 동안 메모이제이션은 어플리케이션의 속도를 저하 시킴 → 리렌더링 단계에서만 이점이 있다.\\r\\n- **의존성 배열이 너무 자주 변경**되는 경우 → 이 경우에는 항상 재계산 되기 때문에 성능적인 이점이 떨어진다.\\r\\n- **메모하고있는 값을 자식 컴포넌트로 전달하지 않는 경우** → 컴포넌트 트리에 깊이 전달되지 않는 경우, 다른 컴포넌트의 렌더링에 영향을 주지 않으므로 참조를 기억하기위해 메모이제이션을 하는게 비효율적일 수 있음.\\r\\n\\r\\n#### 모든 값에 메모이제이션을 사용한다면?\\r\\n- 불필요한 리렌더링을 줄인다\\r\\n- 비용이 많이 드는 계산의 반복을 방지한다.\\r\\n- 메모이제이션 오버헤드\\r\\n\\r\\n#### 전체를 다 useMemo 쓴다고 생각하는 지침을 만들어보자 (특정한 예외케이스가 아닌 모든 경우에 적용하는 지침)\\r\\n\\r\\n의존성 배열이 빈배열이거나 자식 컴포넌트에서 해당 값을 사용하지 않는 경우를 제외하고 모든 값에 `useMemo`를 사용한다.. ? \\r\\n→ 잘못 된 지침!\\r\\n\\r\\n- \\"의존성 배열이 빈배열이거나\\" \\r\\n→ 의존성 배열이 빈 배열이라면 굳이 `useMemo`를 사용할 필요가 없다.\\r\\n- \\"자식 컴포넌트에서 해당 값을 사용하지 않는 경우를 제외하고\\" \\r\\n→ 추후에 변경사항이 생길 여지가 있는 조건이다. 확장성을 고려하지 않은 지침이다.\\r\\n\\r\\n#### 어떤 것에 대한 지침은 생각하지 않게 하는, 간단해야 하는 것 \\r\\n수고로우면 지키기 힘들다.\\r\\n\\r\\n[지침에 대한 반증]\\r\\n\\r\\n```tsx\\r\\n    function Foo() {\\r\\n    \\tconst [xs, setXs] = useState([]);\\r\\n    \\tconst [ys, setYs] = useState([]);\\r\\n    \\tconst z = useMemo(() => sum([...xs, ...ys]), [xs, ys]);\\r\\n    \\tconst z2 = f(xs) + g(ys);\\r\\n    \\r\\n    \\tconst zs = useMemo(() => [...xs, ...ys], [xs, ys]);\\r\\n    \\tconst zs2 = [...xs, ...ys];\\r\\n    \\r\\n    \\treturn (\\r\\n    \\t\\t<div>\\r\\n    \\t\\t\\t<Bar x={z} />\\r\\n    \\t\\t</div>\\r\\n    \\t);\\r\\n    }\\r\\n```\\r\\n    \\r\\n- `zs2`를 `Bar`에 `props`로 넘길 경우, `Foo`가 렌더링이 될 때 마다 메모리 주소를 새롭게 인식해서 `Bar`도 같이 렌더링 된다. \\r\\n→ `useMemo`를 쓰기 적절하다.\\r\\n- `z2`를 `Bar`에 `props`로 넘길 경우, `z2`는 원시 값이기 때문에 `Foo`가 업데이트 된다고 해서 `Bar`가 업데이트 되지 않는다. \\r\\n→ 굳이 `useMemo`를 사용하지 않아도 된다. \\r\\n\\r\\n[결론]\\r\\n\\r\\n **‘데이터가 원시 값일 경우 useMemo를 사용하지 않아도 된다’** 라는 지침이 가장 적절하다.\\r\\n        -> 이 경우에 데이터의 결과값이 원시값일지라도 비용이 드는 계산일 경우에는 useMemo를 쓰면 좋다.\\r\\n\\r\\n#### 모든 값에 useMemo를 사용하지 않는다면?\\r\\n\\r\\n- 메모이제이션 오버헤드 없음\\r\\n- 비용이 많이 드는 계산을 매번 반복해야함\\r\\n- 불필요한 리렌더링 발생\\r\\n\\r\\n#### 모든 값에 useMemo를 사용 vs 모든 값에 useMemo 미사용\\r\\n\\r\\n모든 값을 메모이제이션을 했을 때의 오버헤드와 메모이제이션 비교 하는 비용보다 **메모이제이션을 하지 않았을 때의 리렌더링 비용**이 더 크기 때문에 모든 값에 useMemo를 사용하는 것이 더 이점이 많다고 생각합니다.\\r\\n\\r\\n<br />\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n#### 컨텍스트와 상태관리가 필요한 이유는?\\r\\n\\r\\n#### 1. 컴포넌트 간 데이터 공유의 복잡성\\r\\nReact는 단방향 데이터 흐름을 따르기 때문에, 깊은 컴포넌트 트리에서 데이터를 전달하는 것이 복잡해집니다.\\r\\n\\r\\n```typescript\\r\\n// 깊은 컴포넌트 트리에서 props 전달의 문제\\r\\nfunction App() {\\r\\n  const [user, setUser] = useState({ name: \\"John\\", role: \\"admin\\" });\\r\\n  \\r\\n  return (\\r\\n    <Layout>\\r\\n      <Header user={user} /> {/* 1단계 */}\\r\\n      <Main>\\r\\n        <Sidebar user={user} /> {/* 2단계 */}\\r\\n        <Content>\\r\\n          <Article user={user} /> {/* 3단계 */}\\r\\n          <Comments>\\r\\n            <CommentForm user={user} /> {/* 4단계 */}\\r\\n            <CommentList>\\r\\n              <Comment user={user} /> {/* 5단계 */}\\r\\n            </CommentList>\\r\\n          </Comments>\\r\\n        </Content>\\r\\n      </Main>\\r\\n    </Layout>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n#### 2. Props Drilling 문제\\r\\n\\r\\n중간 컴포넌트들이 실제로 사용하지 않는 props를 전달해야 하는 문제가 발생합니다.\\r\\n\\r\\n```typescript\\r\\n// Props Drilling 예시\\r\\nfunction Sidebar({ user }) {\\r\\n  // user를 실제로 사용하지 않지만 전달해야 함\\r\\n  return (\\r\\n    <div>\\r\\n      <Navigation />\\r\\n      <UserMenu user={user} /> {/* 실제로 user를 사용하는 컴포넌트 */}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Navigation() {\\r\\n  // user가 필요 없지만 상위에서 전달받음\\r\\n  return <nav>{/* 네비게이션 내용 */}</nav>;\\r\\n}\\r\\n```\\r\\n\\r\\n#### 3. 전역 상태 관리의 필요성\\r\\n\\r\\n애플리케이션 전체에서 공유되어야 하는 상태들이 존재합니다.\\r\\n\\r\\n```typescript\\r\\n// 전역 상태의 예시들\\r\\nconst globalStates = {\\r\\n  user: { name: \\"John\\", isAuthenticated: true },\\r\\n  theme: { mode: \\"dark\\", primaryColor: \\"#007bff\\" },\\r\\n  language: \\"ko\\",\\r\\n  notifications: [],\\r\\n  cart: { items: [], total: 0 },\\r\\n  preferences: { autoSave: true, notifications: true }\\r\\n};\\r\\n```\\r\\n\\r\\n#### 4. 성능 최적화의 어려움\\r\\n\\r\\n불필요한 리렌더링을 방지하기 어려운 구조가 됩니다.\\r\\n\\r\\n```typescript\\r\\n// 상태 변경 시 모든 하위 컴포넌트가 리렌더링\\r\\nfunction App() {\\r\\n  const [user, setUser] = useState({ name: \\"John\\" });\\r\\n  const [theme, setTheme] = useState(\\"light\\");\\r\\n  \\r\\n  return (\\r\\n    <div>\\r\\n      <Header user={user} theme={theme} />\\r\\n      <Main user={user} theme={theme} />\\r\\n      <Footer user={user} theme={theme} />\\r\\n    </div>\\r\\n  );\\r\\n  // user나 theme 중 하나라도 변경되면 모든 컴포넌트가 리렌더링\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n#### 컨텍스트와 상태관리가 해결해주는 것\\r\\n\\r\\n#### 1. Props Drilling 해결\\r\\n\\r\\n```typescript\\r\\n// ✅ Context를 사용한 깔끔한 구조\\r\\nconst UserContext = createContext();\\r\\n\\r\\nfunction App() {\\r\\n  const [user, setUser] = useState({ name: \\"John\\" });\\r\\n  \\r\\n  return (\\r\\n    <UserContext.Provider value={{ user, setUser }}>\\r\\n      <Layout>\\r\\n        <Header />\\r\\n        <Main>\\r\\n          <Sidebar />\\r\\n          <Content>\\r\\n            <Article />\\r\\n          </Content>아 ,\\r\\n        </Main>\\r\\n      </Layout>\\r\\n    </UserContext.Provider>\\r\\n  );\\r\\n}\\r\\n\\r\\n// 필요한 곳에서만 사용\\r\\nfunction Article() {\\r\\n  const { user } = useContext(UserContext);\\r\\n  return <div>Hello, {user.name}!</div>;\\r\\n}\\r\\n```\\r\\n\\r\\n#### 2. 코드 분리와 모듈화\\r\\n```ts\\r\\nconst UserContext = createContext();\\r\\n\\r\\nexport function UserProvider({ children }) {\\r\\n  const [user, setUser] = useState(null);\\r\\n  return (\\r\\n    <UserContext.Provider value={{ user, setUser }}>\\r\\n      {children}\\r\\n    </UserContext.Provider>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport function useUser() {\\r\\n  const context = useContext(UserContext);\\r\\n  if (!context) throw new Error(\\"useUser must be used within UserProvider\\");\\r\\n  return context;\\r\\n}\\r\\n```\\r\\n- 사용자 상태와 관련된 로직을 UserProvider와 useUser 훅으로 캡슐화하여 독립적인 모듈을 만들 수 있습니다.\\r\\n- Context를 활용해 사용자 상태를 관리하는 \\"관심사\\"를 분리하고, useUser 커스텀 훅으로 내부 구현을 추상화하여 상태를 관리할 수 있습니다.\\r\\n\\r\\n#### 각각 적절한 사용은 언제일까?\\r\\n\\r\\n**Context API**\\r\\n- 컨텍스트가 필요한 컴포넌트들 사이에서 지역적인 상태 공유가 필요할때\\r\\n- 데이터의 변경이 적을 때, 리렌더링 발생이 적은 상태를 공유할 때\\r\\n- Compound Component Pattern에서의 쓰임\\r\\n\\r\\n**상태관리 라이브러리**\\r\\n- 여러 페이지에서 복잡한 상태관리가 필요할 때\\r\\n- 상태가 자주 공유되거나 변경되어야 할 때\\r\\n\\r\\n\\r\\n#### 결론\\r\\n\\r\\n리액트는 단방향 데이터 바인딩을 기반으로 한 라이브러리이기 때문에 앞에서 언급한 문제점들은 불가피 하다고 생각합니다. \\r\\n하지만 단방향 데이터 바인딩이 주는 이점이 리액트 어플리케이션을 확장 가능하고 유지보수하기 쉽게 만들어 주는 기반이 되었고, 이를 통해 데이터 흐름을 명확하고 예측 가능하게 만들어 주기 때문에 리액트가 웹 표준으로 자리 잡을 수 있었다고 생각합니다.\\r\\n\\r\\n상태관리와 Context API는 단방향 흐름을 지키면서도 리액트의 구조적인 문제를 해결하고 컴포넌트 간 상태를 효율적으로 전달하기 위해 발전한 도구들입니다. 각 상황에 맞게 적절하게 사용하는 것이 리액트를 잘 활용하는 것이라고 생각합니다. \\r\\n\\r\\n\\r\\n<br /> \\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n#### ToastProvider\\r\\n\\r\\n```tsx\\r\\nexport const ToastProvider = memo(({ children }: PropsWithChildren) => {\\r\\n  const [state, dispatch] = useReducer(toastReducer, initialState);\\r\\n  const actions = useToastActions({ dispatch });\\r\\n  const visible = state.message !== \\"\\";\\r\\n\\r\\n  return (\\r\\n    <ToastActionsContext value={actions}>\\r\\n      <ToastStateContext value={state}>\\r\\n        {children}\\r\\n        {visible && createPortal(<Toast />, document.body)}\\r\\n      </ToastStateContext>\\r\\n    </ToastActionsContext>\\r\\n  );\\r\\n});\\r\\n\\r\\n```\\r\\n\\r\\n```ts\\r\\nexport function useToastActions({ dispatch }: { dispatch: Dispatch }) {\\r\\n  const { show, hide } = useMemo(() => createActions(dispatch), [dispatch]);\\r\\n  const hideAfter = useMemo(() => debounce(hide, DEFAULT_DELAY), [hide]);\\r\\n\\r\\n  const showWithHide = useAutoCallback((...args: Parameters<typeof show>) => {\\r\\n    show(...args);\\r\\n    hideAfter();\\r\\n  });\\r\\n\\r\\n  const actions = useMemo(() => ({ show: showWithHide, hide }), [showWithHide, hide]);\\r\\n  return actions;\\r\\n}\\r\\n```\\r\\n\\r\\n**[구현 의도]** \\r\\n- Toast 와 관련된 액션 로직을 훅으로 추상화하고자 했습니다.\\r\\n- 컴포넌트 리렌더링 마다 함수의 참조가 변경되는 것을 방지하고자 했습니다. \\r\\n- 리렌더링으로 인한 사이드이펙트에서 액션함수들의 참조를 유지할 수 있는 방법이 2가지가 있다고 생각했습니다.\\r\\n    -  useState 초기화 함수를 사용하는 방법 \\r\\n    - useMemo 로 메모이제이션하는 방법\\r\\n\\r\\n useState의 초기화 함수에 할당하는 경우는 첫 렌더링 이후에 바뀌지 않을 것이 보장되는 값들이어야 한다고 생각하는데, 이 액션함수들이 그런 경우에 해당하는 근거가 코드 상에 없다고 생각했기 때문에 useMemo로 메모이제이션을 했습니다.\\r\\n (그런데 질문을 준비하면서 공식 문서에 **useReducer가 반환하는 dispatch 함수의 참조는 컴포넌트의 생애주기 동안 변경되지 않음을 보장한다**는 것이 명시되어 있음을 알게 되었습니다.  결국 두 가지 모두 효용이 있는 방법이라고 생각됩니다!)\\r\\n\\r\\n\\r\\n**[질문]**\\r\\n- useMemo를 사용하다보니 관련된 다른 함수들의 참조도 함께 메모이제이션하게 되어 결국 모든 함수들을 메모이제이션하게 되었는데, 이게 맞나? 라는 생각이 들었습니다. \\r\\nuseState의 초기화 함수를 사용하는 방식이 그런 면에서는 조금 더 직관적이고 간단한(?) 방법이 될수도 있을 것 같습니다. 이 부분에 대해서 코치님의 의견은 어떠신가요?!\\r\\n- 저는 리액트에서 **적절한 추상화**의 경계를 나누는 것(?)이 어렵게 느껴지는데, \\"추상화 레벨\\"이라는 것을 잘 나누는 기준이 있을까요?\\r\\n  위 코드의 useToastActions 훅의 추상화 레벨은 적절하게 나누어져 있다고 볼 수 있을까요?\\r\\n- 실제로 비즈니스로직과 함께 코드를 구현하다 보면 단일책임을 갖도록 하는것이 어렵다고 생각하는데, 책임을 나누는 눈을 기르고 싶다면 리팩토링이나 코드를 작성할 때 어떤 것을 중심적으로 생각하는게 좋을지 궁금합니다!\\r\\n\\r\\n\\r\\n","created_at":"2025-07-19T04:31:12Z","updated_at":"2025-07-25T17:15:36Z","closed_at":null,"merged_at":null,"merge_commit_sha":"9c4412106fbf4c941e77fb476404a992ff6a1e82","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/3/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/3/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/3/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/848e1fddc36d3bec129d2c5b8f6cc0ea1a640720","head":{"label":"tomatopickles404:main","ref":"main","sha":"848e1fddc36d3bec129d2c5b8f6cc0ea1a640720","user":{"login":"tomatopickles404","id":210817015,"node_id":"U_kgDODJDP9w","avatar_url":"https://avatars.githubusercontent.com/u/210817015?v=4","gravatar_id":"","url":"https://api.github.com/users/tomatopickles404","html_url":"https://github.com/tomatopickles404","followers_url":"https://api.github.com/users/tomatopickles404/followers","following_url":"https://api.github.com/users/tomatopickles404/following{/other_user}","gists_url":"https://api.github.com/users/tomatopickles404/gists{/gist_id}","starred_url":"https://api.github.com/users/tomatopickles404/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tomatopickles404/subscriptions","organizations_url":"https://api.github.com/users/tomatopickles404/orgs","repos_url":"https://api.github.com/users/tomatopickles404/repos","events_url":"https://api.github.com/users/tomatopickles404/events{/privacy}","received_events_url":"https://api.github.com/users/tomatopickles404/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022435274,"node_id":"R_kgDOPPEfyg","name":"front_6th_chapter1-3","full_name":"tomatopickles404/front_6th_chapter1-3","private":false,"owner":{"login":"tomatopickles404","id":210817015,"node_id":"U_kgDODJDP9w","avatar_url":"https://avatars.githubusercontent.com/u/210817015?v=4","gravatar_id":"","url":"https://api.github.com/users/tomatopickles404","html_url":"https://github.com/tomatopickles404","followers_url":"https://api.github.com/users/tomatopickles404/followers","following_url":"https://api.github.com/users/tomatopickles404/following{/other_user}","gists_url":"https://api.github.com/users/tomatopickles404/gists{/gist_id}","starred_url":"https://api.github.com/users/tomatopickles404/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tomatopickles404/subscriptions","organizations_url":"https://api.github.com/users/tomatopickles404/orgs","repos_url":"https://api.github.com/users/tomatopickles404/repos","events_url":"https://api.github.com/users/tomatopickles404/events{/privacy}","received_events_url":"https://api.github.com/users/tomatopickles404/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/tomatopickles404/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/tomatopickles404/front_6th_chapter1-3/deployments","created_at":"2025-07-19T04:28:44Z","updated_at":"2025-07-24T15:28:38Z","pushed_at":"2025-07-24T15:28:57Z","git_url":"git://github.com/tomatopickles404/front_6th_chapter1-3.git","ssh_url":"git@github.com:tomatopickles404/front_6th_chapter1-3.git","clone_url":"https://github.com/tomatopickles404/front_6th_chapter1-3.git","svn_url":"https://github.com/tomatopickles404/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":513,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/3"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/3"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/3"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/3/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/3/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/3/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/848e1fddc36d3bec129d2c5b8f6cc0ea1a640720"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/4","id":2678765074,"node_id":"PR_kwDOPMCTuc6fqrYS","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/4","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/4.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/4.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/4","number":4,"state":"open","locked":false,"title":"[3팀 정채은] Chapter 1-3. 프레임워크 없이 SPA 만들기","user":{"login":"zenna9","id":97446606,"node_id":"U_kgDOBc7qzg","avatar_url":"https://avatars.githubusercontent.com/u/97446606?v=4","gravatar_id":"","url":"https://api.github.com/users/zenna9","html_url":"https://github.com/zenna9","followers_url":"https://api.github.com/users/zenna9/followers","following_url":"https://api.github.com/users/zenna9/following{/other_user}","gists_url":"https://api.github.com/users/zenna9/gists{/gist_id}","starred_url":"https://api.github.com/users/zenna9/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zenna9/subscriptions","organizations_url":"https://api.github.com/users/zenna9/orgs","repos_url":"https://api.github.com/users/zenna9/repos","events_url":"https://api.github.com/users/zenna9/events{/privacy}","received_events_url":"https://api.github.com/users/zenna9/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [ ] useRef 구현 완료\\r\\n- [ ] useMemo 구현 완료\\r\\n- [ ] useCallback 구현 완료\\r\\n- [ ] useDeepMemo 구현 완료\\r\\n- [ ] useShallowState 구현 완료\\r\\n- [ ] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [ ] memo 구현 완료\\r\\n- [ ] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [ ] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [ ] useShallowSelector 구현\\r\\n- [ ] useStore 구현\\r\\n- [ ] useRouter 구현\\r\\n- [ ] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [ ] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-19T05:59:31Z","updated_at":"2025-07-19T05:59:36Z","closed_at":null,"merged_at":null,"merge_commit_sha":null,"assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/4/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/4/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/4/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/ccf16cd8ee17fd348ca783aa2019ca2e0cfc050d","head":{"label":"zenna9:main","ref":"main","sha":"ccf16cd8ee17fd348ca783aa2019ca2e0cfc050d","user":{"login":"zenna9","id":97446606,"node_id":"U_kgDOBc7qzg","avatar_url":"https://avatars.githubusercontent.com/u/97446606?v=4","gravatar_id":"","url":"https://api.github.com/users/zenna9","html_url":"https://github.com/zenna9","followers_url":"https://api.github.com/users/zenna9/followers","following_url":"https://api.github.com/users/zenna9/following{/other_user}","gists_url":"https://api.github.com/users/zenna9/gists{/gist_id}","starred_url":"https://api.github.com/users/zenna9/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zenna9/subscriptions","organizations_url":"https://api.github.com/users/zenna9/orgs","repos_url":"https://api.github.com/users/zenna9/repos","events_url":"https://api.github.com/users/zenna9/events{/privacy}","received_events_url":"https://api.github.com/users/zenna9/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1021464147,"node_id":"R_kgDOPOJOUw","name":"front_6th_chapter1-3","full_name":"zenna9/front_6th_chapter1-3","private":false,"owner":{"login":"zenna9","id":97446606,"node_id":"U_kgDOBc7qzg","avatar_url":"https://avatars.githubusercontent.com/u/97446606?v=4","gravatar_id":"","url":"https://api.github.com/users/zenna9","html_url":"https://github.com/zenna9","followers_url":"https://api.github.com/users/zenna9/followers","following_url":"https://api.github.com/users/zenna9/following{/other_user}","gists_url":"https://api.github.com/users/zenna9/gists{/gist_id}","starred_url":"https://api.github.com/users/zenna9/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zenna9/subscriptions","organizations_url":"https://api.github.com/users/zenna9/orgs","repos_url":"https://api.github.com/users/zenna9/repos","events_url":"https://api.github.com/users/zenna9/events{/privacy}","received_events_url":"https://api.github.com/users/zenna9/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/zenna9/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/zenna9/front_6th_chapter1-3/deployments","created_at":"2025-07-17T12:40:52Z","updated_at":"2025-07-19T05:57:04Z","pushed_at":"2025-07-19T05:57:00Z","git_url":"git://github.com/zenna9/front_6th_chapter1-3.git","ssh_url":"git@github.com:zenna9/front_6th_chapter1-3.git","clone_url":"https://github.com/zenna9/front_6th_chapter1-3.git","svn_url":"https://github.com/zenna9/front_6th_chapter1-3","homepage":null,"size":143,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/4"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/4"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/4"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/4/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/4/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/4/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/ccf16cd8ee17fd348ca783aa2019ca2e0cfc050d"}},"author_association":"FIRST_TIME_CONTRIBUTOR","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/6","id":2678814830,"node_id":"PR_kwDOPMCTuc6fq3hu","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/6","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/6.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/6.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/6","number":6,"state":"open","locked":false,"title":"[2팀 박소연] Chapter 1-3. 프레임워크 없이 SPA 만들기","user":{"login":"soyalattee","id":68572832,"node_id":"MDQ6VXNlcjY4NTcyODMy","avatar_url":"https://avatars.githubusercontent.com/u/68572832?v=4","gravatar_id":"","url":"https://api.github.com/users/soyalattee","html_url":"https://github.com/soyalattee","followers_url":"https://api.github.com/users/soyalattee/followers","following_url":"https://api.github.com/users/soyalattee/following{/other_user}","gists_url":"https://api.github.com/users/soyalattee/gists{/gist_id}","starred_url":"https://api.github.com/users/soyalattee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/soyalattee/subscriptions","organizations_url":"https://api.github.com/users/soyalattee/orgs","repos_url":"https://api.github.com/users/soyalattee/repos","events_url":"https://api.github.com/users/soyalattee/events{/privacy}","received_events_url":"https://api.github.com/users/soyalattee/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://soyalattee.github.io/front_6th_chapter1-3/\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n이번 과제를 통해 관성적으로 사용하던 React 훅들을 내부 동작과 원리를 이해하게되었습니다.\\r\\n앞으로는 React 훅을 사용할때 더 의도를 명확하게 사용할 수 있을것 같습니다.\\r\\n\\r\\n1. useRef\\r\\n“DOM을 참조하거나, 렌더링과 무관하게 값을 유지하는 용도” 정도로만 이해하고, 암기식 패턴처럼 사용하고 있었습니다. \\r\\n\\r\\n이번 과제를 통해 useRef가 렌더링 사이에서도 값을 유지하는 객체로 React 내부 상태로 인식되지 않아 리렌더링을 발생시키지 않는다는 점을 이해하게 되었고, useRef에 대한 활용범위를 넓힐 수 있었습니다.\\r\\n\\r\\n2. useState 내부 동작원리\\r\\nuseState 의 내부 구조를 탐색해보며 상태가 클로저와 배열을 기반으로 순서 기반으로 관리되는 구조라는걸 알 수 있었습니다.\\r\\n특히 [해당 아티클](https://hewonjeong.github.io/deep-dive-how-do-react-hooks-really-work-ko/)을 참고하며 `setState` 호출 시, **컴포넌트 함수가 다시 실행**되며 상태 값을 업데이트하는 흐름을 이해했습니다. \\r\\n\\r\\n그리고 React의 Hook이 왜 그런 방식으로 설계 되었는지에 대한 이해를 얻을 수 있었습니다.\\r\\n이를 통해 단순 동작하는 코드를 넘어 \'이 방식이 성능에 어떤 영향을 줄까?\'를 고민하고 설계할 수 있는 개발자가 될 수 있었습니다. \\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n팀원들과 코드리뷰를 진행하며 트러블슈팅한 과정이 만족스러워서 공유해보려고합니다.\\r\\n\\r\\n#### [memo.ts](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/6#discussion_r2228391437) \\r\\n\\r\\n**<문제 발견>**\\r\\n\\r\\n 진희님에게 memo.ts 코드에 관해 다음과 같은 [피드백](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/6#discussion_r2228391437)을 받았습니다. \\r\\n\\r\\n<img width=\\"588\\" height=\\"248\\" alt=\\"스크린샷 2025-07-25 오전 8 34 50\\" src=\\"https://github.com/user-attachments/assets/78d9d743-d8d1-460b-8808-aab158f78dd3\\" />\\r\\n\\r\\n\\r\\n다시 생각해보니 문제가 있는 코드였고, 해당 memo 를 사용해 테스트하기 위해 TestApp 파일을 만들었습니다.\\r\\n\\r\\n**<원인>** \\r\\n```js\\r\\nconst TestComponent = memo((props: { name: string }) => {\\r\\n\\tconsole.log(\\"TestComponent 렌더링:\\", props.name);\\r\\n\\treturn <div>{props.name}</div>;\\r\\n});\\r\\n\\r\\nexport const TestApp = () => {\\r\\n\\tconst [count, setCount] = useState(0);\\r\\n\\r\\n     return (\\r\\n\\t<>\\r\\n            <button onClick={() => setCount(count + 1)}>부모 리렌더링 (Count: {count})</button>\\r\\n\\t   <TestComponent name=\\"test\\" />\\r\\n\\t   <div>부모 렌더링 횟수: {count}</div>\\r\\n\\t</>\\r\\n    );\\r\\n};\\r\\n```\\r\\n\\r\\n예상대로 첫 렌더링후 재렌더링이 발생하며 같은 prop이 들어가자, null이 반환되어 자식 컴포넌트가 사라졌습니다.\\r\\n\\r\\n![Jul-25-2025 07-48-30](https://github.com/user-attachments/assets/43b27e40-192c-4795-8cfd-94f5fd3fd983)\\r\\n\\r\\n**<문제 해결>** \\r\\ncomponent를 ref에 저장해서 관리해야 재렌더링이 발생하지 않겠구나 라고 생각되어 코드를 수정했습니다.\\r\\nprevRef 에 props와 component를 객체로 만들어 동시에 저장하였고, 기존 props와 변경된 props를 비교하여, 변경이 일어났을때에만 `prevRef.current.component(props)` 를 반환했습니다.\\r\\n\\r\\n```js\\r\\n\\r\\n  const MemoizedComponent = (props: P) => {\\r\\n\\r\\n    const prevRef = useRef<{ props: P; component: FunctionComponent<P> } | null>(null);\\r\\n    if (prevRef.current === null || !equals(prevRef.current.props, props)) {\\r\\n      prevRef.current = { props, component: Component };\\r\\n    }\\r\\n    return prevRef.current.component(props);\\r\\n  };\\r\\n\\r\\n  return MemoizedComponent;\\r\\n```\\r\\n\\r\\n하지만 이 코드에도 문제가 있었습니다.\\r\\n해당 코드는 함수를 반환하며 매번 컴포넌트를 호출하게되어, 반환할때마다 새롭게 렌더링이 되고있었습니다.\\r\\n\\r\\n![Jul-25-2025 07-59-45](https://github.com/user-attachments/assets/221364a5-6a8d-4974-9132-1671655c27c6)\\r\\n\\r\\n\\r\\n\'컴포넌트의 렌더링 결과\'를 저장하기 위해 다시 코드를 수정했습니다. \\r\\n\\r\\n(TO-BE)\\r\\n```js\\r\\n const MemoizedComponent = (props: P) => {\\r\\n\\r\\n    const prevRef = useRef<{ props: P; component: ReactNode | Promise<ReactNode> } | null>(null);\\r\\n    if (prevRef.current === null || !equals(prevRef.current.props, props)) {\\r\\n      prevRef.current = { props, component: Component(props) as ReactNode };\\r\\n    }\\r\\n    return prevRef.current.component;\\r\\n  };\\r\\n\\r\\n  return MemoizedComponent;\\r\\n```\\r\\n\\r\\nuseRef에 저장할 값의 타입을 ReactNode로 하고, Copoment(props) 값을 저장하여 렌더링 결과를 캐싱할 수 있었습니다.\\r\\n\\r\\n수정 커밋: d648629d37343f66e8414b4256c89a2e8d0a425d\\r\\n\\r\\n![Jul-25-2025 08-08-58](https://github.com/user-attachments/assets/809a7ec7-f36d-4239-ba1b-87df32649671)\\r\\n\\r\\n\\r\\n\\r\\n#### [shallowEquals&deepEquals](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/6#discussion_r2228388119)\\r\\n\\r\\n**<문제 발견>**\\r\\n도은님에게 object와 배열 비교문 관련하여 [피드백](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/6#discussion_r2228388119) 받았습니다.\\r\\n\\r\\n<img width=\\"593\\" height=\\"254\\" alt=\\"스크린샷 2025-07-25 오전 8 50 57\\" src=\\"https://github.com/user-attachments/assets/3759a9c4-ccac-4caa-9041-c6c3e1e5fcf2\\" />\\r\\n\\r\\n**<원인>** (AS-IS)\\r\\n\\r\\n```js\\r\\nexport const shallowEquals = (a: unknown, b: unknown) => {\\r\\n  if (typeof a !== typeof b) return false;\\r\\n\\r\\n  // 객체 비교\\r\\n  if (typeof a === \\"object\\" && typeof b === \\"object\\" && a !== null && b !== null) {\\r\\n    const objA = a as Record<string, unknown>;\\r\\n    const objB = b as Record<string, unknown>;\\r\\n    const keysA = Object.keys(objA);\\r\\n    const keysB = Object.keys(objB);\\r\\n    if (keysA.length !== keysB.length) return false;\\r\\n\\r\\n    return keysA.every((key) => {\\r\\n      if (key in objA && key in objB) {\\r\\n        return objA[key] === objB[key];\\r\\n      }\\r\\n      return false;\\r\\n    });\\r\\n  }\\r\\n\\r\\n  // 배열 비교\\r\\n  if (Array.isArray(a) && Array.isArray(b)) {\\r\\n    if (a.length !== b.length) return false;\\r\\n    return a.every((v, index) => v === b[index]);\\r\\n  }\\r\\n  return a === b;\\r\\n};\\r\\n```\\r\\n\\r\\nObject 비교시에 배열도 처리됨으로 마지막에 작성한 배열비교 코드는 작동하지 않고 있었습니다. \\r\\n\\r\\n하지만 해당 코드는 문제가 생길 수 있습니다.\\r\\n\\r\\n예를들어,\\r\\n```js\\r\\nshallowEquals({0: \\"a\\", 1: \\"b\\"}, [\\"a\\", \\"b\\"]) \\r\\n```\\r\\n객체와 배열을 비교할 경우, 배열의 키 값도 0, 1 순으로 들어가게 됩니다.\\r\\n이런 케이스에 의도치 않은 true 가 반환될 수 있습니다.\\r\\n\\r\\n**<문제 해결>**\\r\\n\\r\\n우선 배열비교를 객체 비교보다 먼저 할 수 있도록 했습니다.  \\r\\n그리고 객체를 비교할때 체크하던 null 체크도 위로 올려 가독성을 개선했습니다.\\r\\n\\r\\n(TO-BE)\\r\\n```js\\r\\nexport const shallowEquals = (a: unknown, b: unknown) => {\\r\\n  // null 체크\\r\\n  if (a === null || b === null) return a === b;\\r\\n\\r\\n  // 타입이 다르면 다름\\r\\n  if (typeof a !== typeof b) return false;\\r\\n\\r\\n  // 배열 비교\\r\\n  if (Array.isArray(a) && Array.isArray(b)) {\\r\\n    if (a.length !== b.length) return false;\\r\\n    return a.every((v, index) => v === b[index]);\\r\\n  }\\r\\n\\r\\n  // 객체 비교\\r\\n  if (typeof a === \\"object\\" && typeof b === \\"object\\" && a !== null && b !== null) {\\r\\n    const objA = a as Record<string, unknown>;\\r\\n    const objB = b as Record<string, unknown>;\\r\\n    const keysA = Object.keys(objA);\\r\\n    const keysB = Object.keys(objB);\\r\\n    if (keysA.length !== keysB.length) return false;\\r\\n\\r\\n    return keysA.every((key) => {\\r\\n      if (key in objA && key in objB) {\\r\\n        return objA[key] === objB[key];\\r\\n      }\\r\\n      return false;\\r\\n    });\\r\\n  }\\r\\n\\r\\n  return a === b;\\r\\n};\\r\\n\\r\\n```\\r\\n\\r\\n팀원들과의 코드리뷰를 통해 제가 놓치고 있던 에러 케이스를 빠르게 발견하고,  \\r\\n더 명확하고 읽기 쉬운 구조로 리팩토링할 수 있었습니다.\\r\\n\\r\\n\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n앞서 언급했듯이, 단순 동작하는 코드를 넘어 \'이 방식이 성능에 어떤 영향을 줄까?\'를 고민하고 설계할 수 있는 개발자로 성장 할 계기가 되었습니다.\\r\\n\\r\\n이번에 구현해본 `memo`와 `useCallback`을 활용한 **렌더링 최적화 기법**은 평소에 잘 적용하지 않고 개발했던 부분 이였습니다.\\r\\n\\r\\n앞으로는 실제 업무에서 자주 사용하는 컴포넌트들에 직접 적용해보고, 렌더링 빈도 변화나 성능 차이를 DevTools로 분석해보며 효과를 검증해보려고 합니다.\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n이번 과제는  React에서 Hook의 본질을 이해하고 직접 구조를 따라는 식으로 학습 경험을 쌓아갈 수 있어 좋았습니다.\\r\\n그동안 \\"작동은 되지만 왜 이렇게 써야 하지?\\"라고 생각했던 부분들이 직접 구현하고 실험하면서 \\"이런 구조여서 이렇게 동작하는구나..\\"라고 체득되는 순간들이 많아 좋았습니다. \\r\\n\\r\\n그런데, 제가 그냥 \'테스트 코드 통과하네\' 하고 넘어간 부분이 있었는데 (memo.js, deepMemo.js)\\r\\n목요일 팀원들과 코드리뷰를 한 덕에  \'어..이거 잘못짰네...?\' 라고 알아챈 부분이 있었습니다.\\r\\n\\r\\n제가 memo.js에서 null을 리턴하고 있었어요 ㅎㅎ..\\r\\n해당 커밋: 8aacb390aac0506f864fbb0e397b6103cd362b61\\r\\n\\r\\nbasic.test.tsx의 \'직접 만든 memo\' 테스트코드에서 호출 횟수는 체크하나, null 관련 체크는 없어서 통과되었나봐요 하핫 \\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\nReact의 렌더링은 크게 **초기 렌더링**과 **리렌더링** 두 단계로 나눌 수 있다.\\r\\n\\r\\n#### 1. 초기 렌더링\\r\\n\\r\\n- JSX로 작성된 컴포넌트는 **React.createElement()** 로 변환되어 **가상 DOM(vDOM)** 을 구성\\r\\n- 이 vDOM을 기반으로 React는 **Fiber Tree**를 생성함(=>16버전 이후)\\r\\n- Fiber Tree를 바탕으로 실제 DOM을 생성하고, 브라우저에 그림\\r\\n** 15이하 버전에서는 vDOM 트리를 재귀적으로 순회하는 방식\\r\\n#### 2. 리렌더링\\r\\n\\r\\n 다음과 같은 경우 리렌더링이 발생한다.\\r\\n- `useState`, `useReducer` 등으로 상태 업데이트    \\r\\n- 부모 컴포넌트의 props 가 변경됨\\r\\n- `useContext`로 구독 중인 context 값이 변경됨\\r\\n- `forceUpdate()` 호출\\r\\n\\r\\n리렌더링이 일어나면, React는 이전 vDOM과 새로운 vDOM을 비교(diffing)하고 변경된 부분만 **real DOM** 에 업데이트한다.  \\r\\n→ 이를 **Reconciliation**이라고 부른다. \\r\\n\\r\\n컴포넌트 함수 자체는 리렌더링 시마다 다시 실행되지만, 실제 DOM 업데이트는 **변경된 부분만 수행**되는것 (부분 렌더링)\\r\\n#### 3. 자식 컴포넌트도 무조건 리렌더링 될까?\\r\\n\\r\\n 기본적으로 부모 컴포넌트가 리렌더링되면 자식도 재실행된다. 하지만 자식 컴포넌트가 props가 바뀌지 않았다면 굳이 리렌더링할 필요가 없다.\\r\\n\\r\\n→ 이를 방지하기 위한 최적화 방법들이 있다. \\r\\n\\r\\n| 방법                       | 설명                                       |\\r\\n| ------------------------ | ---------------------------------------- |\\r\\n| `React.memo(Component)`  | props가 바뀌지 않으면 컴포넌트 재실행 방지               |\\r\\n| `useCallback(fn, deps)`  | 함수 참조가 바뀌는 것을 방지 (자식에게 함수 props 전달 시 유용) |\\r\\n| `useMemo(valueFn, deps)` | 값 계산을 캐싱하여 리렌더 시 재계산 방지                  |\\r\\n| `useRef`                 | 렌더링과 무관하게 값을 유지할 수 있는 참조 저장소             |\\r\\n\\r\\n####  정리\\r\\n- 리액트는 상태나 props가 바뀌면 리렌더링을 수행\\r\\n- 리렌더링은 컴포넌트 함수 재실행을 의미하며, 실제 DOM은 diff 알고리즘을 통해 **필요한 부분만 갱신**\\r\\n- 부모가 리렌더링되면 자식도 재실행되지만, **메모이제이션 기법**을 활용해 불필요한 렌더링을 막을 수 있음\\r\\n\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n**메모이제이션**이란, 컴퓨터가 이미 계산한 결과를 저장해뒀다가 같은 계산이 필요할 때 재사용하는 최적화 기법이다. React에서 메모이제이션이 필요한 이유는 다음과 같다.\\r\\n\\r\\n#### **1. 리액트 렌더링 시 매번 모든 코드를 재실행한다**\\r\\n\\r\\nReact에서 렌더링은 **컴포넌트 함수를 매번 다시 호출하는 과정**이다. 상태가 바뀔 때마다 React는 컴포넌트 안에 있는 코드를 위에서부터 아래로 전부 실행한다.\\r\\n\\r\\n즉, 매 렌더링마다 다음의 모든 과정이 다시 일어난다:\\r\\n- 함수 호출\\r\\n- 값 계산\\r\\n- 객체 생성\\r\\n\\r\\n만약 렌더링 과정에 아래와 같은 **무거운 연산**이 포함되어 있다면 어떨까?\\r\\n\\r\\n##### 예: (AS-IS)피보나치 계산\\r\\n```js\\r\\nfunction fibonacci(n: number): number {  \\r\\n if (n <= 1) return n; \\r\\n return fibonacci(n - 1) + fibonacci(n - 2); \\r\\n}  \\r\\n\\r\\nfunction MyComponent({ num }: { num: number }) { \\r\\n  const result = fibonacci(num); // 매 렌더마다 계산되겠죠? \\r\\n  return <div>{result}</div>; \\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\nReact에서 뜬금없이 피보나치를 돌일 일은 없을것 같지만, 이렇게 매 렌더링마다 동일한 계산이 반복되면 성능이 크게 떨어진다.  \\r\\n이때 사용하는 최적화 방법이 바로 **메모이제이션**이다.\\r\\n\\r\\n##### (TO-BE)적용 예(useMemo)\\r\\n```js\\r\\nfunction MyComponent({ num }: { num: number }) {\\r\\n  const result = useMemo(() => fibonacci(num), [num]); // num 바뀔때만 재계산 ✅\\r\\n\\r\\n  return <div>{result}</div>;\\r\\n}\\r\\n```\\r\\n\\r\\n이제 `num`이 변경될 때만 피보나치가 다시 계산되므로 효율적으로 동작한다!\\r\\n\\r\\n#### 2. 불필요한 리렌더링을 방지하고 싶을때\\r\\n\\r\\n컴포넌트가 받는 **props가 바뀌지 않으면 이전 렌더링 결과를 재사용**하여  **불필요한 리렌더링을 방지하는 메모이제이션 기법**이다.\\r\\n\\r\\n 부모 컴포넌트가 리렌더링될 때 자식 컴포넌트가 props의 변경이 없는데도 불필요하게 다시 렌더링되는 경우에 사용할 수있다. \\r\\n\\r\\nprops가 참조로 전달된 함수나 객체일 경우, 참조가 바뀌지 않도록 `useCallback`이나 `useMemo`로 미리 처리해줘야 효과적이다. \\r\\n\\r\\n##### 예: (AS-IS) 부모가 자식에게 props를 전달할 때\\r\\n```js\\r\\nfunction Parent() {\\r\\n  const [count, setCount] = useState(0);\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <Child name=\\"자식 컴포넌트\\" />\\r\\n      <button onClick={() => setCount(count + 1)}>Parent Count: {count}</button>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Child({ name }) {\\r\\n  console.log(\\"자식 렌더링 발생!\\"); // 부모가 렌더링될 때마다 발생\\r\\n  return <div>{name}</div>;\\r\\n}\\r\\n```\\r\\n\\r\\n부모가 리렌더링될 때마다 자식 컴포넌트는 변경된 props가 없음에도 불구하고 계속 리렌더링된다.\\r\\n##### (TO-BE)적용 예 (memo)\\r\\n```js\\r\\nconst Child = React.memo(({ onClick }) => {\\r\\n  console.log(\\"자식 렌더링 발생!\\");\\r\\n  return <button onClick={onClick}>자식 버튼</button>;\\r\\n});\\r\\n```\\r\\n\\r\\nprops가 변경되지 않는 한, 자식 컴포넌트는 리렌더링되지 않는다.\\r\\n\\r\\n하지만 전달하는 props가 함수나 객체라면 참조 변경에 주의해야 한다.\\r\\n\\r\\n#### 3. 함수 참조를 유지해야 할 때\\r\\n\\r\\n메모이제이션은 무거운 연산 외에도 **함수나 객체의 참조(reference)를 유지**하여 불필요한 리렌더링을 막을 때 유용하다.\\r\\n\\r\\n특히 React에서 자주 발생하는 문제는 **자식 컴포넌트에 콜백 함수를 넘길 때마다 참조가 변경되어 불필요하게 자식이 리렌더링되는 현상**이다.\\r\\n\\r\\n이런 경우에 **`useCallback`으로 함수의 참조를 고정**할 수 있다.\\r\\n##### 예: (AS-IS) 부모가 자식에게 함수를 전달\\r\\n```js\\r\\nfunction Parent() {\\r\\n  const [count, setCount] = useState(0);\\r\\n  const handleClick = () => setCount((prev) => prev + 1); // 매번 새로 생성됨\\r\\n  \\r\\n  return (\\r\\n    <>\\r\\n      <Child onClick={handleClick} />\\r\\n      <button onClick={() => setCount(count + 1)}>Parent Count: {count}</button>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst Child = React.memo(({ onClick }) => {\\r\\n  console.log(\\"자식 렌더링 발생!\\"); // 부모 업데이트시 자식도 렌더링 발생\\r\\n  return <button onClick={onClick}>자식 버튼</button>;\\r\\n});\\r\\n```\\r\\n\\r\\n이 경우, 부모 버튼을 누를 때마다 자식은 변경되는 내용이 없지만 함께 매번 리렌더링 된다.\\r\\n\\r\\n##### (TO-BE) 적용 예 (useCallback)\\r\\n```js\\r\\nfunction Parent() {\\r\\n  const [count, setCount] = useState(0);\\r\\n  const handleClick = useCallback(() => setCount((prev) => prev + 1), []); //참조 고정됨\\r\\n  \\r\\n  return (\\r\\n    <>\\r\\n      <Child onClick={handleClick} />\\r\\n      <button onClick={() => setCount(count + 1)}>Parent Count: {count}</button>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst Child = React.memo(({ onClick }) => {\\r\\n  console.log(\\"자식 렌더링 발생!\\"); \\r\\n  return <button onClick={onClick}>자식 버튼</button>;\\r\\n});\\r\\n```\\r\\n\\r\\n이제 자식 컴포넌트는 첫 렌더링 이후 부모 컴포넌트가 리렌더링 되어도 더 이상 리렌더링되지 않는다.\\r\\n\\r\\n####  정리\\r\\n\\r\\n##### 언제 메모이제이션을 사용할까?\\r\\n1. **무거운 연산의 반복 계산을 방지할 때 (`useMemo`)**\\r\\n    - 피보나치, 큰 배열 계산 등 비싼 작업\\r\\n2. **함수 또는 객체 참조를 유지해 불필요한 리렌더링을 방지할 때 (`useCallback`, `memo`)**\\r\\n    - 자식 컴포넌트로 콜백을 전달할 때 \\r\\n\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n#### 1. 컨텍스트(Context)\\r\\n\\r\\n처음엔 React의 Context는 컴포넌트 간에 값을 전달할 때 **props drilling (props를 여러 컴포넌트를 거쳐서 전달하는 비효율적인 상황)** 을 피하기 위해 사용된다고 막연히 생각했다. \\r\\n\\r\\n주로 **앱 전역에서 공유해야 하는 상태**(예: 언어 설정, 테마 등)를 관리할 때 적절하다.\\r\\n\\r\\n##### 예: (AS-IS) props drilling이 발생하는 상황\\r\\n\\r\\n```js\\r\\nfunction App() { \\r\\n  const [theme, setTheme] = useState(\'light\');   \\r\\n   return <Toolbar theme={theme} />; \\r\\n} \\r\\n\\r\\nfunction Toolbar({ theme }) { \\r\\n  return <Button theme={theme} />; \\r\\n} \\r\\n\\r\\nfunction Button({ theme }) {  \\r\\n  return <div>{theme} 테마 버튼</div>; \\r\\n}\\r\\n```\\r\\n\\r\\n#####  (TO-BE) context 적용 \\r\\n\\r\\n```js\\r\\nconst ThemeContext = React.createContext(\'light\');\\r\\n\\r\\nfunction App() {\\r\\n  const [theme, setTheme] = useState(\'light\');\\r\\n\\r\\n  return (\\r\\n    <ThemeContext.Provider value={theme}>\\r\\n      <Toolbar />\\r\\n    </ThemeContext.Provider>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction Toolbar() {\\r\\n  return <Button />;\\r\\n}\\r\\n\\r\\nfunction Button() {\\r\\n  const theme = useContext(ThemeContext);\\r\\n  return <div>{theme} 테마 버튼</div>;\\r\\n}\\r\\n```\\r\\n\\r\\n이렇게 하면 props를 통해 테마를 넘기지 않고도 **어떤 컴포넌트에서도 테마에 접근할 수 있다.**\\r\\n\\r\\n#### 2. 상태관리\\r\\n\\r\\n앱의 규모가 커지고, 복잡해질수록 상태의 범위가 넓어지며 상태관리의 중요성이 높아진다.\\r\\n\\r\\n상태관리가 없다면 전역 상태를 효율적으로 관리하기 어렵고 같은 상태를 여러 컴포넌트가 사용하거나 서로 멀리 떨어진 컴포넌트들이 상태를 공유하는 상황에서 관리가 어렵게 된다.\\r\\n\\r\\n이런 문제를 해결하기 위해 Redux, Zustand, Recoil 같은 상태 관리 라이브러리가 등장했다!\\r\\n\\r\\n\\r\\n#### 정리\\r\\n\\r\\n| 개념              | 용도 및 특징                              | 언제 사용하는지                               |\\r\\n| --------------- | ------------------------------------ | -------------------------------------- |\\r\\n| **Context**     | props drilling을 피하기 위한 React의 내장 기능  | 앱 전역적으로 공유할 상태 (테마, 언어 등)를 다룰 때        |\\r\\n| **상태 관리 라이브러리** | 복잡한 전역 상태를 체계적으로 관리할 수 있게 도와주는 외부 도구 | 앱의 규모가 커지고, 상태가 여러 컴포넌트에서 복잡하게 얽혀 있을 때 |\\r\\n\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\nToastProvider 를 구현할 때, useCallback과 useAutoCallback 중에 어떤걸 쓰는게 좋을까 라는 고민이 있었습니다.   \\nuseCallback만으로 충분히 최적화가 가능할것 같은데, 이때 useAutoCallback을 쓰면 좋다 라는 케이스가 어떤경우가 있을지 궁금합니다.","created_at":"2025-07-19T07:12:02Z","updated_at":"2025-07-26T05:14:31Z","closed_at":null,"merged_at":null,"merge_commit_sha":"5c666fdda1bb726df5050842d194c6bb88bac4f8","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/6/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/6/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/6/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/c8460c2f95ebebc3229afc24381f15d1c046b8a9","head":{"label":"soyalattee:main","ref":"main","sha":"c8460c2f95ebebc3229afc24381f15d1c046b8a9","user":{"login":"soyalattee","id":68572832,"node_id":"MDQ6VXNlcjY4NTcyODMy","avatar_url":"https://avatars.githubusercontent.com/u/68572832?v=4","gravatar_id":"","url":"https://api.github.com/users/soyalattee","html_url":"https://github.com/soyalattee","followers_url":"https://api.github.com/users/soyalattee/followers","following_url":"https://api.github.com/users/soyalattee/following{/other_user}","gists_url":"https://api.github.com/users/soyalattee/gists{/gist_id}","starred_url":"https://api.github.com/users/soyalattee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/soyalattee/subscriptions","organizations_url":"https://api.github.com/users/soyalattee/orgs","repos_url":"https://api.github.com/users/soyalattee/repos","events_url":"https://api.github.com/users/soyalattee/events{/privacy}","received_events_url":"https://api.github.com/users/soyalattee/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022485970,"node_id":"R_kgDOPPHl0g","name":"front_6th_chapter1-3","full_name":"soyalattee/front_6th_chapter1-3","private":false,"owner":{"login":"soyalattee","id":68572832,"node_id":"MDQ6VXNlcjY4NTcyODMy","avatar_url":"https://avatars.githubusercontent.com/u/68572832?v=4","gravatar_id":"","url":"https://api.github.com/users/soyalattee","html_url":"https://github.com/soyalattee","followers_url":"https://api.github.com/users/soyalattee/followers","following_url":"https://api.github.com/users/soyalattee/following{/other_user}","gists_url":"https://api.github.com/users/soyalattee/gists{/gist_id}","starred_url":"https://api.github.com/users/soyalattee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/soyalattee/subscriptions","organizations_url":"https://api.github.com/users/soyalattee/orgs","repos_url":"https://api.github.com/users/soyalattee/repos","events_url":"https://api.github.com/users/soyalattee/events{/privacy}","received_events_url":"https://api.github.com/users/soyalattee/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/soyalattee/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/soyalattee/front_6th_chapter1-3/deployments","created_at":"2025-07-19T07:09:03Z","updated_at":"2025-07-26T05:13:07Z","pushed_at":"2025-07-26T05:13:03Z","git_url":"git://github.com/soyalattee/front_6th_chapter1-3.git","ssh_url":"git@github.com:soyalattee/front_6th_chapter1-3.git","clone_url":"https://github.com/soyalattee/front_6th_chapter1-3.git","svn_url":"https://github.com/soyalattee/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":109,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/6"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/6"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/6"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/6/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/6/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/6/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/c8460c2f95ebebc3229afc24381f15d1c046b8a9"}},"author_association":"FIRST_TIME_CONTRIBUTOR","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/7","id":2678815463,"node_id":"PR_kwDOPMCTuc6fq3rn","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/7","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/7.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/7.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/7","number":7,"state":"open","locked":false,"title":"[2팀 이진희] Chapter 1-3. 프레임워크 없이 SPA 만들기","user":{"login":"bebusl","id":49019236,"node_id":"MDQ6VXNlcjQ5MDE5MjM2","avatar_url":"https://avatars.githubusercontent.com/u/49019236?v=4","gravatar_id":"","url":"https://api.github.com/users/bebusl","html_url":"https://github.com/bebusl","followers_url":"https://api.github.com/users/bebusl/followers","following_url":"https://api.github.com/users/bebusl/following{/other_user}","gists_url":"https://api.github.com/users/bebusl/gists{/gist_id}","starred_url":"https://api.github.com/users/bebusl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bebusl/subscriptions","organizations_url":"https://api.github.com/users/bebusl/orgs","repos_url":"https://api.github.com/users/bebusl/repos","events_url":"https://api.github.com/users/bebusl/events{/privacy}","received_events_url":"https://api.github.com/users/bebusl/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n[bebusl.github.io/front_6th_chapter1-3](https://bebusl.github.io/front_6th_chapter1-3)\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n평상시에 쓰던 훅/hoc를 일부 구현해보면서, 그 훅들의 원리에 대해 좀 더 잘 알수 있어서 좋았습니다.\\r\\nuseAutoCallback은 실제 코드에서도 요긴하게 쓰일만한 훅이어서 가져다가 써보려고 합니다.\\r\\n과제 해결 자체는 빨리 했는데 글쓰기(PR/블로그 등)를 회피해서 또 PR쓰기를 미루고 미루고 미뤄서 자괴감이 들었습니다. 남은 항해를 진행하면서 회고를 제때 남기는 버릇 + 그때그때 생각난 글감을 한 곳에 아카이브하는 습관을 만들도록 노력해야할 것 같습니다.\\r\\n\\r\\n### 학습 효과 분석 및 기술적 성장\\r\\n\\r\\n- Fiber에 대한 학습\\r\\n    - useRef 구현하다 보니, 리렌더링이 될때 컴포넌트가 재실행되면서 컴포넌트 내부의 계산들은 다 새로 될텐데, useRef는 재실행됨에도 어떻게 다시 초기화되지 않고 이전 값을 유지할까? 그러고 보니 state에 대한 것도 어딘가엔 저장할텐데 어디에 저장되는거고 어떻게 관리되는 걸까 ?궁금증이 생겼습니다.\\r\\n    - 이 궁금증을 해결하기 위해선 react 16부터 도입된 Fiber라는 아키텍처를 봐야했습니다..\\r\\n        - fiber는 type, pendingProps, memoizedProps, **memoizedState**, stateNode, …으로 구성되어 있습니다.\\r\\n        - 이 memoizedState에 연결 리스트 형식으로 useState, useReducer, useRef등의 hook 상태가 저장됩니다.\\r\\n        - 재렌더링 시에 기존 fiber가 버려지는 것이 아니라, 기존 fiber트리를 참조해서 새로운 fiber 트리 구성합니다. → **결론적으로 이전 데이터를 기반으로 새 fiber가 만들어지므로 기존의 hook의 결과물들이 기억된다고 보면 됩니다.**\\r\\n        - fiber는 우리가 2주차 과제에서 구현했던 vNode와 구조적으로 비슷하게 대응된다고 보면 됩니다.(다만 fiber는 UI구조 뿐만 아니라 렌더링 상태, 업데이트 큐, hook 상태, 우선순위 같은 추가 정보까지 담겨있는 복합 구조체라는 차이는 있음.)\\r\\n- 메모이제이션 관련된 hook/hoc에 대한 이해도 상승, 다른 커스텀 훅을 만들 때도 좀 더 정확히 이해하고 활용할 수 있을 것 같습니다.\\r\\n    - `useCallback(fn, [])`처럼 deps 없이 고정시키면 오래된 `fn`을 계속 참조해서 버그가 생길 수 있는데,\\r\\n        \\r\\n        `useRef`를 함께 쓰면 참조값은 유지하면서도 최신 함수 로직을 안전하게 반영할 수 있다는 깨달음을 얻었습니다.\\r\\n        \\r\\n        이 패턴은 특히 하위 컴포넌트에 콜백 props를 넘기거나, 외부 라이브러리 콜백 등록 시 유용할 것 같고 함수 재생성으로 인한 불필요한 렌더링 문제를 해결할 수 있어 실무에서 유용하게 사용할 것 같습니다.\\r\\n        \\r\\n- pnpm을 이용한 모노레포 슬쩍 엿보기\\r\\n    - 모노레포 구조를 슬쩍 엿본것만으로도 꽤 유익한 경험이었습니다.\\r\\n    - 단순히 이론으로 보는 것보다, 실제 구조를 훑어보는 것만으로도 더 빠른 이해가 가능했던 것 같습니다. 역시 이론 + 실습이 최고라는 걸 깨닫고 다른 공부할 때도 너무 이론에만 몰두하지 않도록 해야겠단 생각이 들었습니다.\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\nequals함수를 구현할 때 object형식인지 판별해야하는 곳이 있었는데, parameter자체는 unknown으로 정의되어 있었습니다.\\r\\n\\r\\n 이 부분을 typescript의 is 키워드를 이용해 좀 더 안전하게 타입 좁히기를 하면 좋겠다는 생각을 하였고, 아래와 같이 적용했습니다.\\r\\n\\r\\n```jsx\\r\\n// 타입가드 함수\\r\\nexport const isObject = (a: unknown): a is { [k: PropertyKey]: unknown } => {\\r\\n  return a !== null && typeof a === \\"object\\";\\r\\n};\\r\\n\\r\\n// 적용부\\r\\nconst equals = (a:unknown, b:unknown) => {\\r\\n   const isAObject = isObject(a);\\r\\n   const isBObject = isObject(b);\\r\\n\\r\\n   if (isAObject && isBObject) {\\r\\n    ... 이 안에서 a와 b는 {[k:PropertyKey]:unknown}으로 추론됨\\r\\n   }\\r\\n}\\r\\n```\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n마찬가지로 equals함수 관련된 부분이었는데요,\\r\\nshallowEquals, deepEquals 둘이 코드 베이스가 거의 똑같은데 그 부분을 따로 추출하여 쓰면 더 좋았을 것 같습니다.\\r\\n\\r\\n(memo → deepMemo같은 구조로 갈 수 있었으면 좋았을 것 같습니다)\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\nhook/hoc 구현을 하는데 흐름이 자연스럽게 짜여있어서 이해하기에 좋았던 것 같습니다. 다음 hook은 어떻게 만들면 되겠구나, 저건 어떤 개념을 활용하면 되겠구나!가 자연스럽게 떠오르게 흐름이 잘 구성된 것 같습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n1. 컴포넌트 함수를 실행한다.\\r\\n    - createElement가 호출되고 가상DOM트리에 필요한 정보를 가진 ReactElement가 만들어집니다.\\r\\n2. 가상 DOM 생성 및 비교(Render단계, Reconciliation)\\r\\n    - 가상 DOM 트리를 구성합니다.\\r\\n    - Diffing 알고리즘을 통해 어떤 부분이 바뀌었는지 확인하고 변경된 부분만 추려냅니다.\\r\\n3. 실제 돔 업데이트를 한다.(Commit 단계)\\r\\n    - 변경된 부분을 브라우저 DOM에 실제로 반영합니다.\\r\\n        - 변경된 부분 리스트(Effect list)를 순회하면서 실제 DOM 조작을 실행합니다.\\r\\n        - 이 때 어딜 바꿔야 할 지 이미 정해져있으니 효율적인 DOM 조작이 가능해집니다.\\r\\n    - useEffect나 ref 등도 이 시점에 실행이 됩니다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n다른 곳에서도 성능 최적화를 위해 사용될 수 있겠지만 실시간성이 중요한 서비스, 예를 들어 라이브 방송처럼 여러 명의 유저가 동시에 상호작용하며 UI가 빈번하게 바뀌는 환경에서는 메모이제이션이 매우 효과적으로 활용될 수 있을 것 같습니다.\\r\\n\\r\\n실시간 동영상 스트리밍과 같은 경우에 초 단위로 UI 갱신이 발생하므로 동일한 입력에 대해 중복 렌더링이나 연산을 피하는 것이 성능 유지에 중요합니다.\\r\\n\\r\\n따라서 사용자 상호작용이 잦고 렌더링이 빈번히 발생하는 실시간 서비스에서 메모이제이션을 적극 활용하면 성능을 안정적으로 유지하는 데 큰 도움이 된다고 생각합니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n컨텍스트는 상태나 데이터를 관심사에 따라 분리해서 저장해두는 공간이라고 생각합니다.(예시: 테마 정보는 `ThemeContext`에, 사용자 정보는 `UserContext)`)\\r\\n\\r\\n컨텍스트를 이용하면 전역적인 정보를 한 곳에서 제공할 수 있어서 불필요한 props drilling을 막을 수 있습니다. 만약 컨텍스트를 사용하지 않고 일일이 단계별로 데이터를 내려준다면 추적이 매우 힘들어지고 코드도 복잡해질 것입니다.\\r\\n\\r\\n상태관리는 UI에 영향을 주는 여러 사용자 상호작용이나 비동기 데이터 변화를 효과적으로 관리하는 작업이라고 생각합니다. 상태가 바뀔 때마다 UI가 원하는 대로 정확하게 반영되어야 하기 때문에 상태를 어디에, 어떻게 저장할지에 대해 정하는 것가 매우 중요하다고 생각합니다.\\r\\n\\r\\n또한 상태관리는 단순히 값을 저장하는 것뿐만 아니라, 상태 변경의 흐름을 명확하게 만들고 예측 가능하게 만드는 과정이라는 점에서 개발자의 편의를 위한 중요한 작업입니다.\\r\\n\\r\\n결국 우리가 직접 다루는 코드는 사람이 읽고 유지보수하는 것이기 때문에, 유지보수하기 쉽고 읽기 좋은 코드가 가장 중요하다는 생각입니다. 대부분의 기술이나 방법론은 바로 이 목표를 달성하기 위한 도구일 뿐이라고 느끼게 되었습니다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n### 유틸 함수 분리 기준과 테스트 가능성 사이의 균형\\r\\n\\r\\n유틸 함수를 작성할 때, 저는 150줄 미만 정도의 함수라면 굳이 세세하게 나누기보다는 기능 단위로 한 파일에 모아두는 방식을 선호하는 편입니다. 그런데 이번에 `equals` 함수를 직접 구현해보면서, 타입에 따른 분기 처리를 한 함수 안에서 모두 처리했는숩니다.\\r\\nshallowEquals나 deepEquals 파일을 보시면 어레이 타입일때, 객체일때, 원시타입잍 때의 로직 모두 그냥 shallowEquals,deepEquals 안에 작성 되어 있는데 각 타입별 로직을 분리한 다음 equals함수에서 조립하는 식으로 분리하는 편이 더 좋았을 것 같기도 합니다.\\r\\n근데 이런 조그마한 함수들이 너무 많아지면 오히려 관리가 더 힘들지 않을까하는 생각이 동시에 들기도 합니다.\\r\\n\\r\\n코치님은 이런 경우, 어디까지를 \\"분리할 만한 단위\\"로 보시는지 의견이 궁금합니다.\\r\\n\\r\\n### 명확함을 위해 긴 네이밍을 쓰는 게 좋을까요?\\r\\n\\r\\n저는 변수나 함수 이름을 지을 때, `isEnabledByUserAction`, `fetchPostsByCategoryId`처럼다소 길어지더라도  형용사나 전치사(by 등)를 붙여서 더 명확하게 표현하는 걸 선호하는 편입니다. 그런데 코드 리뷰를 하다 보면, 길다는 이유로 이름을 더 간결하게 바꾸자는 피드백을 받는 경우도 있어서 고민됩니다. 코치님은 협업 코드에서 가독성과 간결성 사이의 네이밍 밸런스를 어떻게 잡으시나요? 그리고 긴 이름이더라도 명확하면 괜찮다고 보는지, 혹은 더 좋은 네이밍 전략이 있는지 궁금합니다.","created_at":"2025-07-19T07:12:38Z","updated_at":"2025-07-24T18:07:48Z","closed_at":null,"merged_at":null,"merge_commit_sha":"d328b26e41696454396422ceafa5607bcac92d5a","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/7/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/7/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/7/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/52320e38e781a15100deeaf2d28de319dc818d09","head":{"label":"bebusl:main","ref":"main","sha":"52320e38e781a15100deeaf2d28de319dc818d09","user":{"login":"bebusl","id":49019236,"node_id":"MDQ6VXNlcjQ5MDE5MjM2","avatar_url":"https://avatars.githubusercontent.com/u/49019236?v=4","gravatar_id":"","url":"https://api.github.com/users/bebusl","html_url":"https://github.com/bebusl","followers_url":"https://api.github.com/users/bebusl/followers","following_url":"https://api.github.com/users/bebusl/following{/other_user}","gists_url":"https://api.github.com/users/bebusl/gists{/gist_id}","starred_url":"https://api.github.com/users/bebusl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bebusl/subscriptions","organizations_url":"https://api.github.com/users/bebusl/orgs","repos_url":"https://api.github.com/users/bebusl/repos","events_url":"https://api.github.com/users/bebusl/events{/privacy}","received_events_url":"https://api.github.com/users/bebusl/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022485666,"node_id":"R_kgDOPPHkog","name":"front_6th_chapter1-3","full_name":"bebusl/front_6th_chapter1-3","private":false,"owner":{"login":"bebusl","id":49019236,"node_id":"MDQ6VXNlcjQ5MDE5MjM2","avatar_url":"https://avatars.githubusercontent.com/u/49019236?v=4","gravatar_id":"","url":"https://api.github.com/users/bebusl","html_url":"https://github.com/bebusl","followers_url":"https://api.github.com/users/bebusl/followers","following_url":"https://api.github.com/users/bebusl/following{/other_user}","gists_url":"https://api.github.com/users/bebusl/gists{/gist_id}","starred_url":"https://api.github.com/users/bebusl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bebusl/subscriptions","organizations_url":"https://api.github.com/users/bebusl/orgs","repos_url":"https://api.github.com/users/bebusl/repos","events_url":"https://api.github.com/users/bebusl/events{/privacy}","received_events_url":"https://api.github.com/users/bebusl/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/bebusl/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/bebusl/front_6th_chapter1-3/deployments","created_at":"2025-07-19T07:08:19Z","updated_at":"2025-07-24T12:13:59Z","pushed_at":"2025-07-24T12:13:54Z","git_url":"git://github.com/bebusl/front_6th_chapter1-3.git","ssh_url":"git@github.com:bebusl/front_6th_chapter1-3.git","clone_url":"https://github.com/bebusl/front_6th_chapter1-3.git","svn_url":"https://github.com/bebusl/front_6th_chapter1-3","homepage":"https://bebusl.github.io/front_6th_chapter1-3","size":129,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/7"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/7"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/7"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/7/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/7/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/7/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/52320e38e781a15100deeaf2d28de319dc818d09"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/8","id":2678816551,"node_id":"PR_kwDOPMCTuc6fq38n","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/8","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/8.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/8.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/8","number":8,"state":"open","locked":false,"title":"[2팀 정민기] Chapter 1-3.  React, Beyond the Basics ","user":{"login":"jeongmingi123","id":60804074,"node_id":"MDQ6VXNlcjYwODA0MDc0","avatar_url":"https://avatars.githubusercontent.com/u/60804074?v=4","gravatar_id":"","url":"https://api.github.com/users/jeongmingi123","html_url":"https://github.com/jeongmingi123","followers_url":"https://api.github.com/users/jeongmingi123/followers","following_url":"https://api.github.com/users/jeongmingi123/following{/other_user}","gists_url":"https://api.github.com/users/jeongmingi123/gists{/gist_id}","starred_url":"https://api.github.com/users/jeongmingi123/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeongmingi123/subscriptions","organizations_url":"https://api.github.com/users/jeongmingi123/orgs","repos_url":"https://api.github.com/users/jeongmingi123/repos","events_url":"https://api.github.com/users/jeongmingi123/events{/privacy}","received_events_url":"https://api.github.com/users/jeongmingi123/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n--> https://jeongmingi123.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n--> 기본적인 hook을 구현하며, 너무 어려웠지만. 기본개념을 알수있어 너무 좋았습니다. react에서는 얕은비교를 좀 더 다르게 비교하고 있다는 것에 대해 알고 있어 좋았습니다.  \\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n--> 사실 그렇게까지 만족스러운 구현은 아니였지만, shallowEqulas에 대해 기본적으로 다시 개념을 정리하면서 짜서 기분이 좋았습니다.  그리고 그리고 함수를 분리하여 좀 더 행위를 구체적으로 알수있도록 shallowEqualsArray, shallowEqualsObject 나눈 부분에 대해 나쁘지 않았다고 생각합니다.\\r\\n\\r\\n\\r\\n```typescript\\r\\n/**\\r\\n * 두 값이 얕은 비교(===)로 동일한지 확인합니다.\\r\\n * 객체와 배열의 경우 참조가 아닌 값 자체를 비교합니다.\\r\\n */\\r\\nexport const shallowEquals = (a: unknown, b: unknown) => {\\r\\n  // 기본 동등성 체크\\r\\n  if (a === b) {\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // null 체크\\r\\n  if (a === null || b === null) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  // 객체 타입 체크\\r\\n  if (!isObject(a) || !isObject(b)) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  // 배열 비교\\r\\n  if (Array.isArray(a) && Array.isArray(b)) {\\r\\n    return shallowEqualsArray(a, b);\\r\\n  }\\r\\n\\r\\n  // 객체 비교\\r\\n  return shallowEqualsObject(a, b);\\r\\n};\\r\\n\\r\\n/**\\r\\n * 값이 객체인지 확인합니다 (null 제외)\\r\\n */\\r\\nconst isObject = (value: unknown): value is Record<string, unknown> => {\\r\\n  return typeof value === \\"object\\" && value !== null;\\r\\n};\\r\\n\\r\\n/**\\r\\n * 두 배열을 얕은 비교로 확인합니다\\r\\n */\\r\\nconst shallowEqualsArray = (a: unknown[], b: unknown[]): boolean => {\\r\\n  if (a.length !== b.length) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  for (let i = 0; i < a.length; i++) {\\r\\n    if (a[i] !== b[i]) {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n};\\r\\n\\r\\n/**\\r\\n * 두 객체를 얕은 비교로 확인합니다\\r\\n */\\r\\nconst shallowEqualsObject = (a: Record<string, unknown>, b: Record<string, unknown>): boolean => {\\r\\n  const keysA = Object.keys(a);\\r\\n  const keysB = Object.keys(b);\\r\\n\\r\\n  if (keysA.length !== keysB.length) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  for (const key of keysA) {\\r\\n    if (!(key in b)) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    if (a[key] !== b[key]) {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n};\\r\\n\\r\\n```\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n--> useRouter를 구현하는 과정중에, 희원님이 따로 코드리뷰를 해주셨는데 코드의 중복 제거를 발견하였고, 가독성을 좀 더 향상 했다고 생각합니다. getRouterState라는 새로운 헬퍼 함수가 도입시켜 기능적인 변화는 없지만, 전반적인 가독성을 조금 더 높였고, 유지보수성을 조금 더 높였다고 생각합니다.\\r\\n\\r\\n(이전)\\r\\n```typescript\\r\\nexport const useRouter = <T extends RouterInstance<AnyFunction>, S>(\\r\\n  router: T,\\r\\n  selector = defaultSelector<RouterState, S>,\\r\\n) => {\\r\\n  // useShallowSelector를 사용하여 선택된 상태의 얕은 비교를 수행\\r\\n  const shallowSelector = useShallowSelector(selector);\\r\\n\\r\\n  return useSyncExternalStore(\\r\\n    router.subscribe,\\r\\n    () => {\\r\\n      const state = {\\r\\n        route: router.route,\\r\\n        params: router.params,\\r\\n        query: router.query,\\r\\n        target: router.target,\\r\\n      };\\r\\n      return shallowSelector(state);\\r\\n    },\\r\\n    () => {\\r\\n      const state = {\\r\\n        route: router.route,\\r\\n        params: router.params,\\r\\n        query: router.query,\\r\\n        target: router.target,\\r\\n      };\\r\\n      return shallowSelector(state);\\r\\n    },\\r\\n  );\\r\\n};\\r\\n```\\r\\n\\r\\n(이후)\\r\\n```typescript\\r\\nconst defaultSelector = <S = RouterState>(state: RouterState): S => state as unknown as S;\\r\\n\\r\\nfunction getRouterState(router: RouterInstance<AnyFunction>): RouterState {\\r\\n  return {\\r\\n    route: router.route,\\r\\n    params: router.params,\\r\\n    query: router.query,\\r\\n    target: router.target,\\r\\n  };\\r\\n}\\r\\n\\r\\n/**\\r\\n * useRouter 훅: RouterInstance의 상태를 구독하고 selector로 필요한 값만 반환함\\r\\n * @param router RouterInstance 객체\\r\\n * @param selector 상태 선택 함수 (기본값: 전체 상태 반환)\\r\\n */\\r\\nexport const useRouter = <T extends RouterInstance<AnyFunction>, S = RouterState>(\\r\\n  router: T,\\r\\n  selector: (state: RouterState) => S = defaultSelector,\\r\\n) => {\\r\\n  const shallowSelector = useShallowSelector(selector);\\r\\n\\r\\n  return useSyncExternalStore(\\r\\n    router.subscribe,\\r\\n    () => shallowSelector(getRouterState(router)),\\r\\n    () => shallowSelector(getRouterState(router)),\\r\\n  );\\r\\n};\\r\\n\\r\\n```\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n--> 아무래도 react에서 얕은비교, 깊은비교 대해 자세하게 좀더 이해할수 있어서 좋았습니다. 이전에는 useCallback, useMemo, memo와 같은 메모이제이션을 개념도 모르고 사용하여, 왜 적용이 안되는지 헷갈렸습니다. 그러나 어느정도 개념이 잡히니 어느정도 실무에 적용도 가능할 거같고, 다른 프로젝트에도 사용을 할 수 있을거같아 이번에 많은 도움이 되었다고 생각합니다.\\r\\n참고 링크 : https://github.com/jeongmingi123/front_6th_chapter1-3/issues/5\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n--> 아무래도 React hook의 기본을 구현해보며 기본기를 다질 수 있었고, 더나아가 상태관리까지 직접 만들어봐서 좀 더 심층적으로 이해한거같아 좋았습니다. \\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n--> \\r\\n\\r\\n🎨 1단계: 그림을 그릴 준비 (렌더 단계)\\r\\n화가가 붓을 들고 물감을 고르는 것처럼, React는 \\"자, 이제 화면을 바꿀 시간입니다!\\" 하면 렌더링을 시작함. \\r\\n첫번째 단계인 트리거는 \\"어? 뭔가 바뀌었네요?\\" 내부 상태 변경 (state 변경): useState를 이용해 값을 바꾸시거나, 클래스 컴포넌트에서 setState를 호출하시면, React는 \\"알겠습니다, 이 컴포넌트는 새롭게 보여줄 것이 생겼네요!\\" 하고 알아차림. 부모로부터의 새로운 정보 (props 변경): 우리 컴포넌트의 부모 컴포넌트가 다시 렌더링되면서, 저에게 새로운 props를 전달해 주는 경우도 마찬가지임 마치 부모님이 새로운 옷을 사주시면 자식이 새 옷을 입고 나타나는 것과 같음.\\r\\n\\r\\n두번째 단계인 새로운 그림을 스케치하는 작업을 말함. 컴포넌트 호출: React는 변화가 필요하다고 판단한 컴포넌트부터 시작하여, 그 아래에 있는 자식 컴포넌트들을 하나하나 실행함. 마치 가족 구성원들을 한 명씩 불러내는 것과 같음.\\r\\n\\r\\n이 후 설계도 만들기를 하는데, 각 컴포넌트는 화면에 어떻게 보일지에 대한 \'청사진\' 같은 JSX를 반환함. 이 JSX는 React 엘리먼트라는  자바스크립트 객체로 변환함. 이 엘리먼트들이 모여서 하나의 큰 \'그림 스케치북\' 같은 가상 돔(Virtual DOM)을 만듬. 이것은 아직 브라우저 화면에 보이는 실제 그림이 아니고, 컴퓨터 메모리 속에만 있음.\\r\\n\\r\\n이제 세번째 단계에서는 외부에 영향을 주는 행동(사이드 이펙트)을 하시면 안 됨. 왜냐하면 React는 이 스케치를 필요에 따라 몇 번이고 다시 그릴 수도 있고, 중간에 멈췄다가 다시 시작할 수도 있기 때문. 따라서 이 단계는 오직 UI를 어떻게 그릴지에 대한 정보만 생성하는 순수한 작업만 해야함. \\r\\n\\r\\n🖼️ 2단계: 실제 그림을 완성하는 시간 (커밋 단계)\\r\\n스케치가 다 끝났으면, 이제 진짜 캔버스에 그림을 옮겨 그릴 시간. \\r\\n첫번째 단계는 \\"어디가 달라졌지?\\" 틀린 그림 찾기를 함. 새 스케치 vs. 옛 스케치 비교 (재조정): React는 방금 만든 \'새로운 그림 스케치(새 가상 돔)\'를 가져와서, 이전에 그렸던 \'옛날 그림 스케치(이전 가상 돔)\'와 꼼꼼하게 비교함.  \\"요 부분만 고치자!\\" (Diffing 알고리즘): 이 비교 과정에서 Diffing 알고리즘이라는 매우 똑똑한 방법을 사용하여, 딱 어떤 부분만 바뀌었는지, 즉 최소한의 차이점을 찾아냄. 전체를 다 다시 그리는 것은 매우 힘든 일이기에, 바뀐 부분만 효율적으로 찾아내는 것입니다.\\r\\n\\r\\n두번째 단계는 캔버스에 실제로 옮겨 그리는 단계 딱 바뀐 부분만 쓱싹하고 업데이트를 함. Diffing 알고리즘이 찾아낸 최소한의 변경 사항만 가지고, 드디어 브라우저의 실제 화면, 즉 DOM(Document Object Model)에 그림을 그려 넣음. 이 실제 DOM을 건드리는 작업은 컴퓨터 자원을 많이 소모하기 때문에, React는 최대한 효율적으로 딱 필요한 만큼만 건드리려고 노력합니다.\\r\\n\\r\\n마지막으로 그림 완성이 되는 단계 (사이드 이펙트 발생): 그림이 완전히 그려지고 화면에 나타나면, 이제야 안전하게 외부와 소통하는 작업들 (예: 서버에 데이터 요청해서 가져오기, 화면에 뭔가 애니메이션을 할 수 있음) 이 시점이 바로 사이드 이펙트를 실행하는 적절한 위치임. \\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n--> 이번 멘토링에서 준일 멘토님께서 useCallback, useMemo을 어떻게 적절히 사용하는 것이 좋은가에 대한 답변을 받았다. 이전부터 어떨 때 사용해야할까에 대한 고민이 있었고, 인강에서는 너무 많이 사용하면 오히려 안좋다라는 의견을 받았는데 왜 사용을 많이 하면 안좋을까에 대한 궁금한 부분이 있었다. 이번 멘토링을 통해 답변을 받을 수 있어 어느정도 해결이 되었다.\\r\\n준일님이 공유해주신 URL : https://attardi.org/why-we-memo-all-the-things/ \\r\\n멘토링 노트 참고 URL : https://www.notion.so/3-2-2372dc3ef51480f19e4cd1ed271cdf04?source=copy_link\\r\\n\\r\\n해결방안\\r\\n1. 문제가 있을 때 혹은 문제를 해결해야 한다고 인지했을 때에만 메모이제이션을 적용하기\\r\\n2. 아니면 처음부터 다 적용하기\\r\\n\\r\\n2번의 무조건 메모이제이션 전략은 과연 괜찮을까에 대한 고민이 있었다. 개발 과정에서 메모이제이션(Memoization)을 적용할지 말지를 고민하는 것 자체가 때로는 더 큰 비용과 병목 현상을 초래한다. 적절한 순간에 메모이제이션을 해야지라고 판단하고 적용 포인트를 찾는 데 드는 시간과 인지적 부하가, 실제로 얻게 될 성능 이득보다 커질 수 있다는 의미가 됨. 내나름의 결론은 그냥 다 적용하자라고 생각이든다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n--> \\r\\n모든 상태를 컨텍스트에 넣으면 안될거같다. 특히 자주 업데이트되는 상태를 컨텍스트에 넣으면 불필요한 전역 리렌더링으로 인해 성능 문제가 발생할 수 있어 필요한 부분에만 적절히 사용하는 것이 중요하다 생각한다. 또한 규모에 따라 적절한 상태관리 도구를 사용하는 것이 중요하다고 생각한다. \\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n--> ToastProvider 구현중 질문드립니다.\\r\\n\\r\\n```typescript\\r\\nexport const ToastProvider = memo(({ children }: PropsWithChildren) => {\\r\\n  const [state, dispatch] = useReducer(toastReducer, initialState);\\r\\n  const { show, hide } = createActions(dispatch);\\r\\n  const visible = state.message !== \\"\\";\\r\\n\\r\\n  // debounce 함수를 useRef로 안정화\\r\\n  const hideAfterRef = useRef<ReturnType<typeof debounce> | null>(null);\\r\\n\\r\\n  if (!hideAfterRef.current) {\\r\\n    hideAfterRef.current = debounce(hide, DEFAULT_DELAY);\\r\\n  }\\r\\n\\r\\n  // show와 hide 함수를 useCallback으로 안정화\\r\\n  const stableShow = useCallback(show, []);\\r\\n  const stableHide = useCallback(hide, []);\\r\\n\\r\\n  const showWithHide = useCallback<ShowToast>(\\r\\n    (...args) => {\\r\\n      stableShow(...args);\\r\\n      hideAfterRef.current?.();\\r\\n    },\\r\\n    [stableShow],\\r\\n  );\\r\\n\\r\\n  // 액션 Context value - 안정화된 함수들만 포함\\r\\n  const actionValue = useMemo(\\r\\n    () => ({\\r\\n      show: showWithHide,\\r\\n      hide: stableHide,\\r\\n    }),\\r\\n    [showWithHide, stableHide],\\r\\n  );\\r\\n\\r\\n  // 상태 Context value - 상태만 포함\\r\\n  const stateValue = useMemo(\\r\\n    () => ({\\r\\n      message: state.message,\\r\\n      type: state.type,\\r\\n    }),\\r\\n    [state.message, state.type],\\r\\n  );\\r\\n\\r\\n  return (\\r\\n    <ToastActionContext.Provider value={actionValue}>\\r\\n      <ToastStateContext.Provider value={stateValue}>\\r\\n        {children}\\r\\n        {visible && createPortal(<Toast />, document.body)}\\r\\n      </ToastStateContext.Provider>\\r\\n    </ToastActionContext.Provider>\\r\\n  );\\r\\n});\\r\\n\\r\\n```\\r\\n\\r\\n위의 코드중 이 부분에 대한 질문이 있습니다. 저는 useCallback을 사용하였는데요. 다른분들은 useAutoCallback을 사용하신분들이 몇분 있으시더라구요. showWithHide는 stableShow만 의존성으로 갖고 있고,  stableShow는 useCallback(show, [])로, 사실상 불변.\\r\\nhideAfterRef는 ref이므로, ref 객체 자체는 변하지 않아보입니다. 즉, 현재의 의존성 배열([stableShow])은 사실상 빈 배열과 동일한 효과를 내는거같아보입니다. 현재처럼 의존성이 명확하고, 특별히 바뀔 일이 없는 경우에 useAutoCallback을 쓰는게 오히려 더 좋은 판단이였을까요?\\r\\n아님 더 좋은 방안이 있었을까요..?\\r\\n\\r\\n```typescript\\r\\n  const showWithHide = useCallback<ShowToast>(\\r\\n    (...args) => {\\r\\n      stableShow(...args);\\r\\n      hideAfterRef.current?.();\\r\\n    },\\r\\n    [stableShow],\\r\\n  );\\r\\n```\\r\\n","created_at":"2025-07-19T07:13:43Z","updated_at":"2025-07-25T08:54:07Z","closed_at":null,"merged_at":null,"merge_commit_sha":"f93c6c69eac432ed0847535a07aad15c35183c0d","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/8/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/8/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/8/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/c96a89b889df53524532d131cea22850ef0ee2fc","head":{"label":"jeongmingi123:main","ref":"main","sha":"c96a89b889df53524532d131cea22850ef0ee2fc","user":{"login":"jeongmingi123","id":60804074,"node_id":"MDQ6VXNlcjYwODA0MDc0","avatar_url":"https://avatars.githubusercontent.com/u/60804074?v=4","gravatar_id":"","url":"https://api.github.com/users/jeongmingi123","html_url":"https://github.com/jeongmingi123","followers_url":"https://api.github.com/users/jeongmingi123/followers","following_url":"https://api.github.com/users/jeongmingi123/following{/other_user}","gists_url":"https://api.github.com/users/jeongmingi123/gists{/gist_id}","starred_url":"https://api.github.com/users/jeongmingi123/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeongmingi123/subscriptions","organizations_url":"https://api.github.com/users/jeongmingi123/orgs","repos_url":"https://api.github.com/users/jeongmingi123/repos","events_url":"https://api.github.com/users/jeongmingi123/events{/privacy}","received_events_url":"https://api.github.com/users/jeongmingi123/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022485719,"node_id":"R_kgDOPPHk1w","name":"front_6th_chapter1-3","full_name":"jeongmingi123/front_6th_chapter1-3","private":false,"owner":{"login":"jeongmingi123","id":60804074,"node_id":"MDQ6VXNlcjYwODA0MDc0","avatar_url":"https://avatars.githubusercontent.com/u/60804074?v=4","gravatar_id":"","url":"https://api.github.com/users/jeongmingi123","html_url":"https://github.com/jeongmingi123","followers_url":"https://api.github.com/users/jeongmingi123/followers","following_url":"https://api.github.com/users/jeongmingi123/following{/other_user}","gists_url":"https://api.github.com/users/jeongmingi123/gists{/gist_id}","starred_url":"https://api.github.com/users/jeongmingi123/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeongmingi123/subscriptions","organizations_url":"https://api.github.com/users/jeongmingi123/orgs","repos_url":"https://api.github.com/users/jeongmingi123/repos","events_url":"https://api.github.com/users/jeongmingi123/events{/privacy}","received_events_url":"https://api.github.com/users/jeongmingi123/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/jeongmingi123/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/jeongmingi123/front_6th_chapter1-3/deployments","created_at":"2025-07-19T07:08:26Z","updated_at":"2025-07-24T12:51:59Z","pushed_at":"2025-07-24T12:51:55Z","git_url":"git://github.com/jeongmingi123/front_6th_chapter1-3.git","ssh_url":"git@github.com:jeongmingi123/front_6th_chapter1-3.git","clone_url":"https://github.com/jeongmingi123/front_6th_chapter1-3.git","svn_url":"https://github.com/jeongmingi123/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":296,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":7,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":7,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/8"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/8"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/8"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/8/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/8/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/8/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/c96a89b889df53524532d131cea22850ef0ee2fc"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/9","id":2678827598,"node_id":"PR_kwDOPMCTuc6fq6pO","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/9","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/9.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/9.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/9","number":9,"state":"open","locked":false,"title":"[2팀 정도은] Chapter 1-3. 프레임워크 없이 SPA 만들기","user":{"login":"nemobim","id":112849712,"node_id":"U_kgDOBrnzMA","avatar_url":"https://avatars.githubusercontent.com/u/112849712?v=4","gravatar_id":"","url":"https://api.github.com/users/nemobim","html_url":"https://github.com/nemobim","followers_url":"https://api.github.com/users/nemobim/followers","following_url":"https://api.github.com/users/nemobim/following{/other_user}","gists_url":"https://api.github.com/users/nemobim/gists{/gist_id}","starred_url":"https://api.github.com/users/nemobim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nemobim/subscriptions","organizations_url":"https://api.github.com/users/nemobim/orgs","repos_url":"https://api.github.com/users/nemobim/repos","events_url":"https://api.github.com/users/nemobim/events{/privacy}","received_events_url":"https://api.github.com/users/nemobim/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://nemobim.github.io/front_6th_chapter1-3/\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n이번 과제를 통해 useRef부터 useCallback까지 다양한 리액트 훅의 동작 방식을 직접 체감할 수 있었습니다. 특히 평소 막연하게 사용하던 useMemo, useCallback, Context가 어떤 조건에서 리렌더링을 유발하는지 테스트하고 개선해보며 더 쉽게 이해할 수 있었습니다. ToastContext 리팩토링 과정에서는 단순히 Context로 감싸는 것만으로는 충분하지 않다는 점도 알게 되었습니다.(하위 컴포넌트들도 context 상태에 따라 렌더링 된다는 사실을 이제야 알았습니다...) 상태를 공유할때 어떻게 구조화하고 관리할지 고민해본 경험은 실무에서도 적용할 수 있을거같아요 ㅎㅎ\\r\\n\\r\\nuseSyncExternalStore를 활용한 커스텀 훅 구현은 이번이 처음이었는데 React가 요구하는 snapshot과 subscribe 방식의 개념을 실제로 적용해보며 어느정도 눈에 익혀진거 같습니다!\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n다음에 다시 코드를 보게 될 때 흐름을 쉽게 이해할 수 있도록 주석을 꼼꼼하게 달았습니다.\\r\\n팀 내부에서도 코드 리뷰를 진행했는데 전반적으로 비슷한 방식으로 구현한 것 같습니다.\\r\\ndeepEquals.ts 쪽 코드만 서로 다른 방식으로 작성된 거 같아 이 부분을 가져왔습니다.\\r\\n```ts\\r\\nexport const deepEquals = (a: unknown, b: unknown): boolean => {\\r\\n  if (a === b) return true;\\r\\n\\r\\n  // null 처리\\r\\n  if (a == null || b == null) return false;\\r\\n\\r\\n  // 타입 다르면 다름\\r\\n  if (typeof a !== typeof b) return false;\\r\\n\\r\\n  // 배열\\r\\n  if (Array.isArray(a) && Array.isArray(b)) {\\r\\n    // 길이 다르면 다름\\r\\n    if (a.length !== b.length) return false;\\r\\n    // 각 요소 비교\\r\\n    return a.every((item, index) => deepEquals(item, b[index]));\\r\\n  }\\r\\n\\r\\n  // 객체\\r\\n  if (typeof a === \\"object\\" && typeof b === \\"object\\") {\\r\\n    const aKeys = Object.keys(a);\\r\\n    const bKeys = Object.keys(b);\\r\\n\\r\\n    // 키 개수 다르면 다름\\r\\n    if (aKeys.length !== bKeys.length) return false;\\r\\n\\r\\n    // 각 키의 값 비교\\r\\n    return aKeys.every(\\r\\n      (key) => Object.hasOwn(b, key) && deepEquals(a[key as keyof typeof a], b[key as keyof typeof b]),\\r\\n    );\\r\\n  }\\r\\n\\r\\n  // 나머지는 === 로 비교\\r\\n  return false;\\r\\n};\\r\\n\\r\\n\\r\\n```\\r\\n가능한 한 빠르게 비교할 수 있는 조건부터 확인해서 조기에 리턴하고\\r\\n여러 케이스를 처리할 수 있도록 신경 써서 작성했습니다.\\r\\n\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n- deepEquals.ts 에서 일단 테스트 코드를 통과하는 케이스를 작성하였는데, AI를 통해 검증해보니 특수 객체 타입들(Date, RegExp, Map, Set 등)과 NaN을 제대로 처리하지 못하고 있다고 하더라구요.. 이런 부분들에 대해서 좀 더 다양한 케이스 처리가 필요할거같습니다.\\r\\n```ts\\r\\n//JavaScript 버전: 다양한 객체 타입(Date, RegExp, Map, Set 등)까지 지원\\r\\nconst deepEquals = (a, b) => {\\r\\n\\t//...기존과 동일\\r\\n\\r\\n  // Date 객체 비교: getTime 값이 같아야 동일\\r\\n  if (a instanceof Date && b instanceof Date) {\\r\\n    return a.getTime() === b.getTime();\\r\\n  }\\r\\n\\r\\n  // RegExp 객체 비교: source(패턴)과 flags가 동일해야 함\\r\\n  if (a instanceof RegExp && b instanceof RegExp) {\\r\\n    return a.source === b.source && a.flags === b.flags;\\r\\n  }\\r\\n\\r\\n  // Map 객체 비교\\r\\n  if (a instanceof Map && b instanceof Map) {\\r\\n    if (a.size !== b.size) return false; // 크기 다르면 false\\r\\n    for (let [key, value] of a) {\\r\\n      if (!b.has(key) || !deepEquals(value, b.get(key))) return false; // 키가 없거나 값이 다르면 false\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // Set 객체 비교: 값만 비교 (순서 무관)\\r\\n  if (a instanceof Set && b instanceof Set) {\\r\\n    if (a.size !== b.size) return false;\\r\\n    for (let value of a) {\\r\\n      if (!b.has(value)) return false; // b에 없는 값이 있으면 false\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // 기본값 false\\r\\n  return false;\\r\\n};\\r\\n```\\r\\n\\r\\n- 아래 코드에 대한 리뷰로 `setState로 함수들어올 때를 대비해주는 코드가 추가되어도 좋을 것 같아요!` 라는 피드백을 받아서 그 부분도 추후에 개선해보려고 합니다..\\r\\n\\r\\n```ts\\r\\n/**얕은 비교를 통해 상태 변경을 감지하는 훅\\r\\n * useState와 동일하나 상태 변경 시 얕은 비교를 통해 변경 여부를 확인하고, 변경된 경우에만 상태를 업데이트\\r\\n * (useState는 모든 상태 변경을 감지하고 업데이트)\\r\\n */\\r\\nexport const useShallowState = <T>(initialValue: T) => {\\r\\n  // useState를 사용하여 상태를 관리하고, shallowEquals를 사용하여 상태 변경을 감지하는 훅을 구현합니다.\\r\\n\\r\\n  // 초기값 설정\\r\\n  const [shallowState, setShallowState] = useState<T>(initialValue);\\r\\n\\r\\n  const stableSetState = useCallback((nextValue: T) => {\\r\\n    if (shallowEquals(shallowState, nextValue)) return; // 변경 안 됨\\r\\n    setShallowState(nextValue); // 변경됨\\r\\n  }, []);\\r\\n\\r\\n  return [shallowState, stableSetState];\\r\\n};\\r\\n\\r\\n```\\r\\n```ts\\r\\n// 지금은 이런 사용법이 동작하지 않음\\r\\nsetShallowState(prev => ({ ...prev, count: prev.count + 1 }));\\r\\n```\\r\\n함수면 실행, 아니면 그대로 사용\\r\\n\\r\\n```ts\\r\\n setShallowState(prevState => {\\r\\n    // 1. 함수인지 확인하고 값 해결\\r\\n    const resolvedValue = typeof nextValue === \'function\' \\r\\n      ? (nextValue as (prev: T) => T)(prevState)  // 함수면 실행\\r\\n      : nextValue;                                // 값이면 그대로\\r\\n\\r\\n    // 2. 얕은 비교로 같은지 확인  \\r\\n    if (shallowEquals(prevState, resolvedValue)) {\\r\\n      return prevState;  // 같으면 이전 상태 반환 → 리렌더링 X\\r\\n    }\\r\\n    \\r\\n    // 3. 다르면 새 값 반환 → 리렌더링 O\\r\\n    return resolvedValue;\\r\\n  });\\r\\n```\\r\\n### 학습 효과 분석\\r\\n\\r\\n#### useRef 뜯어보기\\r\\n`useState`는 내부적으로 초기값만 한 번 호출되고, 이후에는 저장된 상태를 계속 유지한다.\\r\\n- **리렌더링 후에도 ref 객체는 유지** ->  ref.current 값은 바뀌지만 setState로 갱신하지 않기 때문에 리렌더링은 일어나지 않음!\\r\\n```tsx\\r\\nexport function useRef<T>(initialValue: T): { current: T } {\\r\\n  // useState를 이용해서 만들어보세요.\\r\\n  const [ref] = useState<{ current: T }>(() => ({ current: initialValue }));\\r\\n  return ref;\\r\\n}\\r\\n```\\r\\n- **useState의 초기값을 함수로 전달하면 최초 1회만 실행**된다.\\r\\n```tsx\\r\\nfunction InitCounter() {\\r\\n  const [count] = useState(() => {\\r\\n    console.log(\\"🧪 초기값 함수 실행됨\\");\\r\\n    return 0;\\r\\n  });\\r\\n\\r\\n  return <div>{count}</div>;\\r\\n}\\r\\n//리렌더링해도 다시 호출되지 않음\\r\\n```\\r\\n**- lazy initializer?**\\r\\n> **지연 초기화(Lazy Initialization)**는 값이나 객체를 실제로 필요한 시점에 생성하는 프로그래밍 패턴입니다. 미리 계산하거나 생성하지 않고 처음 사용될 때까지 기다린다.  “값이 실제로 필요할 때까지 계산을 미루는 전략”\\r\\n\\r\\n#### useMemo\\r\\n**`deps`가 변경되지 않으면 factory()를 재실행하지 않음**\\r\\n\\r\\n```ts\\r\\nuseMemo(factory, deps, equals) //함수, 의존성배열, 비교함수\\r\\n```\\r\\n- 변경 기준: 이전 deps와 새로운 deps를 equals 함수로 비교 (shallowEquals 사용)\\r\\n- 이후 재호출: deps가 같으면 cached value 반환, 다르면 factory 재실행\\r\\n\\r\\n#### useCallback\\r\\nfn이라는 콜백을 **의존성 deps가 바뀔 때만 새로 반환**한다.\\r\\n> useCallback(fn, deps)는 사실상 `useMemo(() => fn, deps)`와 같음\\r\\n\\r\\n```ts\\r\\nconst memoizedCallback = useCallback(() => doSomething(a, b), [a, b]);\\r\\n```\\r\\n\\r\\n#### useSyncExternalStore\\r\\n`외부 저장소(스토어)의 변화를 감지`해서 컴포넌트를 리렌더링시킴\\r\\n예시를 통해 살펴보면 더 이해하기 수월하다\\r\\n```ts\\r\\n  const set = (value: T) => {\\r\\n    try {\\r\\n      data = value;\\r\\n      storage.setItem(key, JSON.stringify(data));\\r\\n      notify();\\r\\n    } catch (error) {\\r\\n      console.error(`Error setting storage item for key \\"${key}\\":`, error);\\r\\n    }\\r\\n  };\\r\\n\\r\\n//React 컴포넌트는 상태(state)나 props가 바뀌어야만 리렌더링된다.\\r\\n//우리가 만든 set은 단순히 값만 변경한다. \\r\\n```\\r\\n```ts\\r\\ndata = value; // 내부 변수만 바꾸고\\r\\nstorage.setItem(key, JSON.stringify(data)); // localStorage에만 저장하고\\r\\nnotify(); // \\"값이 바뀌었어!\\" 라고는 말하지만...\\r\\n```\\r\\nReact는 이 storage 내부 값이 바뀐 걸 알 수가 없다!\\r\\n> 그래서 useSyncExternalStore를 사용한다.\\r\\n\\r\\n`useSyncExternalStore(subscribe, get)`\\r\\n\\r\\n- `subscribe`: 값이 변경되었을 때 React에게 알려줄 함수\\r\\n- `get`: 현재 값을 가져오는 함수\\r\\n\\r\\n이 두 개를 등록해두면 React가 알아서 \\"오! 구독 중인 값이 바뀌었네? 이 컴포넌트 다시 그려야겠다!\\" 하고 리렌더링~\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n과제의 방향성이 명확해서 좋았습니다. 단순히 \\"동작만 하는\\" 코드가 아니라 성능 최적화까지 고려해야 했기 때문에 React의 렌더링 흐름에 대해 실제로 고민해볼 수 있는 계기가 됐습니다!\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n리액트는 상태나 props가 변경되면 해당 컴포넌트를 다시 렌더링합니다. 이때 실제 DOM을 직접 변경하는 것이 아니라 먼저 **Virtual DOM(VDOM)**이라는 가상의 트리를 만들고 이전 VDOM과 비교하여 변경된 부분만 실제 DOM에 반영합니다. 이 과정을 **Reconciliation(조정)**이라고 하며, 이를 통해 DOM 조작을 최소화하고 성능을 높입니다.\\r\\n```\\r\\n리액트는 상태나 props 변경 → \\r\\nVirtual DOM 생성 → \\r\\n이전과 비교(Reconciliation) → \\r\\n실제 DOM 업데이트 순서로 렌더링합니다.\\r\\n```\\r\\n\\r\\n컴포넌트는 상태 변경 시마다 함수 전체가 다시 실행되지만 리액트는 이전 렌더링과의 차이를 비교해 효율적으로 실제 DOM을 갱신합니다. 하지만 컴포넌트 함수가 실행되면 내부에 있는 함수, 객체, 배열 등이 모두 새로 생성되기 때문에 불필요한 렌더링이 발생할 수 있습니다.\\r\\n\\r\\n이를 방지하기 위해 사용하는 것이 메모이제이션 Hook들입니다:\\r\\n\\r\\n- useMemo: 연산된 값을 캐싱합니다 (예: const memoized = useMemo(() => 계산(), [deps]))\\r\\n- useCallback: 함수 레퍼런스를 유지합니다 (예: const cb = useCallback(() => fn(), [deps]))\\r\\n- React.memo: props가 바뀌지 않았다면 컴포넌트 리렌더링을 막습니다\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n사실 저는 실무에서 메모이제이션을 자주 사용하지는 않습니다...그렇게 무거운 연산이 필요한 경우도 거의 없었고, 지금까지는 리액트가 알아서 잘 처리해줘서 별다른 문제 없이 사용해왔습니다. 메모이제이션을 사용했던 경우을 뽑아보면 자주 열리는 모달이나 바뀌지 않는 참조값을 넘겨야 하는 상황, useEffect 안에서 사용하는 함수에 useCallback을 써야 할 때 정도였던 것 같습니다.\\r\\n\\r\\n개인적으로는 리액트 같은 도구를 쓰는 이유가 개발 편의성에 있다고 생각해서 뭔가 문제가 생기기 전까지는 리액트에게 최적화 기능을 전담하고 기능구현 하는 방식을 선택했던거 같습니다..ㅎㅎ 지금도 사실 어떤 상황에서 메모이제이션을 적용해야 하는지 판단하는 게 쉽지는 않네요. 나중에 병목이 생기면 하나하나 뜯어보면서 깨닳아보겠습니다. \\r\\n\\r\\n그리고 메모이제이션이 최적화를 위한 도구이긴 하지만 멘토링 시간에 말씀해주신 것처럼 “어떤 상황에서 써야 할까?” 를 판단하는 그 자체도 비용이라고 생각합니다. 그래서 프로젝트 초기에 기준을 어느 정도 정해두는 게 좋겠다는 생각도 들었습니다. `이 상황에서는 메모이제이션을 쓰자!`  또 메모이제이션은 단순히 값을 저장하는 기능이 아니라 렌더링 흐름을 제어할 수 있는 도구이기도 하니까  언제 써야 좋은지에 대한 감각을 계속 길러 놓으면 예측 가능한 컴포넌트를 만들기 수월하겠다고 느꼈습니다.\\r\\n\\r\\n**Q. 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?**\\r\\n메모이제이션을 사용하지 않고도 해결하기 위해서는 연산 자체를 가볍게 만들거나 렌더링 구조를 조정해서(상태관리 방식 개선, 컴포넌트 분리) 등으로 최적화 \\r\\n\\r\\n**Q. 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?**\\r\\n→ 장점: 렌더링 최적화, 불필요한 연산 방지, 성능 개선\\r\\n→ 단점: 코드 복잡도 증가, 메모리 사용 증가, 과도한 적용 시 오히려 성능에 악영향\\r\\n\\r\\n> “지금이 메모이제이션을 적용할 적절한 시점인가?”를 판단하는 것 자체가 오히려 더 큰 비용이 될 수 있다.개발 중에 이런 판단이 병목이 되기도 한다. 차라리 처음부터 전반적으로 메모이제이션을 적용해두면 약간의 성능 손실은 있을 수 있지만, 의사결정이 빨라지고 전반적인 개발 생산성은 높아진다.\\r\\n— 준일 코치님의 멘토링\\r\\n\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n리액트는 단방향 데이터 흐름을 기반으로 하기 때문에 일반적으로 상위 컴포넌트에서 하위 컴포넌트로만 데이터를 전달할 수 있습니다. 상태관리 도구나 컨텍스트(Context)를 사용하면 이런 제한을 넘어서 구조적으로 직접 연결되지 않은 컴포넌트 간에도 데이터를 쉽게 전달할 수 있습니다.\\r\\n\\r\\n예를 들어 다크모드(야간모드)처럼 앱 전체에서 공통적으로 사용하는 설정값은 여러 컴포넌트에서 동시에 접근해야 하기 때문에, 전역 상태관리나 컨텍스트를 사용하는 것이 효과적입니다. 이런 방식은 확실히 편리하지만 상태를 공유하는 컴포넌트가 많아질수록 변경 시 리렌더링 범위도 넓어지므로 성능을 고려하고 설계해야합니다. \\r\\n\\r\\n개인적으로는 컨텍스트와 상태관리를 다음처럼 구분해서 사용합니다.\\r\\n- 컨텍스트는 해당 페이지 또는 UI 범위 내에서만 사용하는 간단한 값을 공유할 때 사용합니다. (예: 테마, 언어 설정, 모달 상태 등)\\r\\n```tsx\\r\\n// 테마, 사용자 정보 등 변경 빈도가 낮은 데이터\\r\\nconst ThemeContext = createContext();\\r\\nconst UserContext = createContext();\\r\\n\\r\\n// 특정 페이지 범위의 상태\\r\\nfunction ProductPage() {\\r\\n  const [filters, setFilters] = useState({});\\r\\n  \\r\\n  return (\\r\\n    <FilterContext.Provider value={{filters, setFilters}}>\\r\\n      <ProductList />\\r\\n      <FilterSidebar />\\r\\n    </FilterContext.Provider>\\r\\n  );\\r\\n}\\r\\n```\\r\\n- 상태관리 라이브러리는 구조적으로 직접 연결되지 않은 컴포넌트들 간에 데이터를 전달해야 하거나 앱 전역에서 일관된 상태가 필요한 경우에만 사용합니다.\\r\\n```tsx\\r\\n// 장바구니, 알림, 복잡한 폼 상태 등\\r\\nconst useCartStore = create((set) => ({\\r\\n  items: [],\\r\\n  addItem: (item) => set((state) => ({\\r\\n    items: [...state.items, item]\\r\\n  })),\\r\\n  removeItem: (id) => set((state) => ({\\r\\n    items: state.items.filter(item => item.id !== id)\\r\\n  }))\\r\\n}));\\r\\n```\\r\\n\\r\\n사실 상태관리로 처리하면 데이터를 주고받기는 편하지만 프로젝트가 커질수록 상태 흐름을 파악하거나 유지보수하기 어려워진다고 생각되어 저는 최대한 전역 상태관리를 지양하는 편입니다. `전역 상태는 최소화하고 구조 개선을 통해 해결할 수 있는 방향으로 가자. 상태는 컴포넌트 설계 단계에서부터 적절하게 나누어 관리하자` 는 생각을 가지고 개발을 하고 있습니다. 초기에 많이 고려하고 만드는 편인거 같습니다.(이것도 비용같기도,,!)\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n### ToastProvider에서 useMemo vs useCallback 선택 기준\\r\\n각 훅을 선택할 때 어떤 기준으로 판단해야 할지 조언받고 싶습니다.\\r\\n아래는 제가 작성한 코드와 그에 대한 제 생각입니다. 이 흐름이 맞는지 검토 받고싶습니다.\\r\\nuseMeMo는 값을, useCallback은 함수를 메모이제이션 한다고 이해했습니다.\\r\\n\\r\\n#### 1. createActions\\r\\n```tsx\\r\\nconst { show, hide } = useMemo(() => createActions(dispatch), [dispatch]);\\r\\n```\\r\\n함수가 담긴 객체를 반환하므로 결국 객체(값)를 메모이제이션 하니 useMemo 사용\\r\\n\\r\\n#### 2. hideAfter\\r\\n```tsx\\r\\nconst hideAfter = useMemo(() => debounce(hide, DEFAULT_DELAY), [hide]);\\r\\n```\\r\\ndebonce는 함수를 반환한다고 생각해서 useAutoCallback을 사용했었습니다. 실제로 useAutoCallback을 사용했을 때 E2E 테스트가 통과되어 커밋했지만 이후 불안정하게 실패했고 useMemo로 바꾸자 안정적으로 통과했습니다...(의문) 여기서 헷갈리는 점은 \\"함수도 결국 값\\"이니까 useMemo로 보는 걸까요..? 이런건 어떤식으로 판단하는게 좋을까요.\\r\\n\\r\\n\\r\\n#### 3. value \\r\\n```tsx\\r\\nconst stateValue = useMemo(() => ({ message: state.message, type: state.type }), [state.message, state.type]);\\r\\nconst actionValue = useMemo(() => ({ show: showWithHide, hide }), [showWithHide, hide]);\\r\\n\\r\\n```\\r\\n이 두 경우는 명확하게 객체 메모이제이션이라고 생각해서 useMemo를 사용했습니다.\\r\\n\\r\\n#### 4. showWithHide\\r\\n```tsx\\r\\nconst showWithHide: ShowToast = useAutoCallback((...args) => {\\r\\n  show(...args);\\r\\n  hideAfter();\\r\\n});\\r\\n```\\r\\n이부분도 useCallback을 사용해도 통과되긴 하던데 더 좋은 useAutoCallback이 있으니 해당 훅을 썼다는걸로 이해하면 될까요? \\"무조건 useAutoCallback이 더 낫다\\"고 볼 수 있는 건지 아니면 상황에 따라 구분해서 써야 하는 건지 궁금합니다!\\r\\n\\r\\n### 타입 오류 처리에 대한 고민\\r\\n실무에서 재사용 가능한 코드를 작성하다 보면 타입이 과도하게 복잡해지거나 정확한 타입 정의가 어려운 상황이 발생합니다. 타입 지정하느라 비용이 오래 들어가는거 같아 기능구현에 집중하자고 판단될때는 as, unknown, eslint-disable 등을 사용해 임시로 해결하곤 하는데 이게 옳은 방법인지 모르겠습니다.\\r\\n\\r\\n이번 과제에서도 직접 만든 useCallback 훅에서 아래와 같이 타입 경고가 발생해 lint 규칙을 꺼버렸습니다: `react-hooks/exhaustive-deps 추가`\\r\\n\\r\\n```tsx\\r\\n/* eslint-disable @typescript-eslint/no-unsafe-function-type,react-hooks/exhaustive-deps */\\r\\nimport type { DependencyList } from \\"react\\";\\r\\nimport { useMemo } from \\"./useMemo\\";\\r\\n\\r\\nexport function useCallback<T extends Function>(factory: T, _deps: DependencyList) {\\r\\n  // 직접 작성한 useMemo를 통해서 만들어보세요.\\r\\n  return useMemo(() => factory, _deps);\\r\\n}\\r\\n\\r\\n```\\r\\n이런 우회가 정당한 예외처리라고 판단되는 기준이 있는지 궁금합니다.\\r\\n- 타입 안정성 vs 개발 생산성 중 어느 것을 우선해야 하는지\\r\\n- 팀에서 타입 우회를 허용할 명확한 기준이 있으신지\\r\\n\\r\\n\\r\\n\\r\\n","created_at":"2025-07-19T07:20:40Z","updated_at":"2025-07-26T05:05:04Z","closed_at":null,"merged_at":null,"merge_commit_sha":"c3e437f3ececa73007e874a6c83d72f8c3e6468b","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/9/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/9/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/9/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/2dd0cabee2ca6b73a11cd0a74df5ebc9e7e34654","head":{"label":"nemobim:main","ref":"main","sha":"2dd0cabee2ca6b73a11cd0a74df5ebc9e7e34654","user":{"login":"nemobim","id":112849712,"node_id":"U_kgDOBrnzMA","avatar_url":"https://avatars.githubusercontent.com/u/112849712?v=4","gravatar_id":"","url":"https://api.github.com/users/nemobim","html_url":"https://github.com/nemobim","followers_url":"https://api.github.com/users/nemobim/followers","following_url":"https://api.github.com/users/nemobim/following{/other_user}","gists_url":"https://api.github.com/users/nemobim/gists{/gist_id}","starred_url":"https://api.github.com/users/nemobim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nemobim/subscriptions","organizations_url":"https://api.github.com/users/nemobim/orgs","repos_url":"https://api.github.com/users/nemobim/repos","events_url":"https://api.github.com/users/nemobim/events{/privacy}","received_events_url":"https://api.github.com/users/nemobim/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022488756,"node_id":"R_kgDOPPHwtA","name":"front_6th_chapter1-3","full_name":"nemobim/front_6th_chapter1-3","private":false,"owner":{"login":"nemobim","id":112849712,"node_id":"U_kgDOBrnzMA","avatar_url":"https://avatars.githubusercontent.com/u/112849712?v=4","gravatar_id":"","url":"https://api.github.com/users/nemobim","html_url":"https://github.com/nemobim","followers_url":"https://api.github.com/users/nemobim/followers","following_url":"https://api.github.com/users/nemobim/following{/other_user}","gists_url":"https://api.github.com/users/nemobim/gists{/gist_id}","starred_url":"https://api.github.com/users/nemobim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nemobim/subscriptions","organizations_url":"https://api.github.com/users/nemobim/orgs","repos_url":"https://api.github.com/users/nemobim/repos","events_url":"https://api.github.com/users/nemobim/events{/privacy}","received_events_url":"https://api.github.com/users/nemobim/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/nemobim/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/nemobim/front_6th_chapter1-3/deployments","created_at":"2025-07-19T07:16:58Z","updated_at":"2025-07-23T18:19:26Z","pushed_at":"2025-07-24T12:19:51Z","git_url":"git://github.com/nemobim/front_6th_chapter1-3.git","ssh_url":"git@github.com:nemobim/front_6th_chapter1-3.git","clone_url":"https://github.com/nemobim/front_6th_chapter1-3.git","svn_url":"https://github.com/nemobim/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":296,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/9"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/9"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/9"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/9/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/9/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/9/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/2dd0cabee2ca6b73a11cd0a74df5ebc9e7e34654"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/10","id":2678828194,"node_id":"PR_kwDOPMCTuc6fq6yi","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/10","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/10.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/10.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/10","number":10,"state":"open","locked":false,"title":"[2팀 유윤우] Chapter 1-3. 프레임워크 없이 SPA 만들기","user":{"login":"yunwoo-yu","id":100748721,"node_id":"U_kgDOBgFNsQ","avatar_url":"https://avatars.githubusercontent.com/u/100748721?v=4","gravatar_id":"","url":"https://api.github.com/users/yunwoo-yu","html_url":"https://github.com/yunwoo-yu","followers_url":"https://api.github.com/users/yunwoo-yu/followers","following_url":"https://api.github.com/users/yunwoo-yu/following{/other_user}","gists_url":"https://api.github.com/users/yunwoo-yu/gists{/gist_id}","starred_url":"https://api.github.com/users/yunwoo-yu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yunwoo-yu/subscriptions","organizations_url":"https://api.github.com/users/yunwoo-yu/orgs","repos_url":"https://api.github.com/users/yunwoo-yu/repos","events_url":"https://api.github.com/users/yunwoo-yu/events{/privacy}","received_events_url":"https://api.github.com/users/yunwoo-yu/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://hanghae-plus.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n과제를 진행하며 기존에 알고있던 지식도 한번 더 다지고 새로 알게 된 메서드와 해당 훅을 제공하는 라이브러리에서는 어떻게, 왜 이렇게 구현했는지 한번 비교해보고 학습했습니다. 과제테스트를 통과한 후 다른 분들에게 도움을 드렸던 문제들을 정리해봤습니다. 예전에 눈으로만 보며 넘어가서 어렴풋이만 알고있던 지식들을 기록해보며 머릿속에 넣어보려 노력했습니다!\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<details>\\r\\n<summary>자바스크립트의 원시&참조 타입</summary>\\r\\n\\r\\n<br />\\r\\nJavaScript의 원시타입과 참조타입을 다룹니다. 타입을 정확히 이해하면 변수 할당, 함수 파라미터 전달, 상태 관리에서 예상치 못한 버그를 방지할 수 있습니다. 특히 React나 상태 관리 라이브러리를 사용할 때 얕은 비교 동작을 이해하는 데 핵심적인 지식이 됩니다.\\r\\n\\r\\n### 원시타입\\r\\n\\r\\n원시타입은 JavaScript에서 값 자체가 변수에 직접 저장되는 가장 기본적인 데이터 타입입니다. 객체나 배열과 달리 메모리 주소가 아닌 실제 값이 저장되어, 변수 간 할당 시 값이 복사됩니다.\\r\\n\\r\\n**7가지 원시타입**\\r\\n\\r\\nJavaScript는 다음 7가지 원시타입을 제공합니다:\\r\\n\\r\\n- number: 정수와 실수 (42, 3.14, Infinity)\\r\\n- string: 문자열 (\\"hello\\", \'world\', `template`)\\r\\n- boolean: 논리값 (true, false)\\r\\n- null: 의도적인 빈 값\\r\\n- undefined: 값이 할당되지 않은 상태\\r\\n\\r\\n**특수 원시타입**\\r\\n\\r\\n- symbol: 유일한 식별자 생성 (ES6+)\\r\\n- bigint: 큰 정수 처리 (ES2020+)\\r\\n\\r\\n### Symbol 타입 이해하기\\r\\n\\r\\nSymbol은 **변경 불가능(immutable)하고 유일함을 보장**하는 원시타입입니다. 주로 객체 프로퍼티의 충돌 없는 키를 만들 때 사용합니다.\\r\\n\\r\\n```js\\r\\nconst user = {};\\r\\nconst id1 = Symbol(\'id\'); // 인자의 문자열은 단지 description의 역할밖에 하지 않는다.\\r\\nconst id2 = Symbol(\'id\');\\r\\n\\r\\nuser[id1] = \'user1\';\\r\\nuser[id2] = \'user2\';\\r\\n\\r\\nconsole.log(user[id1]); // \'user1\'\\r\\nconsole.log(user[id2]); // \'user2\'\\r\\nconsole.log(id1 === id2); // false (같은 설명이어도 다른 값)\\r\\n```\\r\\n- 같은 문자열로 생성해도 항상 다른 값\\r\\n- 열거되지 않는다.\\r\\n- 문자열 인자는 디버깅 용도일 뿐, 값에 영향이 없다.\\r\\n\\r\\nSymbol 함수의 정적 프로퍼티 중 **Well-Known Symbol**이라 불리는 특별한 심볼들이 있습니다. 이 Well-Known Symbol은 자바스크립트 엔진에 상수로 존재해 이 값을 참조해 일정한 처리를 진행합니다.\\r\\n\\r\\n일정한 처리라 함은 어떠한 객체가 Symbol.iterator를 프로퍼티 key로 하는 메소드를 가지고 있다면 자바스크립트 엔진은 이 객체가 **이터레이션 프로토콜**을 따른다고 생각하고 이터레이터하게 동작하게 합니다.\\r\\n\\r\\n저희가 사용하는 빌트인 객체 Array, String 등 순회 가능한 객체는 모두 내부에 Symbol.iterator를 가지고 있기에 이터레이션 프로토콜을 따라 반복문, 스프레드 연산자의 사용이 가능합니다.\\r\\n\\r\\n```js\\r\\n// Symbol.iterator를 키로 사용한 메소드\\r\\nconst iterableObj = {\\r\\n  data: [1, 2, 3],\\r\\n  [Symbol.iterator]() {\\r\\n    let index = 0;\\r\\n    const data = this.data;\\r\\n    return {\\r\\n      next() { // 일반 함수 사용\\r\\n        if (index < data.length) {\\r\\n          return { value: data[index++], done: false };\\r\\n        }\\r\\n        return { done: true };\\r\\n      }\\r\\n    };\\r\\n  }\\r\\n};\\r\\n\\r\\nfor (const value of iterableObj) {\\r\\n  console.log(value); // 1, 2, 3\\r\\n}\\r\\n```\\r\\n\\r\\n<img width=\\"600\\" height=\\"514\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/68cab67b-c169-4649-81d1-65bd3f310786\\" />\\r\\n\\r\\n### bigint\\r\\n\\r\\nbigint는 **임의의 정밀도로 정수를 나타낼 수 있는** 원시 타입입니다. Number 타입의 안전한 정수 범위(2^53 - 1)를 넘어서는 큰 정수를 다룰 때 사용됩니다.\\r\\n\\r\\n```js\\r\\n// Number의 한계\\r\\nconsole.log(Number.MAX_SAFE_INTEGER); // 9007199254740991\\r\\nconsole.log(Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2); // true (정밀도 손실)\\r\\n\\r\\n// BigInt 사용\\r\\nconst bigNum1 = BigInt(Number.MAX_SAFE_INTEGER) + 1n;\\r\\nconst bigNum2 = BigInt(Number.MAX_SAFE_INTEGER) + 2n;\\r\\n\\r\\nconsole.log(bigNum1 === bigNum2); // false (정확한 계산)\\r\\nconsole.log(typeof bigNum1); // \\"bigint\\"\\r\\n```\\r\\n\\r\\n### 원시타입과 참조타입의 차이\\r\\n\\r\\n참조 타입은 위에서 설명한 타입 외에 모든 객체, 배열 등이 참조 타입으로 분류됩니다. JavaScript의 데이터 타입을 이해하려면 원시타입과 참조타입의 근본적인 차이를 알아야 합니다. 이 차이는 변수 할당, 함수 인자 전달, 비교 연산에서 완전히 다른 동작을 보입니다.\\r\\n\\r\\n**값 저장 방식의 차이**\\r\\n\\r\\n원시타입: 변수에 실제 값이 직접 저장됩니다.\\r\\n\\r\\n```js\\r\\nlet a = 10;\\r\\nlet b = a;    // 값 10이 복사되어 저장\\r\\na = 20;       // a만 변경됨\\r\\nconsole.log(a); // 20\\r\\nconsole.log(b); // 10 (영향받지 않음)\\r\\n```\\r\\n\\r\\n참조타입: 변수에 **메모리 주소(참조)**가 저장됩니다.\\r\\n\\r\\n```js\\r\\nlet obj1 = { value: 10 };\\r\\nlet obj2 = obj1;  // 메모리 주소가 복사되어 같은 객체를 참조\\r\\nobj1.value = 20;  // 같은 객체를 수정\\r\\nconsole.log(obj1.value); // 20\\r\\nconsole.log(obj2.value); // 20 (같은 객체이므로 함께 변경)\\r\\n```\\r\\n\\r\\n**비교 연산의 차이**\\r\\n\\r\\n원시타입: 값 자체를 비교합니다.\\r\\n\\r\\n```js\\r\\nlet a = 5;\\r\\nlet b = 5;\\r\\nconsole.log(a === b); // true (같은 값)\\r\\n\\r\\nlet str1 = \\"hello\\";\\r\\nlet str2 = \\"hello\\";\\r\\nconsole.log(str1 === str2); // true (같은 값)\\r\\n```\\r\\n\\r\\n참조타입: 메모리 주소를 비교합니다.\\r\\n\\r\\n```js\\r\\nlet obj1 = { value: 5 };\\r\\nlet obj2 = { value: 5 };\\r\\nconsole.log(obj1 === obj2); // false (다른 메모리 주소)\\r\\n\\r\\nlet obj3 = obj1;\\r\\nconsole.log(obj1 === obj3); // true (같은 메모리 주소)\\r\\n```\\r\\n\\r\\n**함수 인자 전달의 차이**\\r\\n\\r\\n원시타입: Call by Value (값에 의한 전달)\\r\\n\\r\\n```js\\r\\nfunction changeValue(x) {\\r\\n  x = 100;  // 복사된 값만 변경\\r\\n}\\r\\n\\r\\nlet num = 50;\\r\\nchangeValue(num);\\r\\nconsole.log(num); // 50 (원본 변수는 변경되지 않음)\\r\\n```\\r\\n\\r\\n참조타입: Call by Reference (참조에 의한 전달)\\r\\n\\r\\n```js\\r\\nfunction changeObject(obj) {\\r\\n  obj.value = 100;  // 같은 객체를 수정\\r\\n}\\r\\n\\r\\nlet myObj = { value: 50 };\\r\\nchangeObject(myObj);\\r\\nconsole.log(myObj.value); // 100 (원본 객체가 변경됨)\\r\\n```\\r\\n\\r\\n💡 이러한 차이점은 React 사용 시 알아야 하는 불변성 개념과 직결됩니다. 특히 참조타입을 다룰 때 의도치 않게 원본 객체나 배열을 변경하여 예상과 다른 동작을 일으킬 수 있으므로, 두 타입의 차이점을 명확히 이해하고 코드를 작성하는 것이 중요합니다.\\r\\n\\r\\n</details>\\r\\n\\r\\n<details>\\r\\n<summary>얕은 비교, 깊은 비교</summary>\\r\\n\\r\\n### 자바스크립트에서의 비교\\r\\n\\r\\n자바스크립트에서 값을 비교하는 연산자는 두 가지입니다.\\r\\n\\r\\n- 동등연산자(==): 값만 비교하고 타입은 무시합니다.\\r\\n- 일치연산자(===): 값과 타입을 모두 비교합니다.\\r\\n\\r\\n대부분의 경우 일치연산자로 충분하지만, 다음과 같은 특수한 경우에는 예상과 다른 결과가 나올 수 있습니다.\\r\\n\\r\\n```js\\r\\n// 일치 연산자의 경우\\r\\nNaN === NaN  // false\\r\\n+0 === -0    // true\\r\\n```\\r\\n\\r\\n정확한 비교가 필요하다면 Object.is() 메서드를 사용 해야합니다.\\r\\n\\r\\n```js\\r\\nObject.is(NaN, NaN)  // true\\r\\nObject.is(+0, -0)    // false\\r\\n```\\r\\n\\r\\nObject.is()는 일치연산자와 거의 동일하지만, NaN과 ±0을 올바르게 구분합니다.\\r\\n\\r\\n### 얕은 비교 (shallowEqual)\\r\\n\\r\\n**얕은 비교(Shallow Comparison)** 는 다음과 같이 동작한다고 알려져 있습니다.\\r\\n> 원시 타입: 값 자체를 비교\\r\\n> 참조 타입: 참조(메모리 주소)만 비교\\r\\n\\r\\n하지만 React와 Zustand에서의 얕은 비교는 다르게 동작합니다.\\r\\n\\r\\nZustand의 얕은 비교 코드:\\r\\n\\r\\n```ts\\r\\n// src/react/shallow.ts\\r\\nexport function shallow<T>(valueA: T, valueB: T): boolean {\\r\\n\\r\\n  if (Object.is(valueA, valueB)) { // 값을 비교\\r\\n    return true\\r\\n  }\\r\\n  if (\\r\\n    typeof valueA !== \'object\' ||\\r\\n    valueA === null ||\\r\\n    typeof valueB !== \'object\' ||\\r\\n    valueB === null // null 체크 및 타입 검사\\r\\n  ) {\\r\\n    return false\\r\\n  }\\r\\n  if (Object.getPrototypeOf(valueA) !== Object.getPrototypeOf(valueB)) { // prototype을 검사 Array.prototype, Object.prototype ....etc\\r\\n    return false\\r\\n  }\\r\\n  if (isIterable(valueA) && isIterable(valueB)) { // isIterable은 해당 value에 Symbol.iterator 가 존재하는지 확인한다.\\r\\n    if (hasIterableEntries(valueA) && hasIterableEntries(valueB)) { // hasIterableEntries은 entries 메서드가 존재하는지 확인한다. Map, Set의 경우\\r\\n      return compareEntries(valueA, valueB) // 이미 entries 메서드가 존재하면 실행\\r\\n    }\\r\\n    return compareIterables(valueA, valueB) // entries가 존재하지 않으면 실행\\r\\n  }\\r\\n  // assume plain objects 일반 객체 처리\\r\\n  return compareEntries(\\r\\n    { entries: () => Object.entries(valueA) },\\r\\n    { entries: () => Object.entries(valueB) },\\r\\n  )\\r\\n}\\r\\n```\\r\\n \\r\\nZustand의 얕은 비교는 객체와 배열의 최상위 레벨 값까지 비교합니다. compareEntries와 compareIterables 함수가 객체를 순회하며 값을 비교합니다.\\r\\n\\r\\n```ts\\r\\n// src/react/shallow.ts\\r\\nconst compareEntries = (\\r\\n  valueA: { entries(): Iterable<[unknown, unknown]> },\\r\\n  valueB: { entries(): Iterable<[unknown, unknown]> },\\r\\n) => {\\r\\n  const mapA = valueA instanceof Map ? valueA : new Map(valueA.entries())\\r\\n  const mapB = valueB instanceof Map ? valueB : new Map(valueB.entries())\\r\\n  if (mapA.size !== mapB.size) {\\r\\n    return false\\r\\n  }\\r\\n  for (const [key, value] of mapA) {\\r\\n    if (!Object.is(value, mapB.get(key))) {\\r\\n      return false\\r\\n    }\\r\\n  }\\r\\n  return true\\r\\n}\\r\\n\\r\\nconst compareIterables = (\\r\\n  valueA: Iterable<unknown>,\\r\\n  valueB: Iterable<unknown>,\\r\\n) => {\\r\\n  const iteratorA = valueA[Symbol.iterator]()\\r\\n  const iteratorB = valueB[Symbol.iterator]()\\r\\n  let nextA = iteratorA.next()\\r\\n  let nextB = iteratorB.next()\\r\\n  while (!nextA.done && !nextB.done) {\\r\\n    if (!Object.is(nextA.value, nextB.value)) {\\r\\n      return false\\r\\n    }\\r\\n    nextA = iteratorA.next()\\r\\n    nextB = iteratorB.next()\\r\\n  }\\r\\n  return !!nextA.done && !!nextB.done\\r\\n}\\r\\n```\\r\\n\\r\\ncompareEntries 함수는 어댑터 패턴을 통해 Map, Set, 일반객체를 순회하며 값을 비교합니다. compareIterables 함수는 entries 메서드가 없는 Array, String 등의 데이터를 순회하며 비교합니다.\\r\\n\\r\\nReact의 shallowEqual도 유사한 방식으로 동작합니다:\\r\\n\\r\\n```js\\r\\n// react/packages/shared/shallowEqual.js\\r\\n\\r\\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\\r\\n  if (is(objA, objB)) { // is 함수는 단지 Object.is() 함수를 분리해놓은 함수입니다.\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  if (\\r\\n    typeof objA !== \'object\' ||\\r\\n    objA === null ||\\r\\n    typeof objB !== \'object\' ||\\r\\n    objB === null\\r\\n  ) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  const keysA = Object.keys(objA);\\r\\n  const keysB = Object.keys(objB);\\r\\n\\r\\n  if (keysA.length !== keysB.length) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  // Test for A\'s keys different from B.\\r\\n  for (let i = 0; i < keysA.length; i++) {\\r\\n    const currentKey = keysA[i];\\r\\n    if (\\r\\n      !hasOwnProperty.call(objB, currentKey) ||\\r\\n      // $FlowFixMe[incompatible-use] lost refinement of `objB`\\r\\n      !is(objA[currentKey], objB[currentKey])\\r\\n    ) {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n}\\r\\n```\\r\\n\\r\\n실제로 얕은 비교 코드를 구현할 때는 일반적으로 알려진 얕은 비교(메모리 주소만 참조)와 달리, 객체의 최상위 레벨 속성까지 비교하는 방식을 사용해야 합니다.\\r\\n\\r\\n### 깊은 비교\\r\\n\\r\\n깊은 비교는 객체나 배열의 중첩된 모든 속성을 재귀적으로 비교하는 방식입니다. React나 Zustand 같은 라이브러리에서는 성능상의 이유로 일반적으로 사용하지 않으며, 객체 크기에 따라 비용이 기하급수적으로 증가합니다.\\r\\n\\r\\n```ts\\r\\nexport const deepEquals = (a: unknown, b: unknown) => {\\r\\n  // 1. 값이 같으면 바로 true 반환 참조 타입의 경우 주소 비교\\r\\n  if (Object.is(a, b)) {\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // 2. 원시 값 처리\\r\\n  if (typeof a !== \\"object\\" || typeof b !== \\"object\\" || a === null || b === null) {\\r\\n    return Object.is(a, b);\\r\\n  }\\r\\n\\r\\n  // 3. 배열 깊은비교 재귀\\r\\n  if (Array.isArray(a) && Array.isArray(b)) {\\r\\n    if (a.length !== b.length) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < a.length; i++) {\\r\\n      if (!deepEquals(a[i], b[i])) return false;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // 4. 객체 깊은비교 재귀\\r\\n  const keysA = Object.keys(a);\\r\\n  const keysB = Object.keys(b);\\r\\n\\r\\n  if (keysA.length !== keysB.length) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  for (const key of keysA) {\\r\\n    if (!deepEquals(a[key as keyof typeof a], b[key as keyof typeof b])) return false;\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n};\\r\\n```\\r\\n\\r\\n얕은 비교와 달리 배열이나 객체의 중첩된 구조를 만날 때마다 즉시 재귀 호출을 통해 더 깊은 레벨(DFS)로 들어가 끝까지 파고들어 비교를 완료합니다.\\r\\n\\r\\n**JSON.stringify() 방식**\\r\\n\\r\\n간혹 JSON.stringify()를 통한 비교를 사용하는 경우가 있지만, 여러 문제점이 존재합니다:\\r\\n\\r\\n1. 속성 순서 의존성\\r\\n```js\\r\\nconst obj1 = { a: 1, b: 2 };\\r\\nconst obj2 = { b: 2, a: 1 };\\r\\n\\r\\nJSON.stringify(obj1); // \'{\\"a\\":1,\\"b\\":2}\'\\r\\nJSON.stringify(obj2); // \'{\\"b\\":2,\\"a\\":1}\'\\r\\n\\r\\n// 같은 내용이지만 false!\\r\\ndeepEqualsJSON(obj1, obj2); // false\\r\\n```\\r\\n\\r\\n2. 성능 문제\\r\\n```js\\r\\nconst largeObj = { /* 매우 큰 객체 */ };\\r\\n\\r\\n// JSON.stringify는 전체 객체를 문자열로 변환\\r\\n// 메모리 사용량이 2배가 됨 (원본 + 문자열)\\r\\n// 불필요한 문자열 생성 비용 및 문자열 비교의 비용은 작지 않다.\\r\\n```\\r\\n\\r\\n이외에도 NaN, Infinity 같은 특수 값 처리 불가, 데이터 손실 가능성, 함수나 undefined 값 무시 같은 문제가 있습니다. 다음과 같은 제한적인 상황에서는 고려해볼 수 있습니다:\\r\\n\\r\\n```js\\r\\n// 1. 간단한 plain object만 비교\\r\\nconst config1 = { timeout: 5000, retries: 3 };\\r\\nconst config2 = { timeout: 5000, retries: 3 };\\r\\n\\r\\n// 2. 속성 순서가 보장되는 경우 (같은 소스에서 생성)\\r\\nconst response1 = JSON.parse(apiResponse);\\r\\nconst response2 = JSON.parse(apiResponse);\\r\\n\\r\\n// 3. 프로토타이핑이나 간단한 테스트\\r\\n```\\r\\n\\r\\n### React에서의 실용적 활용\\r\\n\\r\\nReact와 연계해서 사용하기에는 memo의 두 번째 인자에 직접 비교 함수를 제공하는 방식이 더 적합합니다:\\r\\n\\r\\n```js\\r\\nconst MemoizedComponent = memo(SomeComponent, arePropsEqual);\\r\\n// arePropsEqual은 콜백 함수로 prevProps와 currentProps를 받습니다\\r\\n```\\r\\n\\r\\n**추가 팁**\\r\\n\\r\\n💡 React의 불변성을 지키기 위해 깊은 복사가 필요하다면 [lodash-es](https://github.com/lodash/lodash)의 cloneDeep 함수를 이용하면 간편하게 깊은 복사를 통해 새로운 객체를 얻을 수 있습니다.\\r\\n\\r\\n</details>\\r\\n\\r\\n<details>\\r\\n<summary>트러블슈팅 지원 사례</summary>\\r\\n\\r\\n### Q1. useRef에 왜 함수를 넣어줘야 하나요?\\r\\n\\r\\n이 useRef 구현에서 useState에 함수를 전달하는 이유는 **불필요한 객체 생성을 방지**하기 위해서입니다.\\r\\n\\r\\n```jsx\\r\\nconst [ref] = useState({ current: initialValue }); // 매번 새 객체 생성\\r\\n```\\r\\n\\r\\n위처럼 작성하면 컴포넌트가 리렌더링될 때마다 { current: initialValue } 객체가 새로 생성됩니다. useState는 초기값을 한 번만 사용하지만, 객체 생성 자체는 매번 발생합니다.\\r\\n\\r\\n이를 해결하는 방법이 지연 초기화(lazy initialization)입니다.\\r\\n```jsx\\r\\nconst [ref] = useState(() => ({ current: initialValue })); // 최초 한 번만 실행\\r\\n```\\r\\n함수를 전달하면 useState가 최초 렌더링 시에만 함수를 실행하여 객체를 생성합니다. 이후 리렌더링에서는 함수가 실행되지 않아 불필요한 객체 생성을 방지합니다.\\r\\n\\r\\nReact의 실제 구현에서 이를 확인할 수 있습니다:\\r\\n\\r\\n```jsx\\r\\n// react/packages/react-reconciler/src/ReactFiberHooks.js\\r\\n\\r\\n// 최초 렌더링 시 실행\\r\\nfunction mountStateImpl<S>(initialState: (() => S) | S): Hook {\\r\\n  const hook = mountWorkInProgressHook();\\r\\n  \\r\\n  if (typeof initialState === \'function\') {\\r\\n    const initialStateInitializer = initialState;\\r\\n    initialState = initialStateInitializer(); // 함수 실행\\r\\n  }\\r\\n  // ... 생략\\r\\n}\\r\\n\\r\\n// 업데이트 시 실행\\r\\nfunction updateReducerImpl<S, A>(\\r\\n  hook: Hook,\\r\\n  current: Hook,\\r\\n  reducer: (S, A) => S,\\r\\n): [S, Dispatch<A>] {\\r\\n  const queue = hook.queue;\\r\\n  // 초기값 재실행 없이 큐에서 상태 처리\\r\\n  queue.lastRenderedReducer = reducer;\\r\\n}\\r\\n\\r\\n// mountWorkInProgressHook, updateWorkInProgressHook부터 살펴봐야 하지만 너무 길어져 넘기겠습니다.😅\\r\\n```\\r\\n\\r\\n- 마운트 시: mountStateImpl에서 typeof initialState === \'function\' 검사 후 함수 실행\\r\\n- 업데이트 시: updateReducerImpl에서 배치 업데이트를 위해 fiber의 큐에 변경사항만 저장, 초기값 함수는 재실행하지 않음\\r\\n\\r\\n이는 React에서 인라인 스타일을 권장하지 않는 이유와 동일합니다. 렌더링 과정에서 객체 리터럴은 항상 새로운 참조를 생성하기 때문입니다.\\r\\n이번과제 ToastContext 구축 시 value 부분에도 적용되는 개념입니다.👀\\r\\n\\r\\n참고문서\\r\\n- [React Github Code](https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberHooks.js#L1891-L1917)\\r\\n\\r\\n### Q2. useMemo에 return에 왜 에러가 뜨는지 모르겠어요\\r\\n\\r\\n문제 코드\\r\\n```tsx\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n  const valueRef = useRef<T | undefined>(undefined);\\r\\n  const depsRef = useRef<DependencyList>([]);\\r\\n\\r\\n  if (!_equals(depsRef.current, _deps)) {\\r\\n    valueRef.current = factory();\\r\\n    depsRef.current = _deps;\\r\\n  }\\r\\n\\r\\n  return valueRef.current; // error : \'T | undefined\' 형식은 \'T\' 형식에 할당할 수 없습니다.\\r\\n```\\r\\n\\r\\nTypeScript 에러입니다. useMemo 훅의 반환 타입은 T로 정의했지만, valueRef.current는 undefined일 가능성이 있어 타입 불일치가 발생합니다.\\r\\n\\r\\n해결 방법: 초기 상태 처리 추가\\r\\n```tsx\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n  const valueRef = useRef<T | undefined>(undefined);\\r\\n  const depsRef = useRef<DependencyList>([]);\\r\\n\\r\\n // 초기 렌더링이거나 의존성이 변경된 경우\\r\\n  if (valueRef.current === undefined || !_equals(depsRef.current, _deps)) {\\r\\n    valueRef.current = factory();\\r\\n    depsRef.current = _deps;\\r\\n  }\\r\\n\\r\\n  return valueRef.current; // 이제 T 타입으로 추론됨\\r\\n```\\r\\n\\r\\nvalueRef.current === undefined 조건을 추가하여 초기 렌더링 시 undefined 상태를 처리합니다. 이제 반환 시점에는 항상 T 타입이 보장됩니다.\\r\\n\\r\\n</details>\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n이번 과제를 통해 일반적인 얕은 비교와 React의 얕은 비교 방식이 다르다는 점을 파악했습니다. \\r\\n기초적인 타입별 특징과 메모리 할당 방식을 다시 학습했고, 참조 타입 사용 시 React의 불변성 원칙을 지키는 방법을 정리했습니다.\\r\\n\\r\\nZustand와 React의 얕은 비교 구현 코드를 분석한 결과, Zustand는 Symbol.iterator 활용, Map과 Set 객체 처리, Object.is 메서드 사용 등 더 정교한 비교 로직을 구현하고 있음을 확인했습니다.\\r\\n\\r\\n과제를 빠르게 진행하여 다른분들의 문제를 파악해보며 설명하는 과정에서 왜? 를 납득시키기 위한 좀 더 논리적인 원리를 파고드는 경험도 했습니다.\\r\\n\\r\\n현재 과제는 Preact의 방식과 유사한 패턴이지만 좀 더 대규모 환경인 React의 코드를 헤집어보며 hook 실행 시점과 지연초기화가 어떻게 가능한지 학습했습니다. (몇천줄 속에서 코드 찾는 요령이 늘은 것 같아요 👍)\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\nuseAutoCallback 구현 시 인자를 전달하지 않아도 테스트가 통과하는 부분이 있었습니다. (E2E 제외)\\r\\nUnitTest가 추가되어도 괜찮겠다! 생각이 들었습니다.\\r\\n\\r\\n현 React의 구조는 너무 복잡한데 Preact로 접근해서 풀어보는 방식이 새롭고 좋았습니다!! 쉽게 배우고 -> 깊게 들어가는 느낌\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n저는 React 내부적으로 렌더링이 일어나는 순서에 대해 딥다이브하며 한번 작성해봤습니다.\\r\\n\\r\\n**Fiber 아키텍처**\\r\\n\\r\\nFiber는 React 16부터 도입된 **재조정(Reconciliation) 엔진**입니다. 각 컴포넌트나 요소를 객체로 표현합니다. 이하 설명은 Fiber 아키텍처의 렌더링 과정입니다.\\r\\n\\r\\nFiber 노드의 구조:\\r\\n```ts\\r\\n// Fiber 노드\\r\\n{\\r\\n  type: \'div\' | Component,\\r\\n  props: {...},\\r\\n  child: null,\\r\\n  sibling: null,\\r\\n  return: null,\\r\\n  alternate: null,\\r\\n  effectTag: NoEffect,\\r\\n  stateNode: DOMElement \\r\\n  // ... 생략\\r\\n}\\r\\n```\\r\\n\\r\\n**두 단계의 렌더링 과정**\\r\\n\\r\\nReact의 렌더링은 두 단계로 나누어 집니다.\\r\\n\\r\\n<img width=\\"1116\\" height=\\"659\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/e10592cb-be53-4125-9694-f3af3f391eb1\\" />\\r\\n\\r\\nRender Phase (렌더 단계)\\r\\n\\r\\n- Virtual DOM을 조작하여 변경점을 계산하는 단계입니다\\r\\n- Fiber 아키텍처를 통해 작업을 중단, 재시작할 수 있습니다\\r\\n- 동시성 모드에서 비동기적으로 실행됩니다\\r\\n- 컴포넌트 함수를 호출하고 Virtual DOM에만 반영하며, 실제 DOM은 변경하지 않습니다\\r\\n\\r\\nCommit Phase (커밋 단계)\\r\\n\\r\\n- Render Phase에서 계산된 변경사항을 실제 DOM에 적용합니다\\r\\n- 라이프사이클 메서드와 훅을 실행합니다\\r\\n- 일관된 화면 업데이트를 위해 동기적으로 실행됩니다\\r\\n- **모든 작업 완료 후** 브라우저가 화면을 다시 그립니다 (Paint)\\r\\n\\r\\n**이중 트리 구조**\\r\\n\\r\\nReact는 두 개의 트리를 동시에 관리합니다.\\r\\n- Current Tree: 현재 화면에 표시된 상태 트리\\r\\n- Work-in-Progress Tree: 업데이트가 적용되는 새로운 상태 트리\\r\\n\\r\\n이 구조는 더블 버퍼링 방식으로 작동합니다. 백그라운드에서 새로운 트리를 구성하고, 완료되면 포인터를 교체하여 새 트리를 활성화합니다. 이를 통해 작업 중단과 재시작, 우선순위 기반 업데이트가 가능합니다.\\r\\n\\r\\n> 한줄로 표현해보자면 React의 렌더링은 **Render Phase(Virtual DOM 조작 및 비교) → Commit Phase(실제 DOM 반영)**의 두 단계를 반복하며(loop) Fiber 아키텍처기반으로 현재 보여지는 currentTree, 변경사항에 대한 업데이트를 진행중인 Work-in-Progress Tree 통해 효율적이게 렌더링을 진행합니다.\\r\\n\\r\\n현재의 동작이 마운트냐, 업데이트냐에 따라 달라지는 WorkLoop 부분도 확인했지만 스케쥴러부터 관련 함수들까지의 양이 너무 방대해 아직 완벽하게 흐름을 이해하지 못했습니다.😅\\r\\n\\r\\n관련 아티클\\r\\n[React 톺아보기 -2](https://goidle.github.io/react/in-depth-react-intro)\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n개인적인 생각으로는 메모이제이션 훅은 예기치 못한 동작들을 원하는 방향으로 돌아갈 수 있게 도와주는 훅에 더 가깝다고 느꼈습니다.\\r\\n\\r\\n물론 대규모 프로젝트나 빅 데이터를 다루지 못했기에 이런 결론에 도달했을 수 있지만, 조금 더 근본적인 생각으로 돌아가보자면 이 메모이제이션 훅들은 렌더링을 개선해주고 큰 계산의 결과값을 캐싱하는 용도로 나온 훅으로 알고있습니다.\\r\\n\\r\\n그런데 이 훅들을 사용하지 않았을 때 버벅임이나 성능적인 문제가 아니라 기술적인 오류가 발생한다면 가장 먼저 **내가 컴포넌트의 구조를 잘못 잡았나?** 부터 생각해보고 이 훅들을 사용하지 않아도 \\"정상적\\"으로 돌아가는 방향으로 개선하는걸 우선해볼 것 같습니다.\\r\\n\\r\\n분명 이 메모이제이션 훅들은 필요한 훅이지만 비용이 적지 않은 만큼 내가 설계한 방향이 맞았나? 더 나은 방법은 없을까? 라고 리팩토링의 고민을 하게 해줄 수 있는 훅이라고 생각해봤습니다 🙇‍♂️\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n**왜 컨텍스트와 상태관리가 필요한가?**\\r\\n\\r\\nProps Drilling의 한계\\r\\n\\r\\n컴포넌트 트리가 깊어질수록 props 전달 체인이 길어집니다. 특히 중간 컴포넌트들이 자신은 사용하지 않는 데이터를 단순히 하위 컴포넌트로 전달하기 위해서만 존재하게 되는 상황이 발생합니다. 이는 변경점 발생 시 모든 중간 단계 컴포넌트를 수정해야 하는 문제로 이어집니다.\\r\\n\\r\\n형제 컴포넌트 간 데이터 공유의 복잡성\\r\\n\\r\\nReact의 단방향 데이터 흐름에서 형제 컴포넌트끼리 직접 소통할 방법이 없습니다. 데이터를 공유하려면 가장 가까운 공통 부모 컴포넌트까지 상태를 끌어올려야 하는데, 이는 상위 컴포넌트의 책임을 무겁게 만들고 컴포넌트 간 결합도를 높입니다.\\r\\n\\r\\n전역 상태 관리의 필요성\\r\\n\\r\\n애플리케이션 전반에서 사용되는 데이터(인증 상태, 설정 값 등)는 컴포넌트 계층과 상관없이 접근할 수 있어야 합니다. props로 이런 데이터를 전달하면 모든 컴포넌트가 이 데이터에 의존하게 되어 결합도가 높아집니다.\\r\\n결국 컨텍스트와 상태관리는 **\\"데이터가 필요한 곳에서 바로 접근할 수 있게 해주는 도구\\"** 라는 생각이 들었습니다.\\r\\n\\r\\n**컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?**\\r\\n\\r\\n인터페이스 변경 시 수정 범위 확산\\r\\n\\r\\nprops로 전달되는 데이터의 타입이나 구조가 변경되면, 해당 데이터를 전달하는 모든 중간 컴포넌트의 props 인터페이스를 수정해야 합니다. 이는 변경의 영향 범위를 예측하기 어렵게 만들고, 실수로 누락되는 부분이 생길 가능성을 높입니다.\\r\\n\\r\\n컴포넌트의 독립성 저하\\r\\n\\r\\n특정 props에 의존하는 컴포넌트는 해당 props를 제공하는 상위 컴포넌트 없이는 동작할 수 없습니다. 이는 컴포넌트의 재사용성을 제한합니다.\\r\\n\\r\\n상태 일관성 관리의 어려움\\r\\n\\r\\n동일한 데이터를 여러 컴포넌트에서 각각 관리하면 데이터 동기화 문제가 발생합니다. 한 곳에서 데이터가 업데이트되어도 다른 곳의 데이터는 이전 상태를 유지하는 불일치가 생길 수 있습니다.\\r\\n\\r\\n중복 연산과 메모리 비효율성\\r\\n\\r\\n같은 데이터 가공 로직이 여러 컴포넌트에 분산되어 있으면 동일한 계산이 중복으로 수행됩니다. 또한 비슷한 상태를 여러 곳에서 관리하면 메모리 사용량이 불필요하게 증가할 수 있습니다.\\r\\n\\r\\n**컨텍스트의 다양한 활용법**\\r\\n\\r\\n컴파운드 컴포넌트 패턴으로 제한된 범위의 Context 활용\\r\\n\\r\\n전역 Context의 리렌더링 문제를 피하면서도 관련 컴포넌트들끼리는 상태를 공유할 수 있는 절충안입니다. 특정 기능 단위로 Context 범위를 제한하여 해당 영역 내에서만 상태를 공유합니다.\\r\\n이 패턴은 Modal, Accordion, Tab 등 UI 컴포넌트에서 내부 상태를 공유해야 할 때 특히 유용합니다. 컴포넌트의 내부 구현은 Context를 사용하지만 외부에서는 일반적인 props 인터페이스로 사용할 수 있어 캡슐화가 잘 됩니다.\\r\\n\\r\\nCustom Hooks를 통한 상태 로직 재사용\\r\\n\\r\\n상태 관리 로직을 훅으로 분리하면 여러 컴포넌트에서 동일한 상태 패턴을 재사용할 수 있습니다. 전역 상태 없이도 비슷한 상태 로직이 필요한 컴포넌트들에서 일관된 동작을 구현할 수 있습니다.\\r\\nlocalStorage나 sessionStorage와의 동기화, API 호출 상태 관리, 폼 validation 등의 로직을 훅으로 만들어 재사용하는 방식입니다.\\r\\n\\r\\n서버 상태 관리 라이브러리 활용\\r\\n\\r\\nReact Query, SWR 같은 라이브러리를 사용하면 서버에서 가져오는 데이터는 별도로 관리할 수 있습니다. 캐싱, 동기화, 백그라운드 업데이트를 자동으로 처리해주므로 클라이언트 상태와 서버 상태를 분리하여 복잡성을 줄일 수 있습니다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n**ToastProvider**\\r\\n\\r\\n- hideAfter에 useMemo를 사용하지 않을 방법은 없었을까요? useAutoCallback을 사용하면 내부 디바운싱에서 타이머가 초기화되지 않는 문제가 있었습니다. 함수를 메모이제이션 하는거니까 useCallback쪽이 더 어울린다고 생각이 들어서요!\\r\\n```tsx\\r\\nconst hideAfter = useAutoCallback(debounce(hide, DEFAULT_DELAY));\\r\\n\\r\\n// ⚠️타이머가 비정상으로 동작해서 Toast가 꺼지지않음\\r\\nexport const debounce = <T extends AnyFunction>(callback: T, delay: number) => {\\r\\n  let timeoutId: ReturnType<typeof window.setTimeout> | null = null;\\r\\n\\r\\n  return (...args: Parameters<T>) => {\\r\\n    if (timeoutId) {\\r\\n      clearTimeout(timeoutId);\\r\\n    }\\r\\n    timeoutId = setTimeout(() => {\\r\\n      callback(...args);\\r\\n      timeoutId = null;\\r\\n    }, delay);\\r\\n  };\\r\\n};\\r\\n```\\r\\n\\r\\n- 이런 Provider 구현 시 useReducer가 더 좋을까요? 저는 useState로 상태값을 두고 handle함수를 Provider 내부에 둔 상태가 한눈에 보여 파악하기 쉽다고 생각했습니다! 코치님은 useReducer를 선호하시나요?? 이유도 궁금합니다!\\r\\n```tsx\\r\\n/* eslint-disable react-refresh/only-export-components */\\r\\nimport { useAutoCallback } from \\"@hanghae-plus/lib\\";\\r\\nimport { createContext, memo, type PropsWithChildren, useContext, useMemo, useReducer } from \\"react\\";\\r\\nimport { createPortal } from \\"react-dom\\";\\r\\nimport { debounce } from \\"../../utils\\";\\r\\nimport { Toast } from \\"./Toast\\";\\r\\nimport { createActions, initialState, toastReducer, type ToastType } from \\"./toastReducer\\";\\r\\n\\r\\ntype ShowToast = (message: string, type: ToastType) => void;\\r\\ntype Hide = () => void;\\r\\n\\r\\nconst ToastContext = createContext<{\\r\\n  message: string;\\r\\n  type: ToastType;\\r\\n}>({\\r\\n  ...initialState,\\r\\n});\\r\\n\\r\\nconst ToastCommandContext = createContext<{\\r\\n  show: ShowToast;\\r\\n  hide: Hide;\\r\\n}>({\\r\\n  show: () => null,\\r\\n  hide: () => null,\\r\\n});\\r\\n\\r\\nconst DEFAULT_DELAY = 3000;\\r\\n\\r\\nconst useToastContext = () => useContext(ToastContext);\\r\\nconst useToastCommandContext = () => useContext(ToastCommandContext);\\r\\n\\r\\nexport const useToastCommand = () => {\\r\\n  const { show, hide } = useToastCommandContext();\\r\\n  return { show, hide };\\r\\n};\\r\\nexport const useToastState = () => {\\r\\n  const { message, type } = useToastContext();\\r\\n  return { message, type };\\r\\n};\\r\\n\\r\\nexport const ToastProvider = memo(({ children }: PropsWithChildren) => {\\r\\n  const [state, dispatch] = useReducer(toastReducer, initialState);\\r\\n  const { show, hide } = useMemo(() => createActions(dispatch), [dispatch]); // ⚠️ 어떻게 동작하는지 확인하려면 별도 파일 확인이 필요함\\r\\n  const visible = state.message !== \\"\\";\\r\\n\\r\\n  const hideAfter = useAutoCallback(debounce(hide, DEFAULT_DELAY));\\r\\n\\r\\n  const showWithHide: ShowToast = useAutoCallback((...args) => {\\r\\n    show(...args);\\r\\n    hideAfter();\\r\\n  });\\r\\n\\r\\n  const command = useMemo(() => ({ show: showWithHide, hide }), [showWithHide, hide]);\\r\\n\\r\\n  return (\\r\\n    <ToastCommandContext.Provider value={command}>\\r\\n      <ToastContext.Provider value={state}>\\r\\n        {children}\\r\\n        {visible && createPortal(<Toast />, document.body)}\\r\\n      </ToastContext.Provider>\\r\\n    </ToastCommandContext.Provider>\\r\\n  );\\r\\n});\\r\\n```\\r\\n\\r\\n- 얕은 비교 함수를 구현하고나서 [Zustand 코드](https://github.com/pmndrs/zustand/blob/main/src/vanilla/shallow.ts)를 살펴보았는데 Map과 Set, Symbol.iterator, 일반 객체를 분리해서 순회하는 부분을 보았습니다. 저는 따로 분리하여 처리하지 않았는데 처리하지 않았을 때 문제가 될 부분이 있을까요?\\r\\n\\r\\n번외: 준일 코치님 멘토링 세션을 진행하며 제가 왜 빅테크를 가고 싶어하는지, 업무를 해당 회사들에 어울리는 인재처럼 진행하고 있었는지 다시 한번 돌아보게 되었습니다 감사합니다🙇‍♂️\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-19T07:21:22Z","updated_at":"2025-07-27T09:11:33Z","closed_at":null,"merged_at":null,"merge_commit_sha":"689124480f83cb90896898ef381fe37c103626f2","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/10/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/10/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/10/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/b01398c0b486902d0b4a21d4fd53bd79f720b925","head":{"label":"yunwoo-yu:main","ref":"main","sha":"b01398c0b486902d0b4a21d4fd53bd79f720b925","user":{"login":"yunwoo-yu","id":100748721,"node_id":"U_kgDOBgFNsQ","avatar_url":"https://avatars.githubusercontent.com/u/100748721?v=4","gravatar_id":"","url":"https://api.github.com/users/yunwoo-yu","html_url":"https://github.com/yunwoo-yu","followers_url":"https://api.github.com/users/yunwoo-yu/followers","following_url":"https://api.github.com/users/yunwoo-yu/following{/other_user}","gists_url":"https://api.github.com/users/yunwoo-yu/gists{/gist_id}","starred_url":"https://api.github.com/users/yunwoo-yu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yunwoo-yu/subscriptions","organizations_url":"https://api.github.com/users/yunwoo-yu/orgs","repos_url":"https://api.github.com/users/yunwoo-yu/repos","events_url":"https://api.github.com/users/yunwoo-yu/events{/privacy}","received_events_url":"https://api.github.com/users/yunwoo-yu/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022485899,"node_id":"R_kgDOPPHliw","name":"front_6th_chapter1-3","full_name":"yunwoo-yu/front_6th_chapter1-3","private":false,"owner":{"login":"yunwoo-yu","id":100748721,"node_id":"U_kgDOBgFNsQ","avatar_url":"https://avatars.githubusercontent.com/u/100748721?v=4","gravatar_id":"","url":"https://api.github.com/users/yunwoo-yu","html_url":"https://github.com/yunwoo-yu","followers_url":"https://api.github.com/users/yunwoo-yu/followers","following_url":"https://api.github.com/users/yunwoo-yu/following{/other_user}","gists_url":"https://api.github.com/users/yunwoo-yu/gists{/gist_id}","starred_url":"https://api.github.com/users/yunwoo-yu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yunwoo-yu/subscriptions","organizations_url":"https://api.github.com/users/yunwoo-yu/orgs","repos_url":"https://api.github.com/users/yunwoo-yu/repos","events_url":"https://api.github.com/users/yunwoo-yu/events{/privacy}","received_events_url":"https://api.github.com/users/yunwoo-yu/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/yunwoo-yu/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/yunwoo-yu/front_6th_chapter1-3/deployments","created_at":"2025-07-19T07:08:54Z","updated_at":"2025-07-25T06:02:43Z","pushed_at":"2025-07-25T06:02:39Z","git_url":"git://github.com/yunwoo-yu/front_6th_chapter1-3.git","ssh_url":"git@github.com:yunwoo-yu/front_6th_chapter1-3.git","clone_url":"https://github.com/yunwoo-yu/front_6th_chapter1-3.git","svn_url":"https://github.com/yunwoo-yu/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":115,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/10"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/10"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/10"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/10/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/10/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/10/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/b01398c0b486902d0b4a21d4fd53bd79f720b925"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/11","id":2678902826,"node_id":"PR_kwDOPMCTuc6frNAq","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/11","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/11.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/11.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/11","number":11,"state":"open","locked":false,"title":"[7팀 최용훈] Chapter 1-3. 프레임워크 없이 SPA 만들기","user":{"login":"yhun940731","id":56425514,"node_id":"MDQ6VXNlcjU2NDI1NTE0","avatar_url":"https://avatars.githubusercontent.com/u/56425514?v=4","gravatar_id":"","url":"https://api.github.com/users/yhun940731","html_url":"https://github.com/yhun940731","followers_url":"https://api.github.com/users/yhun940731/followers","following_url":"https://api.github.com/users/yhun940731/following{/other_user}","gists_url":"https://api.github.com/users/yhun940731/gists{/gist_id}","starred_url":"https://api.github.com/users/yhun940731/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yhun940731/subscriptions","organizations_url":"https://api.github.com/users/yhun940731/orgs","repos_url":"https://api.github.com/users/yhun940731/repos","events_url":"https://api.github.com/users/yhun940731/events{/privacy}","received_events_url":"https://api.github.com/users/yhun940731/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://hanghae-plus.github.io/front_6th_chapter1-3/\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n과제를 진행하면서 React hooks의 내부 동작 방식을 보다 깊이 있게 이해할 수 있었다. 라이브러리 없이 SPA를 직접 구현하다 보니, hooks가 어떻게 동작하고 컴포넌트 상태나 렌더링에 어떤 영향을 미치는지 논리적으로 고민할 시간이 많았다. 큰 어려움은 없었지만, 가끔 예상치 못한 동작을 마주치면 전체 흐름을 직접 따라가며 해결해볼 기회가 생겨 좋았다.\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n- Context API에서 state와 dispatch 함수를 다른 Context로 분리해서 선언 시, 리렌더를 최소화할 수 있다는 것을 학습했다.\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n이번 과제를 통해 라이브러리 내부 구현 원리에 대한 이해가 크게 향상되었다. 라이브러리가 제공하는 핵심 로직을 직접 다뤄볼 수 있는 좋은 경험이었다.\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n\\r\\n커스텀 hooks 및 context 분리 구현이 실제로 리렌더링을 최소화하는 데 효과적인 구조인지, 추가로 개선할 점이 있다면 피드백을 받고 싶습니다.","created_at":"2025-07-19T08:58:16Z","updated_at":"2025-07-29T02:14:00Z","closed_at":null,"merged_at":null,"merge_commit_sha":"e416ed3b47a7849891a0715a7f1553d162fa5d07","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/11/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/11/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/11/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/cc742deaaefa85096008c174ebd91b7dd68a5af2","head":{"label":"yhun940731:main","ref":"main","sha":"cc742deaaefa85096008c174ebd91b7dd68a5af2","user":{"login":"yhun940731","id":56425514,"node_id":"MDQ6VXNlcjU2NDI1NTE0","avatar_url":"https://avatars.githubusercontent.com/u/56425514?v=4","gravatar_id":"","url":"https://api.github.com/users/yhun940731","html_url":"https://github.com/yhun940731","followers_url":"https://api.github.com/users/yhun940731/followers","following_url":"https://api.github.com/users/yhun940731/following{/other_user}","gists_url":"https://api.github.com/users/yhun940731/gists{/gist_id}","starred_url":"https://api.github.com/users/yhun940731/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yhun940731/subscriptions","organizations_url":"https://api.github.com/users/yhun940731/orgs","repos_url":"https://api.github.com/users/yhun940731/repos","events_url":"https://api.github.com/users/yhun940731/events{/privacy}","received_events_url":"https://api.github.com/users/yhun940731/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022512287,"node_id":"R_kgDOPPJMnw","name":"front_6th_chapter1-3","full_name":"yhun940731/front_6th_chapter1-3","private":false,"owner":{"login":"yhun940731","id":56425514,"node_id":"MDQ6VXNlcjU2NDI1NTE0","avatar_url":"https://avatars.githubusercontent.com/u/56425514?v=4","gravatar_id":"","url":"https://api.github.com/users/yhun940731","html_url":"https://github.com/yhun940731","followers_url":"https://api.github.com/users/yhun940731/followers","following_url":"https://api.github.com/users/yhun940731/following{/other_user}","gists_url":"https://api.github.com/users/yhun940731/gists{/gist_id}","starred_url":"https://api.github.com/users/yhun940731/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yhun940731/subscriptions","organizations_url":"https://api.github.com/users/yhun940731/orgs","repos_url":"https://api.github.com/users/yhun940731/repos","events_url":"https://api.github.com/users/yhun940731/events{/privacy}","received_events_url":"https://api.github.com/users/yhun940731/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/yhun940731/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/yhun940731/front_6th_chapter1-3/deployments","created_at":"2025-07-19T08:26:14Z","updated_at":"2025-07-25T06:34:13Z","pushed_at":"2025-07-25T07:20:20Z","git_url":"git://github.com/yhun940731/front_6th_chapter1-3.git","ssh_url":"git@github.com:yhun940731/front_6th_chapter1-3.git","clone_url":"https://github.com/yhun940731/front_6th_chapter1-3.git","svn_url":"https://github.com/yhun940731/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":287,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/11"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/11"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/11"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/11/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/11/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/11/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/cc742deaaefa85096008c174ebd91b7dd68a5af2"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/12","id":2679033222,"node_id":"PR_kwDOPMCTuc6frs2G","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/12","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/12.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/12.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/12","number":12,"state":"open","locked":false,"title":"[7팀 강병준] Chapter 1-3. React, Beyond the Basics ","user":{"login":"BangDori","id":44726494,"node_id":"MDQ6VXNlcjQ0NzI2NDk0","avatar_url":"https://avatars.githubusercontent.com/u/44726494?v=4","gravatar_id":"","url":"https://api.github.com/users/BangDori","html_url":"https://github.com/BangDori","followers_url":"https://api.github.com/users/BangDori/followers","following_url":"https://api.github.com/users/BangDori/following{/other_user}","gists_url":"https://api.github.com/users/BangDori/gists{/gist_id}","starred_url":"https://api.github.com/users/BangDori/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BangDori/subscriptions","organizations_url":"https://api.github.com/users/BangDori/orgs","repos_url":"https://api.github.com/users/BangDori/repos","events_url":"https://api.github.com/users/BangDori/events{/privacy}","received_events_url":"https://api.github.com/users/BangDori/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\nhttps://hanghae-plus.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n#### ToastProvider로 인한 ProductCard 리렌더링 해결하기 (구현 과정에서의 기술적 도전과 해결)\\r\\n\\r\\n리렌더링 문제를 해결하기 위해 크게 3가지에 대해 고민을 하고 접근을 해보았습니다.\\r\\n\\r\\n- (1) Context API가 아닌 외부 상태 관리 도구 도입\\r\\n\\r\\nProductCard가 리렌더링 문제를 분명히 해결할 수는 있으나, Context API → 전역 상태 도구로의 전환이 필요하기 때문에 **추가적인 리소스**를 더해야하는 최후의 방법이라고 생각하여 다른 방안들을 고려하였습니다.\\r\\n\\r\\n- (2) children에 대한 메모이제이션 적용해보기\\r\\n\\r\\nMemoization을 적용하면 Context API에서 값을 가져오지 않는 컴포넌트에 대해서는 리렌더링을 방지할 수는 있으나, 실제로 `children`에 대한 Memoization은 효과가 없었습니다.\\r\\n\\r\\n```ts\\r\\n// ProductCard.tsx\\r\\nexport function ProductCard({ onClick, ...product }: Product & { onClick: (id: string) => void }) {\\r\\n  const addCart = useCartAddCommand();\\r\\n\\r\\n  // ...\\r\\n}\\r\\n\\r\\n// useCardAddCommand.ts\\r\\nexport const useCartAddCommand = () => {\\r\\n  const toast = useToastCommand();\\r\\n  return useAutoCallback((product: Product, quantity = 1) => {\\r\\n    addToCart(product, quantity);\\r\\n    toast.show(\\"장바구니에 추가되었습니다\\", \\"success\\");\\r\\n  });\\r\\n};\\r\\n```\\r\\n\\r\\n원인을 파악해보았을 때, ToastProvider의 `state`가 변경되면서 Toast를 구독하는 모든 컴포넌트에 리렌더링이 발생하면서 ProductCard도 리렌더링이 발생한다는 것을 인지하게 되었습니다. 그래서 이 문제를 해결하기 위해서는 “장바구니 담기” 버튼을 클릭했을 때 변경되는 Toast 메시지의 State와 Command를 분리해야한다고 생각하게 되었습니다. 이 과정에서 `useToastCommand`와 `useToastState`가 분리된 의도를 파악할 수 있었습니다.\\r\\n\\r\\n- (3) Context를 분리하기\\r\\n\\r\\nCommand를 공유하는 Context와 State를 공유하는 Context를 다음과 같이 분리하였습니다.\\r\\n\\r\\n```jsx\\r\\n<ToastCommandContext value={command}>\\r\\n  {children}\\r\\n  <ToastStateContext value={state}>{visible && createPortal(<Toast />, document.body)}</ToastStateContext>\\r\\n</ToastCommandContext>\\r\\n```\\r\\n\\r\\n추가로 ToastProvider가 `state` 업데이트로 리렌더링될 때, command 객체 또한 함께 재생성되며 이를 구독하는 컴포넌트까지 리렌더링되는 문제가 있었습니다. 이를 방지하기 위해 command 객체 전체를 `useMemo`로 캐싱하고, 내부의 show, hide 메서드는 `useCallback`으로 참조를 고정하여 불필요한 리렌더링을 막았습니다.\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n처음에는 **(AS-IS)typeof와 여러 조건문을 사용해 각 타입을 일일이 비교하는 방식**으로 구현했지만, 리팩토링을 통해 불필요한 분기를 제거하고, [isObject](packages/lib/src/utils/type-guard.ts) 조건으로 핵심 비교 로직을 단순화하였습니다. 또한 자바스크립트에서 배열은 객체이므로, 배열에 대한 분기문과 로직을 추가하지 않았습니다.\\r\\n\\r\\n#### AS-IS\\r\\n\\r\\n```ts\\r\\n// AS-IS\\r\\nexport const deepEquals = (a: unknown, b: unknown): boolean => {\\r\\n  if (a === b) {\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  if (typeof a === \\"object\\" && typeof b !== \\"object\\") {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  if (typeof a !== \\"object\\" && typeof b === \\"object\\") {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  if (isObject(a) && isObject(b)) {\\r\\n    // ...\\r\\n  }\\r\\n\\r\\n  return a === b;\\r\\n};\\r\\n```\\r\\n\\r\\n#### TO-BE\\r\\n\\r\\n```ts\\r\\nexport const deepEquals = (a: unknown, b: unknown): boolean => {\\r\\n  if (isObject(a) && isObject(b)) {\\r\\n    const aKeys = Object.keys(a);\\r\\n    const bKeys = Object.keys(b);\\r\\n\\r\\n    if (aKeys.length !== bKeys.length) return false;\\r\\n\\r\\n    const uniqueKeys = new Set([...aKeys, ...bKeys]);\\r\\n\\r\\n    for (const key of uniqueKeys) {\\r\\n      if (isObject(a[key]) && isObject(b[key])) {\\r\\n        return deepEquals(a[key], b[key]); // 재귀적으로 하위 속성들에 대한 비교\\r\\n      }\\r\\n\\r\\n      if (a[key] !== b[key]) return false;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  return a === b;\\r\\n};\\r\\n```\\r\\n\\r\\n재귀 함수는 알고리즘 문제 풀이할 때 밖에 사용해본 경험이 없는데, 실제로 깊은 비교에서 **하위 속성들에 대한 비교를 재귀적으로 표현**함으로써 깊은 비교를 더욱 명시적으로 나타낸 것 같아서 만족스럽습니다.\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n개선이 필요하다고 생각한 코드는 특별히 없습니다. 이전 과제와 비교하여 수월했던 것 같습니다!\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n이번 과제를 진행하면서 **스스로가 궁금증을 가지고 깊이있게 학습하는데 중요함**을 배울 수 있었습니다.\\r\\n\\r\\n이전까지는 과제를 수행하는데 있어 AI를 기반으로 요구사항을 구현하고 이를 이해하는데 급급했더라면, 이번 과제에서는 이전과 다른 방식으로 과제를 진행해보았습니다.\\r\\n\\r\\n1. 주석을 이용해 수도 코드를 작성\\r\\n2. 내가 알고 있는 지식을 기반으로 수도 코드에 맞춰 코드 작성\\r\\n3. 테스트 통과하는지 확인\\r\\n   - 테스트가 통과하지 않는다면 내가 가지고 있는 지식을 기반으로 왜 실패하였는지 확인\\r\\n   - 몇 가지 가설을 세운 후에 검증\\r\\n   - 테스트를 통과한다면 이후 가설에 대해서 AI와 논의 →AI 사용\\r\\n   - 추가적인 가설이 있는지, 혹은 현재 코드에서 리팩토링 방향에 대한 논의 → AI 사용\\r\\n\\r\\n이 과정에서 React에서 다양한 훅들이 `useRef`를 기반으로 동작하며, 모든 훅의 기본은 `useState`라는 사실을 이해할 수 있게 되었습니다.\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\nToastProvider 요구사항을 해결해나가면서 과거의 내가 디버깅을 할 때 무지성으로 `console`을 찍는 습관이 얼마나 비논리적이며 비효율적인 방식인지를 되돌아보면서 스스로를 반성하는 계기가 되었습니다.\\r\\n\\r\\n앞으로는 문제가 발생했을 때, 문제가 발생하는 원인을 흐름이나 사용하고 있는 도구의 렌더링 / 원리를 바탕으로 고려하는 습관을 길러야겠습니다!\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n#### 1. 리액트의 렌더링 과정\\r\\n\\r\\n초기 렌더링: vNode -> NormalizeVNode -> Element -> Rendering\\r\\n\\r\\n- vNode 생성: JSX → `createElement()` → Virtual DOM 생성\\r\\n- NormalizeVNode → vNode를 내부적으로 정규화\\r\\n- Element 생성: DOM 트리 생성\\r\\n- Rendering: 실제 DOM에 그리기\\r\\n\\r\\n리렌더링: Update -> vNode -> NormalizeVNode -> Diffing -> ReRendering(V-DOM) -> RePainting(DOM)\\r\\n\\r\\n- Update: setState, dispatch 등으로 업데이트 트리거\\r\\n- vNode 생성: 변경된 부분에 대해 새로운 vNode 트리 생성\\r\\n- NormalizeVNode: 새로운 트리를 정규화\\r\\n- Diffing: 기존 vNode와 새 vNode를 비교 (Reconciliation)\\r\\n- ReRendering (V-DOM): 변경된 부분만 업데이트되도록 가상 DOM 갱신\\r\\n- RePainting (DOM): 실제 DOM에 필요한 부분만 반영 (브라우저 페인팅)\\r\\n\\r\\n#### 2. 리액트의 렌더링 최적화 방법\\r\\n\\r\\n1. useCallback, useMemo를 활용하여 불필요한 함수 생성 혹은 계산을 최소화하기\\r\\n2. React.memo를 활용하여 불필요한 리렌더링 방지하기\\r\\n3. 불필요하게 외부 상태를 구독하고 있지 않은지 / 그리고 구독 상태로 인해 영향을 받고 있지 않은지 의존성을 확인해보기\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\nReact에서는 `useMemo`, `useCallback`, `React.memo` 등을 통해 렌더링 시 함수 재생성, 연산 재수행, 불필요한 자식 컴포넌트의 리렌더링을 방지하는 데 활용됩니다.\\r\\n\\r\\n하지만 메모이제이션이 항상 성능 최적화를 보장해주는 것은 아닙니다. 오히려 불필요하게 사용하게 된다면 메모리 사용만 증가하거나 의존성이 자주 변경되면 캐싱이 의미 없어져 오히려 성능을 악화시킬 수 있습니다. 관련 아티클을 찾아보며, 메모이제이션은 상황에 따라 신중하게 사용해야 하는 기법이라는 점을 다시금 느꼈습니다. - [내가 사용하는 useCallback, useMemo가 진짜 성능 최적화를 진행중인걸까?](https://velog.io/@keemsebin/%EB%82%B4%EA%B0%80-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-useCallBack-useMemo%EA%B0%80-%EC%A7%84%EC%A7%9C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%EB%A5%BC-%EC%A7%84%ED%96%89%EC%A4%91%EC%9D%B8%EA%B1%B8%EA%B9%8C)\\r\\n\\r\\n메모이제이션을 사용하지 않고도 리렌더링을 줄이는 방법 중 하나는 상태의 **격리**입니다. React에서는 부모 컴포넌트가 리렌더링되면 자식 컴포넌트도 함께 리렌더링되는 특성이 있기 때문에, 상태를 불필요하게 끌어올리지 않고 컴포넌트 내부 또는 별도의 하위 컴포넌트로 격리하는 방식으로 리렌더링 범위를 최소화할 수 있습니다. 이런 구조적 접근을 통해 메모이제이션 없이도 성능 개선이 가능하다고 생각합니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\nContext API는 Props driiling을 피하기 위한 도구로서 사용하는데 아래의 장단점을 가진다고 생각합니다.\\r\\n\\r\\n- 장점\\r\\n  - 선언적으로 컴포넌트를 명시함으로써 가독성을 높일 수 있음\\r\\n  - 컴포넌트 간 상태 공유가 용이함\\r\\n- 단점\\r\\n  - Context API를 사용하는 경우 상태가 변경되면, 해당 Context를 구독하고 있는 모든 컴포넌트가 리렌더링되는 문제 발생\\r\\n  - Context가 많아지게 된다면 Provider의 늪에 빠져버릴 수 있음\\r\\n\\r\\n그리고 Context API를 사용하지 않고 해결할 수 있는 방법 중 하나는 조합 패턴을 활용하는 방법이라고 생각합니다.\\r\\n\\r\\n예를 들어, Modal -> ModalBody -> List로 구성된 컴포넌트가 있다고 가정해보겠습니다.\\r\\n\\r\\n```tsx\\r\\nfunction Modal({ open, items, onClose }) {\\r\\n  if (!open) return null;\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <ModalBody items={items} onClose={onClose} />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction ModalBody({ items, onClose }) {\\r\\n  return (\\r\\n    <div>\\r\\n      <div>\\r\\n        <p>ModalBody</p>\\r\\n        <List items={items} />\\r\\n      </div>\\r\\n      <button onClick={onClose}>Close</button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction List({ items }) {\\r\\n  return (\\r\\n    <div>\\r\\n      {items.map((item) => (\\r\\n        <div key={item.id}>{item.name}</div>\\r\\n      ))}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n현재 props drilling으로 인해, ModalBody에서는 사용하지 않는 items를 하위 컴포넌트로 전달해주는 역할을 하고 있습니다. 여기서 Context API를 활용하는 것도 하나의 방법이겠지만 다음과 같이 조합 패턴을 활용하여 이 문제를 해결할 수도 있을 것 같습니다.\\r\\n\\r\\n```tsx\\r\\nfunction Modal({ open, items, onClose }) {\\r\\n  return (\\r\\n    <div>\\r\\n      <ModalBody onClose={onClose}>\\r\\n        <List items={items} />\\r\\n      </ModalBody>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction ModalBody({ onClose, children }) {\\r\\n  return (\\r\\n    <div>\\r\\n      <div>\\r\\n        <p>ModalBody</p>\\r\\n        {children}\\r\\n      </div>\\r\\n      <button onClick={onClose}>Close</button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction List({ items }) {\\r\\n  return (\\r\\n    <div>\\r\\n      {items.map((item) => (\\r\\n        <div key={item.id}>{item.name}</div>\\r\\n      ))}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요.\\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n\\r\\n1. shallowEquals와 deepEquals의 요구사항에서 주어진 (1) 두 값이 정확히 동일한지, (2) 객체가 아닌 경우 처리, … 등의 케이스에 대해서는 굳이 다루지 않더라도 a, b 매개변수가 객체가 아니라면 결국 return 문에서 값과 타입을 함께 비교하지 않아도 된다고 생각하여 추가하지 않았는데 적절한 판단일까요?\\r\\n\\r\\n   ```ts\\r\\n   export const shallowEquals = (a: unknown, b: unknown) => {\\r\\n     if (isObject(a) && isObject(b)) {\\r\\n       const aKeys = Object.keys(a);\\r\\n       const bKeys = Object.keys(b);\\r\\n\\r\\n       if (aKeys.length !== bKeys.length) return false;\\r\\n\\r\\n       const uniqueKeys = new Set([...aKeys, ...bKeys]);\\r\\n\\r\\n       for (const key of uniqueKeys) {\\r\\n         if (a[key] !== b[key]) return false;\\r\\n       }\\r\\n\\r\\n       return true;\\r\\n     }\\r\\n\\r\\n     return a === b;\\r\\n   };\\r\\n   ```\\r\\n\\r\\n2. AI를 잘 활용하는 방법은 AI에게 모든 것을 맡기는 것이 아닌, 내가 생각하지 못한 것을 함께 고민하고 지식을 확장하는 도구로서 생각하고 이번 과제를 진행하였습니다. 다만, 이번 과제에서 AI를 조금은 소극적으로 사용한 것이라는 생각이 드는 것 같습니다. 제가 제대로 과제를 수행한 게 맞을까요?\\r\\n","created_at":"2025-07-19T12:55:26Z","updated_at":"2025-07-26T05:07:57Z","closed_at":null,"merged_at":null,"merge_commit_sha":"6cae8053844f900c27837fe4356ae7d9cec59b27","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/12/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/12/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/12/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/a96a864628f51aeeef17f73e6b11165163c4ff4e","head":{"label":"BangDori:main","ref":"main","sha":"a96a864628f51aeeef17f73e6b11165163c4ff4e","user":{"login":"BangDori","id":44726494,"node_id":"MDQ6VXNlcjQ0NzI2NDk0","avatar_url":"https://avatars.githubusercontent.com/u/44726494?v=4","gravatar_id":"","url":"https://api.github.com/users/BangDori","html_url":"https://github.com/BangDori","followers_url":"https://api.github.com/users/BangDori/followers","following_url":"https://api.github.com/users/BangDori/following{/other_user}","gists_url":"https://api.github.com/users/BangDori/gists{/gist_id}","starred_url":"https://api.github.com/users/BangDori/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BangDori/subscriptions","organizations_url":"https://api.github.com/users/BangDori/orgs","repos_url":"https://api.github.com/users/BangDori/repos","events_url":"https://api.github.com/users/BangDori/events{/privacy}","received_events_url":"https://api.github.com/users/BangDori/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022610652,"node_id":"R_kgDOPPPM3A","name":"front_6th_chapter1-3","full_name":"BangDori/front_6th_chapter1-3","private":false,"owner":{"login":"BangDori","id":44726494,"node_id":"MDQ6VXNlcjQ0NzI2NDk0","avatar_url":"https://avatars.githubusercontent.com/u/44726494?v=4","gravatar_id":"","url":"https://api.github.com/users/BangDori","html_url":"https://github.com/BangDori","followers_url":"https://api.github.com/users/BangDori/followers","following_url":"https://api.github.com/users/BangDori/following{/other_user}","gists_url":"https://api.github.com/users/BangDori/gists{/gist_id}","starred_url":"https://api.github.com/users/BangDori/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BangDori/subscriptions","organizations_url":"https://api.github.com/users/BangDori/orgs","repos_url":"https://api.github.com/users/BangDori/repos","events_url":"https://api.github.com/users/BangDori/events{/privacy}","received_events_url":"https://api.github.com/users/BangDori/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/BangDori/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/BangDori/front_6th_chapter1-3/deployments","created_at":"2025-07-19T12:53:38Z","updated_at":"2025-07-23T17:16:46Z","pushed_at":"2025-07-23T17:16:42Z","git_url":"git://github.com/BangDori/front_6th_chapter1-3.git","ssh_url":"git@github.com:BangDori/front_6th_chapter1-3.git","clone_url":"https://github.com/BangDori/front_6th_chapter1-3.git","svn_url":"https://github.com/BangDori/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":120,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/12"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/12"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/12"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/12/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/12/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/12/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/a96a864628f51aeeef17f73e6b11165163c4ff4e"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/13","id":2679052929,"node_id":"PR_kwDOPMCTuc6frxqB","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/13","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/13.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/13.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/13","number":13,"state":"open","locked":false,"title":"[5팀 윤영서] Chapter 1-3. React, Beyond the Basics","user":{"login":"YeongseoYoon-hanghae","id":191664522,"node_id":"U_kgDOC2yRig","avatar_url":"https://avatars.githubusercontent.com/u/191664522?v=4","gravatar_id":"","url":"https://api.github.com/users/YeongseoYoon-hanghae","html_url":"https://github.com/YeongseoYoon-hanghae","followers_url":"https://api.github.com/users/YeongseoYoon-hanghae/followers","following_url":"https://api.github.com/users/YeongseoYoon-hanghae/following{/other_user}","gists_url":"https://api.github.com/users/YeongseoYoon-hanghae/gists{/gist_id}","starred_url":"https://api.github.com/users/YeongseoYoon-hanghae/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YeongseoYoon-hanghae/subscriptions","organizations_url":"https://api.github.com/users/YeongseoYoon-hanghae/orgs","repos_url":"https://api.github.com/users/YeongseoYoon-hanghae/repos","events_url":"https://api.github.com/users/YeongseoYoon-hanghae/events{/privacy}","received_events_url":"https://api.github.com/users/YeongseoYoon-hanghae/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"# 과제 체크포인트\\r\\n\\r\\n## 배포 링크\\r\\nhttps://yeongseoyoon-hanghae.github.io/front_6th_chapter1-3/\\r\\n\\r\\n## 기본과제\\r\\n\\r\\n### equalities\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n### hooks\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n### High Order Components\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n## 심화 과제\\r\\n\\r\\n### hooks\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n# 과제 셀프회고\\r\\n\\r\\n사실...과제 자체를 하는 것에는 엄청 오래걸리지 않았지만......코테 전형과 면접 준비를 위해.....과제를 뒤로 밀어두고...(주절주절...~)\\r\\n암튼 과제하는 이번 주가 쉽지는 않았습니다...어쩌다보니 PR 정리를 위해 밤을 새는 대참사가~\\r\\n\\r\\n## 기술적 성장\\r\\n\\r\\n### React 내부 동작 원리 이해\\r\\n`useMemo`, `useCallback` 등의 훅을 직접 구현하면서 React가 내부적으로 어떻게 메모이제이션과 의존성 비교를 수행하는지 깊이 이해하게 되었습니다. `useRef`를 활용한 이전 값 저장과 `shallowEquals`를 통한 의존성 비교 로직을 구현하면서 React의 최적화 메커니즘을 이해할 수 있었습니다.\\r\\n\\r\\n```typescript\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n  const prevDepsRef = useRef<DependencyList>(_deps);\\r\\n  const resultRef = useRef<T>(factory());\\r\\n\\r\\n  const depsChanged = !_equals(prevDepsRef.current, _deps);\\r\\n\\r\\n  if (depsChanged) {\\r\\n    resultRef.current = factory();\\r\\n    prevDepsRef.current = _deps;\\r\\n  }\\r\\n\\r\\n  return resultRef.current as T;\\r\\n}\\r\\n```\\r\\n\\r\\n### 옵저버 패턴과 useSyncExternalStore\\r\\n`createObserver`를 구현하면서 외부 상태 관리와 React의 동기화 메커니즘을 학습했습니다. 특히 `subscribe` 함수가 `unsubscribe` 함수를 반환하는 패턴이 `useSyncExternalStore`과 일치한 다는 점을 깨달았습니다.\\r\\n\\r\\n```typescript\\r\\nconst subscribe = (listener: Listener): (() => void) => {\\r\\n  listeners.add(listener);\\r\\n  return () => {\\r\\n    listeners.delete(listener);\\r\\n  };\\r\\n};\\r\\n```\\r\\n\\r\\n### useSyncExternalStore에 대하여\\r\\nReact 18에서 Concurrent Rendering이 렌더링을 여러 번에 나누어 처리하기때문에. 첫 번째 컴포넌트를 렌더링하는 중간에 외부 상태가 변경되면, 두 번째 컴포넌트는 이미 변경된 값을 읽게 되는 현상이 발생하는데, 이를 \\"Tearing\\"이라고 하고 그를 해소하기 위한 훅으로 `useSyncExternalStore`를 도입하게 된것을 이해할 수 있었습니다.\\r\\n\\r\\n원래도 해당 훅을 localStorage와 같은 외부 훅과 동기화 하기 위해서 사용했었는데 내가 잘 모르고 사용하고 있었구나 하는 생각을 했던 것 같습니다.\\r\\n\\r\\n\\r\\n\\r\\n## 자랑하고 싶은 코드 \\r\\n\\r\\n### createStorage의 동기화 문제 해결 [f0d190f](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/13/commits/f0d190ff4efb2a8e94c27702679b53a53b171d8d),[eaba043](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/13/commits/eaba043c4e12e74de23b58832e0d74b0c1e90d76),[b8756fc](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/13/commits/b8756fca06747f1da6c552b02f71bb3fc27aa079),[484b483](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/13/commits/484b483ae794837ec30b2d364cf464c80c338879)\\r\\n이번 과제에서 가장 도전적이었던 부분은 `createStorage`의 `localStorage` 동기화 문제를 해결하는 것이었습니다. \\r\\n\\r\\n#### AS-IS: Observer 패턴만 사용\\r\\n```ts\\r\\nexport const createStorage = <T>(key: string, storage = window.localStorage) => {\\r\\n  let data: T | null = JSON.parse(storage.getItem(key) ?? \\"null\\");\\r\\n  const { subscribe, notify } = createObserver();\\r\\n\\r\\n  const get = () => data;  // 메모리 변수만 반환\\r\\n\\r\\n  const set = (value: T) => {\\r\\n    data = value;  // 메모리 변수 업데이트\\r\\n    storage.setItem(key, JSON.stringify(data));\\r\\n    notify();  // 구독자들에게 알림\\r\\n  };\\r\\n\\r\\n  return { get, set, reset, subscribe };\\r\\n};\\r\\n```\\r\\n처음에는 이렇게 간단하게 접근했습니다. Observer 패턴을 사용해서 상태 변화를 구독자들에게 알리고, 메모리 변수로 빠른 접근을 보장하는 구조였습니다. 하지만 이렇게 해보니 테스트 통과는 하지만 조금 찝찝한 부분이 있었습니다.\\r\\n\\r\\nlocalStorage를 직접 조작하는 상황들을 생각해보니 다음 상황이 발생할것이라고 생각했습니다.\\r\\n```ts\\r\\n// 다른 탭에서 변경하는 시나리오\\r\\n// 탭 A\\r\\nconst userStorage = createStorage<User>(\'user\');\\r\\nconsole.log(userStorage.get()); // { name: \'John\' }\\r\\n\\r\\n// 탭 B에서 직접 조작\\r\\nlocalStorage.setItem(\'user\', JSON.stringify({ name: \'Jane\' }));\\r\\n\\r\\n// 탭 A에서 다시 호출\\r\\nconsole.log(userStorage.get()); // 여전히 { name: \'John\' }\\r\\n```\\r\\n일단 첫번째로는 `createStorage`가 반환하는 인스턴스가 싱글턴이 아니기때문에 같은 key로 생성된 스토리지 인스턴스임에도 동기화 되지 않을 것이었습니다. 그럼에도 테스트가 통과한 이유는...\\r\\n\\r\\n현재 테스트는 \\r\\n```test\\r\\n\\r\\n    it(\\"multiple 컴포넌트가 같은 storage를 구독할 때 동기화되어야 한다\\", () => {\\r\\n      const storage = createStorage(\\"shared\\");   // 하나의 인스턴스만 생성\\r\\n\\r\\n      const { result: result1 } = renderHook(() => useStorage(storage));\\r\\n      const { result: result2 } = renderHook(() => useStorage(storage));\\r\\n\\r\\n     /** 후략 */\\r\\n    });\\r\\n```\\r\\n와 같이 구현되어 있어서 의도적으로 하나의 인스턴스를 공유하고 있어 테스트가 통과되었습니다.\\r\\n\\r\\n실제로는 제 코드를 기반으로 한다면 각 컴포넌트가 서로 다른 인스턴스를 사용하게 되었을 것입니다. \\r\\n\\r\\n```ts\\r\\n// ComponentA.tsx\\r\\nconst ComponentA = () => {\\r\\n  const userStorage = createStorage<User>(\'user\');  // 인스턴스 1\\r\\n  const user = useStorage(userStorage);\\r\\n  // ...\\r\\n};\\r\\n\\r\\n// ComponentB.tsx  \\r\\nconst ComponentB = () => {\\r\\n  const userStorage = createStorage<User>(\'user\');  // 인스턴스 2 \\r\\n  const user = useStorage(userStorage);\\r\\n  // ...\\r\\n};\\r\\n```\\r\\n그렇게 되면 인스턴스 1이 구독하는 observer와 인스턴스 2가 구독하는 observer가 완전히 별개가 되어버려서, `ComponentA`에서 `userStorage.set()`을 호출해도 `ComponentB`의 `useStorage` 훅은 변경 사실을 전혀 모르게 될 거라고 예상했습니다.\\r\\n\\r\\n<img width=\\"802\\" height=\\"670\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/2766aaf5-3881-47bb-9cba-41dc5449729e\\" />\\r\\n<img width=\\"137\\" height=\\"82\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/d5994825-7bf7-4090-801c-16aa96aedbd8\\" />\\r\\n\\r\\n(그렇게 시작된 대화...~~두컷만화~~)\\r\\n\\r\\n#### 내 코드의 문제가 뭘까\\r\\n\\r\\n```ts\\r\\nexport const createStorage = <T>(key: string, storage = window.localStorage) => {\\r\\n  let data: T | null = JSON.parse(storage.getItem(key) ?? \\"null\\");  // 각각 다른 data 변수, 게다가 초기화 시점에만 읽음\\r\\n  const { subscribe, notify } = createObserver();  // 각각 다른 observer\\r\\n  \\r\\n  const set = (value: T) => {\\r\\n    data = value;  // 인스턴스 1의 data만 업데이트\\r\\n    storage.setItem(key, JSON.stringify(data));\\r\\n    notify();  // 인스턴스 1의 구독자들에게만 알림\\r\\n  };\\r\\n  \\r\\n  return { get, set, reset, subscribe };\\r\\n};\\r\\n```\\r\\n처음의 코드에서는 같은 키 \'user\'로 createStorage를 여러 번 호출하면 각각 다른 data 변수, 각각 다른 observer 인스턴스, 각각 다른 구독자 목록을 가지게 되므로 결과적으로 ComponentA에서 상태를 변경해도 ComponentB는 전혀 알 수 없는 상황이 발생합니다.\\r\\n\\r\\n또한 초기화 시점에 한 번만 localStorage를 읽고, 그 이후로는 메모리 변수만 반환하다 보니 외부 변경사항을 전혀 감지할 수 없었습니다.\\r\\n게다가 객체 타입의 데이터를 다룰 때 매번 새로운 객체가 생성되어 `useSyncExternalStore`가 불필요한 리렌더링을 계속 발생시킬것으로 예상했습니다.\\r\\n```ts\\r\\n// AS-IS에서 객체 반환 시 문제\\r\\nconst get = () => data;  // data가 객체면?\\r\\n\\r\\nconst userStorage = createStorage<User>(\'user\');\\r\\nuserStorage.set({ name: \'John\', age: 30 });\\r\\n\\r\\nreturn useSyncExternalStore(storage.subscribe, storage.get);\\r\\n```\\r\\nuseSyncExternalStore는 참조 비교로 변경을 감지하는데 JSON.parse는 매번 새로운 객체를 생성하므로\\r\\n1. useSyncExternalStore가 값이 변경되었다고 판단함\\r\\n2. 리렌더링 발생\\r\\n3. 다시 get() 호출\\r\\n4. 또 다른 새로운 객체 반환\\r\\n.... 무한순환해버림\\r\\n요 과정이 무한루프를 돌것으로 예상되었습니다.\\r\\n\\r\\n\\r\\n#### TO-BE: 싱글톤 패턴 + 캐시 시스템\\r\\n```ts\\r\\ninterface StorageInstance<T> {\\r\\n  get(): T | null;\\r\\n  set(value: T): void;\\r\\n  reset(): void;\\r\\n  subscribe(listener: () => void): () => void;\\r\\n}\\r\\n\\r\\n// 싱글톤 맵\\r\\nconst storageInstances = new Map<string, StorageInstance<unknown>>();\\r\\n\\r\\nexport const createStorage = <T>(key: string, storage = window.localStorage): StorageInstance<T> => {\\r\\n  // 이미 존재하면 기존 인스턴스 반환\\r\\n  if (storageInstances.has(key)) {\\r\\n    return storageInstances.get(key) as StorageInstance<T>;\\r\\n  }\\r\\n\\r\\n  const { subscribe, notify } = createObserver();\\r\\n\\r\\n  // 캐시로 참조 안정성 보장\\r\\n  let cachedValue: T | null = null;\\r\\n  let isInitialized = false;\\r\\n\\r\\n  const get = (): T | null => {\\r\\n    if (!isInitialized) {\\r\\n      const item = storage.getItem(key);\\r\\n      cachedValue = item ? JSON.parse(item) : null;\\r\\n      isInitialized = true;\\r\\n    }\\r\\n    return cachedValue;  // 항상 같은 참조 반환\\r\\n  };\\r\\n\\r\\n  const set = (value: T) => {\\r\\n    storage.setItem(key, JSON.stringify(value));\\r\\n    cachedValue = value;  // 캐시 즉시 업데이트\\r\\n    notify();\\r\\n  };\\r\\n\\r\\n  const instance = { get, set, reset, subscribe };\\r\\n  storageInstances.set(key, instance);  // 싱글톤 저장\\r\\n  return instance;\\r\\n};\\r\\n```\\r\\n위 코드에서는 싱글톤 맵을 생성하여 같은 키로 `createStorage`를 호출하게 되면 완전히 동일한 인스턴스를 받게 구현하였습니다.\\r\\n\\r\\n```ts\\r\\nconst get = (): T | null => {\\r\\n  if (!isInitialized) {\\r\\n    // 실제 사용 시점에 localStorage 확인\\r\\n    const item = storage.getItem(key);\\r\\n    cachedValue = item ? JSON.parse(item) : null;\\r\\n    isInitialized = true;\\r\\n  }\\r\\n  return cachedValue;\\r\\n};\\r\\n```\\r\\n또한 지연로딩을 통해 첫번째 호출인 경우에만 localStorage를 읽도록하여 외부 변경 감지를 돕도록 구현하였습니다.\\r\\n\\r\\n이렇게 해두고 [추가적인 테스트](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/13/commits/eaba043c4e12e74de23b58832e0d74b0c1e90d76)를 작성하였습니다. \\r\\n\\r\\n<img width=\\"442\\" height=\\"64\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/159732ca-0c1d-4ccb-b169-ab24cb406381\\" />\\r\\n\\r\\n이 두 테스트는 싱글톤 패턴이 올바르게 구현되었는지를 테스트하기 위해 작성하였는데요,\\r\\n\\r\\n첫 번째 테스트 \\"같은 key로 생성된 다른 인스턴스들이 동기화되어야 한다\\"는 싱글톤의 핵심 기능을 검증합니다. 실제로는 각 컴포넌트가 독립적으로 `createStorage(\\"user\\")`를 호출하는 경우가 대부분인데, 이때 같은 key를 사용하는 모든 호출이 실제로는 동일한 인스턴스를 반환해야 합니다. 만약 싱글톤 패턴이 제대로 구현되지 않았다면, storage1.set()으로 값을 변경해도 storage2를 구독하는 컴포넌트는 변경 사실을 전혀 모르게 되어 UI가 동기화되지 않는 문제가 발생하기 때문에 이런 문제를 테스트하기 위해 작성하였습니다.\\r\\n\\r\\n또한 두 번째 테스트 \\"다른 key들은 서로 독립적으로 동작해야 한다\\"는 네임스페이스 격리를 검증합니다. 싱글톤 패턴을 구현할 때 자칫하면 모든 key가 하나의 인스턴스를 공유하거나, 한 key의 변경이 다른 key에 영향을 줄 수 있습니다. 때문에 사용자 정보(\\"user\\")를 변경했을 때 테마 설정(\\"settings\\")이 영향받지 않는지, 그리고 각 key별로 완전히 독립적인 상태 관리가 이루어지는지를 확인하도록 작성하였습니다.\\r\\n\\r\\n#### 그런데도 해결되지 않는 찝찝함...🥹\\r\\n사실 어느정도 수준에서는 해결이 되었다고 생각했습니다. 그러나 외부에서 직접 localStorage를 조작하는 경우는 감지할 수 없었습니다.\\r\\n~~(아 물론 조작안하면 되긴 하는데...찝찝하잖아)~~\\r\\n\\r\\n이미 저는 로컬스토리지의 커스텀 이벤트를 알아버렸기 때문에...해당 방식을 가져와서 사용하기로 마음먹게 됩니다...\\r\\n여기서 핵심은 이중 이벤트 감지라고 할 수 있는데요. storage 이벤트를 통해서는 다른 탭에서 변경을 감지하고, 커스텀 이벤트인 storage-inner-document 이벤트로는 같은 탭에서의 변경을 감지하는 방식입니다. [성호코치님 글 참고](https://blog.shiren.dev/ko/post/2023-04-18)\\r\\n\\r\\n```ts\\r\\n// 같은 탭에서의 변경을 감지하기 위한 커스텀 이벤트\\r\\nclass StorageInnerDocumentEvent extends CustomEvent<StorageEventDetail> {\\r\\n  static readonly eventName = \\"storage-inner-document\\";\\r\\n  \\r\\n  constructor(key: string, oldValue: string | null, newValue: string | null) {\\r\\n    super(StorageInnerDocumentEvent.eventName, {\\r\\n      detail: { key, oldValue, newValue },\\r\\n    });\\r\\n  }\\r\\n}\\r\\n\\r\\n// 글로벌 이벤트 핸들러\\r\\nconst handleStorageEvent = (event: Event) => {\\r\\n  let targetKey: string | null = null;\\r\\n\\r\\n  if (event instanceof StorageEvent) {\\r\\n    // 다른 탭에서의 변경 (브라우저 기본 storage 이벤트)\\r\\n    targetKey = event.key;\\r\\n  } else if (event.type === \\"storage-inner-document\\") {\\r\\n    // 같은 탭에서의 변경 (커스텀 이벤트)\\r\\n    targetKey = (event as CustomEvent<StorageEventDetail>).detail.key;\\r\\n  }\\r\\n\\r\\n  if (targetKey && globalObservers.has(targetKey)) {\\r\\n    //  캐시 무효화해서 다음 get() 호출 시 localStorage 재확인\\r\\n    if (cacheInvalidators.has(targetKey)) {\\r\\n      cacheInvalidators.get(targetKey)!();\\r\\n    }\\r\\n    \\r\\n    globalObservers.get(targetKey)!.notify();\\r\\n  }\\r\\n};\\r\\n```\\r\\n그리고 이벤트가 발생하면 해당 키의 캐시를 무효화시켜서, 다음 get() 호출 시에는 localStorage를 다시 읽도록 했습니다.\\r\\n\\r\\n```ts\\r\\nconst invalidateCache = () => {\\r\\n  isInitialized = false;  // 다음 get() 호출 시 localStorage 재확인\\r\\n};\\r\\n\\r\\ncacheInvalidators.set(key, invalidateCache);\\r\\n```\\r\\n실제 시나리오는 다음과 같을것이라고 생각합니다.\\r\\n\\r\\n```ts\\r\\n// 컴포넌트 A\\r\\nconst userStorage = createStorage<User>(\'user\');\\r\\nconst user = useStorage(userStorage);  // { name: \'John\' }\\r\\n\\r\\n// 컴포넌트 B (같은 탭)\\r\\nconst userStorage2 = createStorage<User>(\'user\');  // 동일한 인스턴스!\\r\\nuserStorage2.set({ name: \'Jane\' });\\r\\n\\r\\n// 실시간 동기화 과정:\\r\\n// 1. localStorage.setItem(\'user\', \'{\\"name\\":\\"Jane\\"}\')\\r\\n// 2. StorageInnerDocumentEvent 발생\\r\\n// 3. handleStorageEvent 실행\\r\\n// 4. 캐시 무효화 (isInitialized = false)\\r\\n// 5. 모든 구독자에게 notify()\\r\\n// 6. 컴포넌트 A 자동 리렌더링 → user = { name: \'Jane\' }\\r\\n```\\r\\n계속 만약에 게임을 하면서 시나리오를 그려가는 기분이 들고 재밌었습니다. \\r\\n<img width=\\"362\\" height=\\"275\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/1e3c04b6-bd99-4931-b8bc-bdd53cfc0f39\\" />\\r\\n\\r\\n_블로커로 작용했던 질문이라 지송.._\\r\\n\\r\\n\\r\\n### useEffect 구현 [0636fa7](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/13/commits/0636fa75945c9f1ba9c855bf17374bd327fb454d), [517e7f6](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/13/commits/517e7f6c41e4789b00cef8d48ba5bc0210a1b545)\\r\\n\\r\\n```js\\r\\ntype EffectCallback = () => void | (() => void);\\r\\n\\r\\nexport function useEffect(effect: EffectCallback, deps?: DependencyList): void {\\r\\n  const prevDepsRef = useRef<DependencyList | undefined>(undefined);\\r\\n  const cleanupRef = useRef<(() => void) | void>(undefined);\\r\\n  const isFirstRenderRef = useRef<boolean>(true);\\r\\n\\r\\n  const depsChanged =\\r\\n    deps === undefined || prevDepsRef.current === undefined || !shallowEquals(prevDepsRef.current, deps);\\r\\n\\r\\n  if (isFirstRenderRef.current || depsChanged) {\\r\\n    if (cleanupRef.current && typeof cleanupRef.current === \\"function\\") {\\r\\n      cleanupRef.current();\\r\\n    }\\r\\n\\r\\n    const cleanup = effect();\\r\\n    cleanupRef.current = cleanup;\\r\\n\\r\\n    prevDepsRef.current = deps;\\r\\n    isFirstRenderRef.current = false;\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\n사실 `useEffect`같은 경우에 구현이 어려울 것 같지 않아서 추가적으로 구현해봤습니다.\\r\\n`prevDepsRef`를 통해 이전 의존성을 저장하고, `cleanupRef`로 정리 함수를 관리하며 `isFirstRenderRef`로 첫 렌더링인지를 추적하도록 구현하였습니다.\\r\\n\\r\\n또한 의존성 관련해서도 deps가 undefined면 매번 실행하고, 첫 실행이거나 shallowEquals로 의존성이 변경되었을 때만 effect를 실행하도록 구현하였습니다. \\r\\n\\r\\n## 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n제가 추가적으로 작성한 createStorage 코드를 개선할 수 있으면 해보고 싶은데...뭔가 아이디어가 떠오르진 않는것 같습니다.\\r\\n사실 createObserver를 제거해도 될 것 같은데, 현재의 구독형태를 그대로 가져가고 싶어서 createObserver를 제거하지 않고 하이브리드 형태로 구현하였습니다.\\r\\n\\r\\n<details>\\r\\n<summary>createStorage 코드</summary>\\r\\n\\r\\n```ts\\r\\nimport { createObserver } from \\"./createObserver.ts\\";\\r\\n\\r\\ninterface StorageInstance<T> {\\r\\n  get(): T | null;\\r\\n  set(value: T): void;\\r\\n  reset(): void;\\r\\n  subscribe(listener: () => void): () => void;\\r\\n}\\r\\n\\r\\ninterface StorageEventDetail {\\r\\n  key: string;\\r\\n  oldValue: string | null;\\r\\n  newValue: string | null;\\r\\n}\\r\\n\\r\\nclass StorageInnerDocumentEvent extends CustomEvent<StorageEventDetail> {\\r\\n  static readonly eventName = \\"storage-inner-document\\";\\r\\n\\r\\n  constructor(key: string, oldValue: string | null, newValue: string | null) {\\r\\n    super(StorageInnerDocumentEvent.eventName, {\\r\\n      detail: { key, oldValue, newValue },\\r\\n    });\\r\\n  }\\r\\n}\\r\\n\\r\\nconst globalObservers = new Map<string, ReturnType<typeof createObserver>>();\\r\\n\\r\\nconst cacheInvalidators = new Map<string, () => void>();\\r\\n\\r\\nconst handleStorageEvent = (event: Event) => {\\r\\n  let targetKey: string | null = null;\\r\\n\\r\\n  if (event instanceof StorageEvent) {\\r\\n    targetKey = event.key;\\r\\n  } else if (event.type === \\"storage-inner-document\\") {\\r\\n    targetKey = (event as CustomEvent<StorageEventDetail>).detail.key;\\r\\n  }\\r\\n\\r\\n  if (targetKey && globalObservers.has(targetKey)) {\\r\\n    if (cacheInvalidators.has(targetKey)) {\\r\\n      cacheInvalidators.get(targetKey)!();\\r\\n    }\\r\\n\\r\\n    globalObservers.get(targetKey)!.notify();\\r\\n  }\\r\\n};\\r\\n\\r\\nlet globalListenersRegistered = false;\\r\\n\\r\\nconst getGlobalObserver = (key: string) => {\\r\\n  if (!globalObservers.has(key)) {\\r\\n    globalObservers.set(key, createObserver());\\r\\n\\r\\n    if (!globalListenersRegistered) {\\r\\n      window.addEventListener(\\"storage\\", handleStorageEvent);\\r\\n      window.addEventListener(StorageInnerDocumentEvent.eventName, handleStorageEvent);\\r\\n      globalListenersRegistered = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return globalObservers.get(key)!;\\r\\n};\\r\\n\\r\\nconst storageInstances = new Map<string, StorageInstance<unknown>>();\\r\\n\\r\\nexport const createStorage = <T>(key: string, storage = window.localStorage): StorageInstance<T> => {\\r\\n  if (storageInstances.has(key)) {\\r\\n    return storageInstances.get(key) as StorageInstance<T>;\\r\\n  }\\r\\n\\r\\n  const globalObserver = getGlobalObserver(key);\\r\\n\\r\\n  let cachedValue: T | null = null;\\r\\n  let isInitialized = false;\\r\\n\\r\\n  const invalidateCache = () => {\\r\\n    isInitialized = false;\\r\\n  };\\r\\n\\r\\n  cacheInvalidators.set(key, invalidateCache);\\r\\n\\r\\n  const get = (): T | null => {\\r\\n    if (!isInitialized) {\\r\\n      try {\\r\\n        const item = storage.getItem(key);\\r\\n        cachedValue = item ? JSON.parse(item) : null;\\r\\n        isInitialized = true;\\r\\n      } catch (error) {\\r\\n        console.error(`Error parsing storage item for key \\"${key}\\":`, error);\\r\\n        cachedValue = null;\\r\\n        isInitialized = true;\\r\\n      }\\r\\n    }\\r\\n    return cachedValue;\\r\\n  };\\r\\n\\r\\n  const set = (value: T) => {\\r\\n    try {\\r\\n      const oldValue = storage.getItem(key);\\r\\n      const newValue = JSON.stringify(value);\\r\\n\\r\\n      storage.setItem(key, newValue);\\r\\n\\r\\n      cachedValue = value;\\r\\n\\r\\n      window.dispatchEvent(new StorageInnerDocumentEvent(key, oldValue, newValue));\\r\\n    } catch (error) {\\r\\n      console.error(`Error setting storage item for key \\"${key}\\":`, error);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  const reset = () => {\\r\\n    try {\\r\\n      const oldValue = storage.getItem(key);\\r\\n      storage.removeItem(key);\\r\\n\\r\\n      cachedValue = null;\\r\\n\\r\\n      window.dispatchEvent(new StorageInnerDocumentEvent(key, oldValue, null));\\r\\n    } catch (error) {\\r\\n      console.error(`Error removing storage item for key \\"${key}\\":`, error);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  const subscribe = globalObserver.subscribe;\\r\\n\\r\\n  const instance = { get, set, reset, subscribe };\\r\\n\\r\\n  storageInstances.set(key, instance);\\r\\n\\r\\n  return instance;\\r\\n};\\r\\n\\r\\n```\\r\\n</details>\\r\\n\\r\\n## 학습 효과 분석\\r\\n\\r\\n**가장 큰 배움**: React의 성능 최적화가 단순히 memo나 useMemo를 사용하는 것이 아니라, **데이터 흐름과 리렌더링 트리거를 정확히 이해**하고 적절한 지점에 적용하는 것임을 깨달았습니다. 특히 useShallowSelector에서 상태 비교가 아닌 결과 비교로 수정한 경험이 인상 깊었습니다.\\r\\n\\r\\n**추가 학습 필요 영역**: 현재 구현한 훅들은 기본적인 메모이제이션에 집중되어 있는데, Concurrent Features와 관련된 고급 최적화 기법들을 더 학습하고 싶습니다.\\r\\n\\r\\n**실무 적용 가능성**: Context 분리 패턴과 selector 기반 상태 구독은 실제 프로젝트에서 바로 적용할 수 있을 것 같습니다. \\r\\n\\r\\n## 과제 피드백\\r\\n과제 자체가 어려운편이 아니라 스스로 학습을 하기 위한 동기 부여가 필요하지 않을까? 생각했습니다.\\r\\n\\r\\n# 학습 갈무리\\r\\n\\r\\n## 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n이전까지는 Fiber 아키텍쳐에 대해서 공부하기 싫어서 흐린눈하다가...이번 기회로 좀 해보자..! 싶어서 아주 얕게나마 공부해 보았습니다...\\r\\n\\r\\n리액트 렌더링은 React 16에서 도입된  React Fiber를 통해 설명할 수 있을 것 같습니다. 동기식 스택 기반 렌더링에서 비동기적이고 중단 가능한 렌더링으로의 패러다임 전환을 가능하게 했습니다. React Fiber는 우선순위 기반 업데이트 처리를 통해 향상된 사용자 경험을 제공합니다.\\r\\n\\r\\nReact 15까지 사용된 Stack Reconciler는 문제가 있었습니다. [리액트 공식문서](https://legacy.reactjs.org/docs/implementation-notes.html#future-directions)에서도 언급되는 내용인데, \\r\\n> Stack reconciler has inherent limitations such as being synchronous and unable to interrupt the work or split it in chunks\\r\\n>Stack reconciler는 동기적이며 작업을 중단하거나 이를 여러 조각으로 나눌 수 없다는 한계를 가지고 있습니다.\\r\\n\\r\\n\\r\\n```jsx\\r\\n// Stack Reconciler의 문제점을 보여주는 예시\\r\\nfunction heavyComponent() {\\r\\n  // 1000개의 아이템을 렌더링한다고 가정\\r\\n  return (\\r\\n    <div>\\r\\n      {Array(1000).fill(0).map((_, i) => (\\r\\n        <ComplexItem key={i} data={complexCalculation(i)} />\\r\\n      ))}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n여기서 complexCalculation이 엄청나게 무겁다고 하겠습니다. 이때 Stack Reconciler는 1000개를 모두 처리할 때까지 메인 스레드를 점유했습니다. 그 사이 사용자가 버튼을 클릭하거나 입력을 해도 반응하지 않았습니다.\\r\\n\\r\\n또한 호출 스택에 의존성을 두고 있어 컨텍스트를 잃지 않고는 작업을 일시정지 할 수 없고, 한 번의 패스로 전체 트리를 순회해야 했습니다. 게다가 모든 업데이트를 동일한 중요도로 처리하고 있어 긴급도에 따라 작업 처리를 할 수 없었습니다.\\r\\n\\r\\n이런 문제점을 해소하기 위해 나온 것이 Fiber 아키텍쳐입니다. Fiber은 큰 작업을 작게 나누자! 라는 것을 아이디어로 두고 있습니다.\\r\\n\\r\\n```js\\r\\n// 간소화된 fiber workloop\\r\\nfunction workLoop(isAsync) {\\r\\n  while (nextUnitOfWork !== null) {\\r\\n    // 작은 단위의 작업 수행\\r\\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\\r\\n    \\r\\n    // 비동기 모드에서는 시간을 체크\\r\\n    if (isAsync && shouldYield()) {\\r\\n      break; // 브라우저에게 제어권 양보\\r\\n    }\\r\\n  }\\r\\n}\\r\\n```\\r\\nReact는 계속 브라우저에게 우선순위가 높은 일에 대해 물어보게 됩니다. 사용자 입력이나 애니메이션 같은 급한 일이 있는 경우에는 작업을 양보하는 플로우라고 생각하면 될 것 같습니다.\\r\\n\\r\\n게다가 리액트 기본 단위의 변화도 존재하는데, 기존 React에서는 컴포넌트가 기본 단위였고 Fiber에서는 Fiber Node가 기본 단위가 되었습니다. 이렇게 변경된 이유는 아마 기존의 트리 방식보다 연결 리스트를 통해 처리하는 것이 언제든 멈추고 이어서 동작이 가능하기 때문이 아닐까 생각합니다.\\r\\n\\r\\n### React 렌더링의 전체 과정\\r\\n그렇다면 실제로 React 렌더링은 어떻게 이루어질까요? 크게 3단계로 나눠볼 수 있습니다.\\r\\n일단 리액트 렌더링은 두 가지 단계로 설명할 수 있습니다.\\r\\n#### 1. Render Phase (Reconciliation) -> 중단 가능함\\r\\n```js\\r\\nfunction renderPhase() {\\r\\n  // 중단 가능한 작업들을 주로함\\r\\n  // - 컴포넌트 함수 실행\\r\\n  // - Virtual DOM 생성\\r\\n  // - 이전 트리와 비교 (diffing)\\r\\n  // - 변경사항 목록 작성\\r\\n  \\r\\n  // 절대 하지 않는 일\\r\\n  // - DOM 조작\\r\\n  // - 사이드 이펙트 실행\\r\\n}\\r\\n```\\r\\nRender 단계는 여러 번 실행될 수 있고 중간에 급한 일이 생기면 처음부터 다시 시작할 수 있는 작업들을 수행합니다.\\r\\n\\r\\n#### 2. Commit Phase\\r\\n```\\r\\nfunction commitPhase() {\\r\\n  //  한 번에 모든 변경사항 적용\\r\\n  // - DOM 업데이트\\r\\n  // - useEffect 실행\\r\\n  // - ref 업데이트\\r\\n  // - 라이프사이클 메서드 호출\\r\\n}\\r\\n```\\r\\nCommit 단계는 절대 중단되지 않습니다. 이 단계는 또 다시 3개의 하위 단계로 나뉩니다.\\r\\n\\r\\n1. Before mutation: DOM 변경 전 (getSnapshotBeforeUpdate)\\r\\n2. Mutation: 실제 DOM 변경 (요소 추가/제거/수정)\\r\\n3. Layout: DOM 변경 후 (useLayoutEffect, componentDidMount)\\r\\n\\r\\n#### 우선순위 시스템과 Lane\\r\\n그렇다면 Fiber에서는 앞서 말한 \'급한 일\'을 어떻게 처리할까요?\\r\\nReact 18의 `Lane 시스템`은 우선순위를 비트로 관리합니다. 자세한 내용은 [React 톺아보기](https://goidle.github.io/react/in-depth-react18-lane/)블로그를 확인하면 좋을 듯한데, 아무튼 간략하게만 이해해보자면 Lane에는 다음과 같은 종류가 있습니다.\\r\\n\\r\\n```js\\r\\n// 우선순위 레벨 (숫자가 작을수록 높은 우선순위)\\r\\nconst SyncLane = 0b0000001;           // 동기 (가장 급함)\\r\\nconst InputContinuousLane = 0b0000100; // 사용자 입력\\r\\nconst DefaultLane = 0b0010000;         // 일반 업데이트\\r\\nconst TransitionLane = 0b1000000;      // 화면 전환\\r\\nconst IdleLane = 0b100000000000000;    // 한가할 때\\r\\n```\\r\\n이때 위처럼 비트마스크를 통해 우선순위를 비교한다고 생각하면 될 것 같습니다.\\r\\n\\r\\n리액트에서 업데이트가 발생하면 업데이트의 종류에 따라 Lane을 할당합니다. Reconciler는 이때 Lane들을 들고 있고, 해당 Lane 위의 업데이트들을 배치처리하게 됩니다.\\r\\n\\r\\n이런 Lane들이 가지고 있는 각각의 우선순위들에 따라 업데이트를 실행하는데\\r\\n\\r\\n```jsx\\r\\n// 사용자가 입력창에 타이핑 중\\r\\nfunction SearchInput() {\\r\\n  const [query, setQuery] = useState(\'\');\\r\\n  const [results, setResults] = useState([]);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <input \\r\\n        value={query}\\r\\n        onChange={(e) => {\\r\\n          // 고우선순위: 즉시 처리\\r\\n          setQuery(e.target.value);\\r\\n          \\r\\n          // 저우선순위: 나중에 처리\\r\\n          startTransition(() => {\\r\\n            setResults(search(e.target.value));\\r\\n          });\\r\\n        }}\\r\\n      />\\r\\n      <SearchResults results={results} />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\nReact 18에서 등장한 `startTransition`같은 경우에는 우선순위를 낮게 처리하여 사용자가 빠르게 타이핑하면, 입력 반영은 즉시 되지만 검색 결과는 타이핑이 끝날 때까지 기다릴 수 있게 됩니다.\\r\\n\\r\\n### 실제 렌더링 과정 예시\\r\\n```jsx\\r\\nfunction ModernApp() {\\r\\n  const [query, setQuery] = useState(\'\');\\r\\n  const [results, setResults] = useState([]);\\r\\n  const [isPending, startTransition] = useTransition();\\r\\n  \\r\\n  const handleSearch = (e) => {\\r\\n    const value = e.target.value;\\r\\n    \\r\\n    // 고우선순위: 즉시 스케줄링 (InputContinuousLane)\\r\\n    setQuery(value);\\r\\n    \\r\\n    // 저우선순위: 지연 스케줄링 (TransitionLane)\\r\\n    startTransition(() => {\\r\\n      setResults(heavySearch(value));\\r\\n    });\\r\\n    \\r\\n    // 실제 타임라인:\\r\\n    // T0: 사용자 타이핑\\r\\n    // T1: setQuery 업데이트 즉시 스케줄링\\r\\n    // T2: Render Phase - query 상태 업데이트, 입력창 즉시 반영\\r\\n    // T3: Commit Phase - DOM 업데이트 완료\\r\\n    // T4: startTransition 업데이트 낮은 우선순위로 스케줄링\\r\\n    // T5: 만약 사용자가 또 타이핑하면 T4의 작업은 중단되고 새로운 고우선순위 작업 시작\\r\\n    // T6: 타이핑이 멈추면 그때서야 heavySearch 결과 렌더링\\r\\n  };\\r\\n  \\r\\n  return (\\r\\n    <div>\\r\\n      <input \\r\\n        value={query}\\r\\n        onChange={handleSearch}\\r\\n        style={{ opacity: isPending ? 0.7 : 1 }}\\r\\n      />\\r\\n      <SearchResults results={results} />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n## 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n최적화 얘기가 나올때마다 그렇게 유명한 Kent C 아저씨도 \'성능 최적화는 항상 그 비용이 따르고, 언제나 이점을 제공하는것은 아닙니다.\'라고 이야기 하는 것을 본적이 있었습니다. 그런데 어떤 모회사에서는 [Stefano](https://attardi.org/why-we-memo-all-the-things/)의 글처럼 모든 부분을 메모하는 것을 컨벤션으로 둔다고 들었습니다. 저 글의 저자인 Stefano는 부분적인 최적화가 아니라 기본적으로 모든 컴포넌트를 메모하는 것이 더 효율적이라고 주장하는데, 모든 개발자들이 메모이제이션을 통한 최적화를 고려할 때 \'어떤 부분을 메모할지\'에 대해 고려할 지에 대한 비용을 줄이고 잠재적인 성능 저하를 방지하자 라고 이야기 하고 있습니다. 그리고 기본적으로 사용하는 것이 React 애플리케이션의 성능과 개발 효율성을 높이는 \'합리적인 기본값\'이다고 까지 했는데...\\r\\n\\r\\n재밌는 점은 React 팀의 [공식 블로그](https://react.dev/blog/2024/10/21/react-compiler-beta-release)에서 다음과 같이 언급했다는 점입니다.\\r\\n>Before rolling out the compiler at Meta, we discovered that only about 8% of React pull requests used manual memoization and that these pull requests took 31-46% longer to author[3](https://react.dev/blog/2024/10/21/react-compiler-beta-release#user-content-fn-3). This confirmed our intuition that manual memoization introduces cognitive overhead,\\r\\n> Meta에서 컴파일러를 출시하기 전에는 React 풀 리퀘스트의 약 8%만이 수동 메모화를 사용했으며, 이러한 풀 리퀘스트를 작성하는 데 31-46% 더 오래 걸리는 것을 발견했습니다. 이를 통해 수동 메모화가 인지적 오버헤드를 유발한다는 직관을 확인할 수 있었습니다.\\r\\n\\r\\n메타 사람들도 React 만들어놓고... 8퍼만 수동 메모이제이션을 한다는데... 내가... **해야할까?** 그리고 Stefano가 말한 \'개발 효율성을 높임\'에 대해 반하는 내용이 아닌가? 하는 생각도 들었습니다.\\r\\n\\r\\n또 다른 리액트 블로그 글에서는 이렇게 얘기하고 있습니다.\\r\\n\\r\\n> In our current APIs, this means applying the [useMemo](https://react.dev/reference/react/useMemo), [useCallback](https://react.dev/reference/react/useCallback), and [memo](https://react.dev/reference/react/memo) APIs to manually tune how much React re-renders on state changes. But manual memoization is a compromise. It clutters up our code, is easy to get wrong, and requires extra work to keep up to date.\\r\\n>  현재 API에서는 state 변경 시 React가 리렌더링하는 양을 수동으로 조정하기 위해 useMemo, useCallback, memo API를 적용하는 것을 의미합니다. 하지만 수동 메모화는 타협점입니다. 코드가 복잡해지고 잘못되기 쉬우며 최신 상태를 유지하기 위해 추가 작업이 필요합니다.\\r\\n\\r\\n솔직히 어느 정도는 무책임하다는 생각이 들었던 것 같습니다(ㅋㅋ). 아 그러니까 이제 컴파일러 나올거니까 이전 패러다임(API)는 다 불편했다 요런걸까요? ~~컴파일러를 앞광고하기 위한 수단으로 여태까지의 수동 메모이제이션 API들을 다...~~\\r\\n\\r\\n당연히 리액트 컴파일러는 게임 체인저라 생각하지만 당장 프로덕트에 적용하기에는 리스크가 있다고 생각합니다. 그래서 저 개인적으로 어떤 방식으로 메모이제이션을 접근해야할지를 생각해봤습니다.\\r\\n\\r\\n1. 무거운 연산은 측정을 해보자.\\r\\n2. 명확한 케이스에만 메모이제이션을 하자. (복잡한 계산이라던가...등등)\\r\\n3. 팀 컨벤션을 정하자.\\r\\n\\r\\n하지만 실무 경험상 1, 2번은 정말 체감상 느리다고 느껴지는 특수한 상황에서만 의미가 있습니다. 복잡한 계산이나 대용량 데이터 처리 같은 명확한 성능 병목점이 아닌 이상, 대부분의 경우 메모이제이션으로 인한 성능 개선을 체감하기 어렵습니다.\\r\\n따라서 3번 팀 컨벤션이 가장 중요한 방향이라고 생각합니다. 체감되지 않는 메모이제이션 보다는 팀 전체의 개발 효율성과 코드 일관성이 더 큰 가치를 가진다고 생각되어서 입니다. \\r\\n\\r\\n메모이제이션은 갑론을박도 많고, 리액트 컴파일러가 안정적으로 도입되기 전까지는 계속 팀 내에서도 논의될 만한 주제라고 생각합니다. 그러나 메모이제이션을 하는 것에 있어서도 개발자가 잘 파악하고 사용해야한다는 점, 어느정도 그를 파악하는 것에 병목이 있다는 점, 그리고 그 병목 리소스를 생각하는 것에 비해 그렇게 체감할만한 차이가 현대 브라우저에서는 없다는 점을 생각했을때 명확한 성능 이슈가 측정되었을때만 적용하고 그보단 팀에서 합의된 컨벤션이 있다면 그를 따르는 것이 좋지 않을까 생각합니다.\\r\\n\\r\\n### 출처\\r\\nhttps://kentcdodds.com/blog/usememo-and-usecallback\\r\\nhttps://attardi.org/why-we-memo-all-the-things/\\r\\nhttps://react.dev/blog/2024/02/15/react-labs-what-we-have-been-working-on-february-2024\\r\\nhttps://react.dev/blog/2024/10/21/react-compiler-beta-release\\r\\n## 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n취준일때부터 들었던 얘기였는데...Context는 전역 상태 관리 도구가 아니라 `의존성 주입 도구`로 바라보는 것이 중요하다고 생각합니다. Redux의 메인테이너인 Mark Erikson이 쓴 엄청 [유명한 글](https://blog.isquaredsoftware.com/2021/01/context-redux-differences/)이 하나 있는데, 해당 글에서는 Redux와 Context를 비교하면서 상태관리란 4가지 필수 요구사항이 있다고 기술합니다.\\r\\n\\r\\n1. 상태 저장 (Storing state values)\\r\\n2. 상태 읽기 (Reading state values)\\r\\n3. 상태 업데이트 (Updating state values)\\r\\n4. 변경 알림 (Notifying about changes)\\r\\n위 네 개중에 상태를 업데이트하는 부분을 Context API는 충족하지 못합니다. 값을 읽고 저장하고 변경을 알릴 수 있지만 업데이트하는 내장 메커니즘이 없습니다. 그래서 Context + useState(혹은 useReducer)를 통해 상태 관리가 가능하다고 얘기하는 것입니다.\\r\\n\\r\\n잠깐 혹자들이 말하는 Context는 전역 상태 관리 도구가 아니라 `의존성 주입 도구`다에 대해서 설명을 해보겠습니다.\\r\\n일단 SOLID 법칙을 생각해보면 그중에 D(Dependency Injection)가 해당하는 부분이라 할 수 있습니다.\\r\\n\\r\\n이 의존성 주입은 3가지 요소로 구성됩니다.\\r\\n1. 의존성: 어떤 객체가 동작하기 위해 필요한 다른 객체\\r\\n2. 주입: 의존성을 외부에서 제공하는 행위\\r\\n3. 역전: 의존성을 직접 생성하지 않고 외부에서 받는 제어의 역전\\r\\n\\r\\n이것만 봐서는 당연히 어떤 말인지 모를텐데, 간단하게 이야기하자면 \\"필요한 도구를 직접 만들지 말고, 누군가 갖다 주는 걸 쓰자\\"라고 생각합니다. 개발자가 코드를 짜기 위해서 맥북을 가져오고 하는게 아니라 누군가가 최신식 맥북을 가져다 주는...암튼 토스의 두에싸 같은 느낌이랄까요.(우하하)\\r\\n\\r\\n다시 컴포넌트로 돌아가보자면, 상위 컴포넌트에서 필요한 도구들을 준비하고 Context라는 통로를 통해서 하위 컴포넌트에 전달해주면 이 도구들을 받기만해도 된다! 요런 느낌이라 생각합니다.\\r\\n\\r\\nContext와 useState를 조합하면 props drilling 문제는 해결되지만, `선택적 구독`이 불가능합니다. \\r\\n\\r\\n```jsx\\r\\n// Context + useState 조합\\r\\nconst AppStateContext = createContext();\\r\\n\\r\\nfunction AppStateProvider({ children }) {\\r\\n  const [user, setUser] = useState(null);\\r\\n  const [theme, setTheme] = useState(\'light\');\\r\\n  const [cart, setCart] = useState([]);\\r\\n  const [notifications, setNotifications] = useState([]);\\r\\n  \\r\\n  // 이 value 객체가 매번 새로 생성됨\\r\\n  const value = {\\r\\n    user, setUser,\\r\\n    theme, setTheme,\\r\\n    cart, setCart,\\r\\n    notifications, setNotifications\\r\\n  };\\r\\n  \\r\\n  return (\\r\\n    <AppStateContext.Provider value={value}>\\r\\n      {children}\\r\\n    </AppStateContext.Provider>\\r\\n  );\\r\\n}\\r\\n\\r\\n// 이 컴포넌트는 theme만 필요함\\r\\nfunction ThemeButton() {\\r\\n  const { theme, setTheme } = useContext(AppStateContext);\\r\\n  console.log(\'ThemeButton 렌더링\'); // user, cart, notifications 변경 시에도 출력됨!\\r\\n  \\r\\n  return (\\r\\n    <button onClick={() => setTheme(theme === \'light\' ? \'dark\' : \'light\')}>\\r\\n      {theme}\\r\\n    </button>\\r\\n  );\\r\\n}\\r\\n\\r\\n// 이 컴포넌트는 cart만 필요함  \\r\\nfunction CartCounter() {\\r\\n  const { cart } = useContext(AppStateContext);\\r\\n  console.log(\'CartCounter 렌더링\'); // user, theme, notifications 변경 시에도 출력됨!\\r\\n  \\r\\n  return <span>장바구니: {cart.length}개</span>;\\r\\n}\\r\\n```\\r\\nuser가 바뀌면 theme만 쓰는 컴포넌트도 리렌더링되고, cart가 바뀌면 notifications만 쓰는 컴포넌트도 리렌더링됩니다. Context는 전체 value가 바뀌었는지만 확인하기 때문입니다. 반면 Zustand 같은 전역 상태 라이브러리는 선택적 구독이 가능합니다. 코드를 작성하면 너무 길어질것 같아서...남기진 않는데, 비슷하게 작성한뒤 확인하면 user가 바뀌어도 ThemeButton과 CartCounter는 리렌더링되지 않습니다. 각 컴포넌트가 정말 필요한 상태만 구독하기 때문입니다. 따라서 만약 전역상태 관리를 필요로 정말 필요로한다면 전역상태 관리 라이브러리를 고려해보는 것이 어느정도의 관심사의 분리와 성능을 가져갈 수 있는 방법이라고 생각합니다.\\r\\n\\r\\nContext와 전역상태 라이브러리의 차이점에 대해서만 위에서 언급을 했는데, 그 둘의 조합을 이야기 해보자면, Context는 스코프를 지정하는 역할로도 사용됩니다.\\r\\n\\r\\nZustand, Redux, Jotai 같은 전역 상태 라이브러리들의 가장 큰 특징이자 한계는 `정말로 전역`이라는 점입니다.\\r\\n\\r\\n```js\\r\\n// Zustand store는 앱 전체에서 하나의 인스턴스만 존재\\r\\nconst useUserStore = create((set) => ({\\r\\n  currentUser: null,\\r\\n  setCurrentUser: (user) => set({ currentUser: user })\\r\\n}));\\r\\n\\r\\nfunction App() {\\r\\n  return (\\r\\n    <div>\\r\\n      <UserProfile />     {/* 동일한 store 사용 */}\\r\\n      <AdminPanel />      {/* 동일한 store 사용 */}\\r\\n      <GuestView />       {/* 동일한 store 사용 */}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n요런 상황에서 Context와 함께 조합해서 사용하면 스코프 지정이 가능합니다.\\r\\n\\r\\n```js\\r\\nfunction PersonalTodos() {\\r\\n  const todos = useTodoStore(state => state.todos);\\r\\n  const addTodo = useTodoStore(state => state.addTodo);\\r\\n  \\r\\n  // 개인 할 일에 추가해도 팀 할 일에는 영향 없음\\r\\n  return (\\r\\n    <div>\\r\\n      <button onClick={() => addTodo(\'개인 미팅 준비\')}>\\r\\n        개인 할 일 추가\\r\\n      </button>\\r\\n      <ul>\\r\\n        {todos.map(todo => <li key={todo.id}>{todo.text}</li>)}\\r\\n      </ul>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction TeamTodos() {\\r\\n  const todos = useTodoStore(state => state.todos);  // 완전히 다른 todos 배열\\r\\n  const addTodo = useTodoStore(state => state.addTodo);\\r\\n  \\r\\n  return (\\r\\n    <div>\\r\\n      <button onClick={() => addTodo(\'스프린트 계획\')}>\\r\\n        팀 할 일 추가\\r\\n      </button>\\r\\n      <ul>\\r\\n        {todos.map(todo => <li key={todo.id}>{todo.text}</li>)}\\r\\n      </ul>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n이렇게 \'너는 이 스코프에서 동작하는 상태야 다른데서는 안쓸거야\'라는 늬앙스로 스코프를 지정해 줄 수 있게되는 것입니다.\\r\\n\\r\\n아무튼 정리하자면 Context는 상태관리가 아닌 의존성 주입의 도구이고, Context를 이용해서 스코프를 정의해 줄 수 있다고 생각합니다.\\r\\n\\r\\n### 출처\\r\\nhttps://blog.isquaredsoftware.com/2021/01/context-redux-differences/\\r\\n\\r\\n# 리뷰 받고 싶은 내용\\r\\n\\r\\n### 1. [추가한 테스트](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/13/commits/484b483ae794837ec30b2d364cf464c80c338879)에 대하여, 해당 테스트가 정말 의미가 있을지 궁금합니다.\\r\\n제가 검증하고 싶은 내용은 외부적으로 강제로 컴포넌트를 통해서가 아닌 수동으로 로컬스토리지를 조작하는 상황을 검증하고 싶은데, 해당 테스트를 통해 그부분을 검증할 수 있을까? 하는 생각이 들어서요! 이런 부분에 대해서는 검증을 하지 않는 것이 맞는 선택인지? 아니면 임의적으로라도 저렇게 검증할 수 있다면 좋은 선택일지..궁금합니다. 또한 만약에 테스트를 한다면 어떻게 검증 가능할까요?\\r\\n추가한 코드는 다음과 같습니다.\\r\\n```js\\r\\n    it(\\"외부에서 localStorage 직접 변경 시 감지해야 한다\\", () => {\\r\\n      const storage1 = createStorage<{ name: string }>(\\"external-change-test\\");\\r\\n      const storage2 = createStorage<{ name: string }>(\\"external-change-test\\");\\r\\n\\r\\n      const { result: result1 } = renderHook(() => useStorage(storage1));\\r\\n      const { result: result2 } = renderHook(() => useStorage(storage2));\\r\\n\\r\\n      // 초기값 설정\\r\\n      act(() => storage1.set({ name: \\"John\\" }));\\r\\n      expect(result1.current).toEqual({ name: \\"John\\" });\\r\\n      expect(result2.current).toEqual({ name: \\"John\\" });\\r\\n\\r\\n      act(() => {\\r\\n        const newData = { name: \\"Jane\\" };\\r\\n        localStorage.setItem(\\"external-change-test\\", JSON.stringify(newData));\\r\\n\\r\\n        const customEvent = new CustomEvent(\\"storage-inner-document\\", {\\r\\n          detail: {\\r\\n            key: \\"external-change-test\\",\\r\\n            oldValue: JSON.stringify({ name: \\"John\\" }),\\r\\n            newValue: JSON.stringify(newData),\\r\\n          },\\r\\n        });\\r\\n\\r\\n        window.dispatchEvent(customEvent);\\r\\n      });\\r\\n\\r\\n      expect(result1.current).toEqual({ name: \\"Jane\\" });\\r\\n      expect(result2.current).toEqual({ name: \\"Jane\\" });\\r\\n    });\\r\\n\\r\\n    it(\\"다른 탭에서의 변경을 감지해야 한다 (storage 이벤트)\\", () => {\\r\\n      const storage = createStorage<{ theme: string }>(\\"cross-tab-test\\");\\r\\n      const { result } = renderHook(() => useStorage(storage));\\r\\n\\r\\n      // 초기값 설정\\r\\n      act(() => storage.set({ theme: \\"light\\" }));\\r\\n      expect(result.current).toEqual({ theme: \\"light\\" });\\r\\n\\r\\n      act(() => {\\r\\n        const newData = { theme: \\"dark\\" };\\r\\n        localStorage.setItem(\\"cross-tab-test\\", JSON.stringify(newData));\\r\\n\\r\\n        window.dispatchEvent(\\r\\n          new StorageEvent(\\"storage\\", {\\r\\n            key: \\"cross-tab-test\\",\\r\\n            oldValue: JSON.stringify({ theme: \\"light\\" }),\\r\\n            newValue: JSON.stringify(newData),\\r\\n            storageArea: localStorage,\\r\\n          }),\\r\\n        );\\r\\n      });\\r\\n\\r\\n      expect(result.current).toEqual({ theme: \\"dark\\" });\\r\\n    });\\r\\n```\\r\\n\\r\\n### 2. useEffect 추가 구현부\\r\\n\\r\\n```js\\r\\ntype EffectCallback = () => void | (() => void);\\r\\n\\r\\nexport function useEffect(effect: EffectCallback, deps?: DependencyList): void {\\r\\n  const prevDepsRef = useRef<DependencyList | undefined>(undefined);\\r\\n  const cleanupRef = useRef<(() => void) | void>(undefined);\\r\\n  const isFirstRenderRef = useRef<boolean>(true);\\r\\n\\r\\n  const depsChanged =\\r\\n    deps === undefined || prevDepsRef.current === undefined || !shallowEquals(prevDepsRef.current, deps);\\r\\n\\r\\n  if (isFirstRenderRef.current || depsChanged) {\\r\\n    if (cleanupRef.current && typeof cleanupRef.current === \\"function\\") {\\r\\n      cleanupRef.current();\\r\\n    }\\r\\n\\r\\n    const cleanup = effect();\\r\\n    cleanupRef.current = cleanup;\\r\\n\\r\\n    prevDepsRef.current = deps;\\r\\n    isFirstRenderRef.current = false;\\r\\n  }\\r\\n}\\r\\n```\\r\\n위와 같이 useEffect를 구현했는데 지금은 렌더링 시에 동기적으로 effect를 실행하는데, 사실 React의 실제 useEffect는 렌더링이 완료된 후 비동기적으로 실행되어 제 코드와 조금 다르게 느껴집니다. 어떻게하면 effect를 비동기적으로 실행시킬 수 있을까요? queueMicrotask를 쓰라는데...그렇게하니까 테스트가 깨져서...전반적으로 테스트를 바꿔야할지..? 그렇다면 waitfor을 통해서 호출을 비동기적으로 기다리게 해야할거같은데 useEffect는 사실 \'비동기적\'으로 돌아가는것이지 \'비동기\'함수인것은 아니라고 생각돼서 목적이 맞는것인지 의문입니다.\\r\\n\\r\\n### 출처\\r\\nhttps://www.velotio.com/engineering-blog/react-fiber-algorithm\\r\\nhttps://dev.to/thee_divide/reconciliation-react-rendering-phases-56g2\\r\\nhttps://goidle.github.io/react/in-depth-react-reconciler_2/\\r\\nhttps://legacy.reactjs.org/docs/implementation-notes.html#future-directions","created_at":"2025-07-19T13:38:17Z","updated_at":"2025-07-26T13:29:36Z","closed_at":null,"merged_at":null,"merge_commit_sha":"17e8d7b72cdd31e3216b6e4336a642c47ea3ed39","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/13/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/13/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/13/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/517e7f6c41e4789b00cef8d48ba5bc0210a1b545","head":{"label":"YeongseoYoon-hanghae:main","ref":"main","sha":"517e7f6c41e4789b00cef8d48ba5bc0210a1b545","user":{"login":"YeongseoYoon-hanghae","id":191664522,"node_id":"U_kgDOC2yRig","avatar_url":"https://avatars.githubusercontent.com/u/191664522?v=4","gravatar_id":"","url":"https://api.github.com/users/YeongseoYoon-hanghae","html_url":"https://github.com/YeongseoYoon-hanghae","followers_url":"https://api.github.com/users/YeongseoYoon-hanghae/followers","following_url":"https://api.github.com/users/YeongseoYoon-hanghae/following{/other_user}","gists_url":"https://api.github.com/users/YeongseoYoon-hanghae/gists{/gist_id}","starred_url":"https://api.github.com/users/YeongseoYoon-hanghae/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YeongseoYoon-hanghae/subscriptions","organizations_url":"https://api.github.com/users/YeongseoYoon-hanghae/orgs","repos_url":"https://api.github.com/users/YeongseoYoon-hanghae/repos","events_url":"https://api.github.com/users/YeongseoYoon-hanghae/events{/privacy}","received_events_url":"https://api.github.com/users/YeongseoYoon-hanghae/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022450655,"node_id":"R_kgDOPPFb3w","name":"front_6th_chapter1-3","full_name":"YeongseoYoon-hanghae/front_6th_chapter1-3","private":false,"owner":{"login":"YeongseoYoon-hanghae","id":191664522,"node_id":"U_kgDOC2yRig","avatar_url":"https://avatars.githubusercontent.com/u/191664522?v=4","gravatar_id":"","url":"https://api.github.com/users/YeongseoYoon-hanghae","html_url":"https://github.com/YeongseoYoon-hanghae","followers_url":"https://api.github.com/users/YeongseoYoon-hanghae/followers","following_url":"https://api.github.com/users/YeongseoYoon-hanghae/following{/other_user}","gists_url":"https://api.github.com/users/YeongseoYoon-hanghae/gists{/gist_id}","starred_url":"https://api.github.com/users/YeongseoYoon-hanghae/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YeongseoYoon-hanghae/subscriptions","organizations_url":"https://api.github.com/users/YeongseoYoon-hanghae/orgs","repos_url":"https://api.github.com/users/YeongseoYoon-hanghae/repos","events_url":"https://api.github.com/users/YeongseoYoon-hanghae/events{/privacy}","received_events_url":"https://api.github.com/users/YeongseoYoon-hanghae/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/YeongseoYoon-hanghae/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/YeongseoYoon-hanghae/front_6th_chapter1-3/deployments","created_at":"2025-07-19T05:22:07Z","updated_at":"2025-07-24T21:52:06Z","pushed_at":"2025-07-24T21:52:02Z","git_url":"git://github.com/YeongseoYoon-hanghae/front_6th_chapter1-3.git","ssh_url":"git@github.com:YeongseoYoon-hanghae/front_6th_chapter1-3.git","clone_url":"https://github.com/YeongseoYoon-hanghae/front_6th_chapter1-3.git","svn_url":"https://github.com/YeongseoYoon-hanghae/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":117,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/13"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/13"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/13"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/13/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/13/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/13/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/517e7f6c41e4789b00cef8d48ba5bc0210a1b545"}},"author_association":"FIRST_TIME_CONTRIBUTOR","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/14","id":2679066369,"node_id":"PR_kwDOPMCTuc6fr08B","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/14","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/14.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/14.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/14","number":14,"state":"open","locked":false,"title":"[5팀 이지훈] Chapter 1-3. React, Beyond the Basics","user":{"login":"JiHoon-0330","id":58219394,"node_id":"MDQ6VXNlcjU4MjE5Mzk0","avatar_url":"https://avatars.githubusercontent.com/u/58219394?v=4","gravatar_id":"","url":"https://api.github.com/users/JiHoon-0330","html_url":"https://github.com/JiHoon-0330","followers_url":"https://api.github.com/users/JiHoon-0330/followers","following_url":"https://api.github.com/users/JiHoon-0330/following{/other_user}","gists_url":"https://api.github.com/users/JiHoon-0330/gists{/gist_id}","starred_url":"https://api.github.com/users/JiHoon-0330/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JiHoon-0330/subscriptions","organizations_url":"https://api.github.com/users/JiHoon-0330/orgs","repos_url":"https://api.github.com/users/JiHoon-0330/repos","events_url":"https://api.github.com/users/JiHoon-0330/events{/privacy}","received_events_url":"https://api.github.com/users/JiHoon-0330/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n[https://hanghae-plus.github.io/front_6th_chapter1-3/](https://hanghae-plus.github.io/front_6th_chapter1-3/)\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n이번 주차 과제를 진행한 방식이다.\\r\\n1. 빠르게 구현하기\\r\\n2. 리팩토링/학습\\r\\n3. 과제 이외의 부분 생각해보기\\r\\n\\r\\n1주차의 경우엔 학습을 하면서 코드를 갈아엎는 경우가 많았고, 코드를 갈아엎는데 시간을 많이 소비한 나머지 제출 마지막 날까지 기능을 구현에만 집중을 했다.\\r\\n\\r\\n2주차의 경우엔 매일 학습을 한 내용을 정리했다. 글을 정리하는 과정에서 시간을 많이 사용했고 시간 안에 과제를 다 할 수 있을까? 라는 생각이 들기도 했다.\\r\\n\\r\\n빠르게 구현 -> 리팩토링 및 학습 -> 과제 이외의 부분을 생각해보는 플로우는 빠르게 구현하기 때문에 과제 제출에 대한 부담감이 적을 것 같았고, 과제 전체 내용을 경험 한 뒤이기 때문에 좀 더 큰 그림을 그리며 학습이 가능할 것 이라 생각했다.\\r\\n\\r\\n> 3주차 과제 진행 방식은 7팀 박의근님의 2주차 회고글을 보고 아이디어를 얻었다.\\r\\n>![의근님 글 캡쳐](https://velog.velcdn.com/images/jihoon0330/post/2c74bf9c-9531-4dfd-a3e2-7b7baa707d56/image.png)\\r\\n> [7팀 박의근님 2주차 회고글](https://velog.io/@bug_y_not/%EC%96%B4%EB%95%A0%EC%96%B4-7%EC%9B%94-%EC%85%8B%EC%A7%B8-%EC%A3%BC)\\r\\n\\r\\n\\r\\n덕분에 이번 주차는 월요일에 기능 구현을 모두 끝낼 수 있었다.\\r\\n![빠르게 구현하기](https://velog.velcdn.com/images/jihoon0330/post/02ecb358-94a6-4fa0-a559-5376a1e93232/image.png)\\r\\n\\r\\n그동안 리액트를 써왔기 때문에 막히는 부분이 없을 거라 생각했는데, 생각보다 막히는 부분이 많이 있었다. 테스트 코드를 통과했지만 잘못 알고있는 부분도 있었다. 이런 과정을 겪으면서 잘못 알고 있는 부분을 최소화 하기 위해 꾸준한 공부가 필요하다고 느꼈다.\\r\\n\\r\\n___\\r\\n\\r\\n<!-- ### 기술적 성장 -->\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n### 새로 학습한 개념\\r\\n\\r\\n#### \'===\' 와 \'Object.is\' 의 차이점과 리액트에서 \'Object.is\' 를 사용하는 이유\\r\\n\\r\\n리액트에서 값이 변경되었는지 비교할 때 `Object.is` 를 사용하는 것은 모르고 있었다. 문서를 살펴보니 문서상에 `Object.is` 를 사용한다고 명시되어 있어서 알게 되었다. 두 비교 연산자의 차이점은 숫자를 비교하는 부분에서 차이가 있었다.\\r\\n\\r\\n|| `Object.is(value1, value2)`| `value1 === value2`|\\r\\n| :- | :- | :- |\\r\\n| `NaN` | `Object.is(NaN, NaN)`은 `true`를 반환한다.| `NaN === NaN`은 `false`를 반환한다.|\\r\\n| `+0`/`-0` | `Object.is(+0, -0)`은 `false`를 반환한다.| `+0 === -0`은 `true`를 반환한다.|\\r\\n| 사용 목적 | `NaN`과 부호 있는 0을 정확히 구분하여 완전한 값 동등성을 판단할 때 사용된다. | 타입과 값이 동일한지 판단하는 일반적인 비교 연산자다.|\\r\\n---\\r\\n\\r\\n#### 비교 표를 기준으로 Object.is 가 더 알맞은 이유:\\r\\n- NaN 이 NaN 으로 바뀐 경우 UI 나 계산 로직이 달라지는 부분은 없기 때문에 값이 바뀌었다 판단하는건 불필요하다.\\r\\n- 0 이라는 숫자도 부호에 따라 다른 계산 값을 가진다. 결과 값 업데이트가 필요하다.\\r\\n```js\\r\\n1 / 0 // Infinity\\r\\n1 / -0  // -Infinity\\r\\n(0).toLocaleString() // \\"0\\"\\r\\n(-0).toLocaleString() // \\"-0\\"\\r\\nIntl.NumberFormat().format(0) // \\"0\\"\\r\\nIntl.NumberFormat().format(-0) // \\"-0\\"\\r\\n```\\r\\n\\r\\n> 메이저 버전이 업데이트 될 때 마다 문서 다시 한 번 읽어보기!\\r\\n> `===` 연산자의 경우 수학적인 개념에 초점이 맞춰져 있다고 한다.\\r\\n> `Object.is` 연산자의 경우 값 자체를 비교하는 것에 초점이 맞춰져 있다고 한다.\\r\\n\\r\\n___\\r\\n\\r\\n### 기존 지식의 재발견\\r\\n\\r\\n#### useDeepMemo, useAutoCallback\\r\\n\\r\\nuseMemo, useCallback, memo 화 같은 것들을 왜 필요한 경우에만 사용하길 권장하는지 이해할 수 있었다. 값을 비교하는 과정이 추가되는데 이게 오히려 더 비싼 작업일 수 있다.\\r\\nuseMemo, useCallback 과 같은 훅을 이용할 때 커스텀하게 값일 비교하는 훅을 만드는 것은 생각해보지 못한 것 같다. 리액트에서 제공하는 훅들을 그대로 사용하지 않고 상황에 알맞게 변형해서 사용할 수 있을 것 같다.\\r\\n\\r\\n\\r\\n#### setState\\r\\n\\r\\nsetState 를 사용할 때 이전 값을 그대로 리턴하는 경우 참조가 유지되어 리렌더링이 발생하지 않는 것을 알게 되었다.\\r\\n\\r\\n```js\\r\\nsetState((prev) => {\\r\\n  if( ... ) {\\r\\n    // 참조가 유지됨\\r\\n    return prev\\r\\n  }\\r\\n\\r\\n  return ...\\r\\n})\\r\\n```\\r\\n\\r\\n#### createElement\\r\\n\\r\\nmemo.ts 파일에서 JSX 작성하는 대신 리액트 엘리먼트를 생성해야 했다.\\r\\n처음엔 함수를 그대로 호출하는 형태로 작성을 했다.\\r\\n테스트를 통과해서 잘못된 줄 모르고 있다가 다른 사람들의 코드를 보고 잘못된 걸 깨달았다.\\r\\n\\r\\n우선 올바른 방법은 createElement 를 사용해줘야 JSX 를 사용한 것과 동일하게 실행할 수 있다.\\r\\n\\r\\n```js\\r\\nComponent(props) // x\\r\\ncreateElement(Component, props) // o\\r\\n```\\r\\n\\r\\n2주차 과제에서 진행한 JSX 를 변환하는 과정을 생각해 보면 이해하기 쉽다.\\r\\n\\r\\ncreateElement 사용하는 것이 올바른 방법인 것은 알았지만, 함수를 호출하는 방식도 테스트는 통과 했기에 어떻게 다른지 궁금했다.\\r\\n\\r\\n리액트 프로젝트를 하나 생성해 테스트를 진행했다.\\r\\n\\r\\n1) UI 만 렌더링 하는 경우\\r\\nUI 만 렌더링 하는 경우는 테스트 코드와 동일한 환경이다. 이 때는 JSX 를 사용한 것과 동일하게 동작하는 것 처럼 보인다.\\r\\n\\r\\n2) 테스트 컴포넌트 내부에서 훅을 사용하는 경우\\r\\n상위 컴포넌트에서, 테스트 컴포넌트 내부에 선언한 훅을 사용중인 것으로 인식이 된다. 이때 조건부로 함수를 호출하면 이전 렌더링과 훅 개수가 다르다는 오류 메세지가 나온다.\\r\\n![훅 개수가 다름](https://velog.velcdn.com/images/jihoon0330/post/aeb62192-8670-4192-bb0b-d287b8bade06/image.png)\\r\\n\\r\\n함수를 호출하는 것은 컴포넌트로 동작하지 않기 때문에 컴포넌트 생명주기와 관련된 부분에서 오류가 발생한다.\\r\\n테스트를 통과할 수 있었던 이유는 단순히 JSX 만 리턴하는 역할이었기 때문이다.\\r\\n\\r\\n관련된 내용은 공식 문서에서도 자세하게 나와있다. [React 컴포넌트 함수를 직접 호출하지 마세요](https://ko.react.dev/reference/rules/react-calls-components-and-hooks#never-call-component-functions-directly)\\r\\n\\r\\n```js\\r\\nfunction Person() {\\r\\n  // useState 훅은 Person 을 함수로 호출했기 때문에 부모 컴포넌트인 App 컴포넌트에서 선언한 것처럼 동작한다.\\r\\n  const [name, setName] = useState(\\"\\");\\r\\n\\r\\n  return (\\r\\n    <div>...</div>\\r\\n  );\\r\\n}\\r\\n\\r\\nfunction App() {\\r\\n  const [count, setCount] = useState(0);\\r\\n\\r\\n  const handleClick = () => {\\r\\n    setCount((prev) => prev + 1);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      {/* Person 함수를 호출하면 컴포넌트로 인식되지 않는다. JSX 를 변환하는 과정이 없기 때문 */}\\r\\n      {/* Person 함수를 호출하면서 함수 내부가 실행된다. 이때 App 컴포넌트에서 Person 내부에 선언한 훅을 실행하는 것으로 인식이 된다. */}\\r\\n      {count > 0 ? Person() : null}\\r\\n      <button type=\\"button\\" onClick={handleClick}>\\r\\n        +\\r\\n      </button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n<!-- ### 자랑하고 싶은 코드 -->\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n___\\r\\n\\r\\n### 코드를 작성하면서 고민한 부분들\\r\\n\\r\\n#### useRef 구현\\r\\n\\r\\nuseRef 를 구현하면서 일반적인 초기화 방식을 사용했다. useRef 함수에서 이미 계산된 값을 인자로 받기 때문에 지연 초기화가 필요 없다고 생각을 했다. 다른 분들의 코드를 살펴보니 지연 초기화를 하신 분들이 많아서 나도 지연 초기화를 해야 하나 생각이 들었다.\\r\\n\\r\\nuseState 에서 지연 초기화가 등장한 이유를 다시 생각해 봤다.\\r\\n> createInitialTodos()의 결과는 초기 렌더링에만 사용되지만, 여전히 모든 렌더링에서 이 함수를 호출합니다. 이는 큰 배열을 생성하거나 값비싼 계산을 수행하는 경우 낭비일 수 있습니다.\\r\\n\\r\\n리액트에서 지연 초기화는 값비싼 계산을 수행하는 경우와, 큰 배열을 생성하는 경우 권장된다.\\r\\nuseRef 함수에서는 initialValue 값을 그대로 할당하고 있기 때문에 작은 객체를 생성한다고 판단이 되었다. 만약 initialValue 라는 값에 매우 큰 배열이 들어오더라도 자바스크립트에서는 참조를 전달하기 때문에 useRef 함수 내에서 매우 큰 배열이 생성되지는 않기 때문에 지연 초기화를 쓰지 않기로 결정했다.\\r\\n\\r\\n```js\\r\\nexport function useRef(initialValue) {\\r\\n  const [value] = useState({ current: initialValue });\\r\\n  return value;\\r\\n}\\r\\n```\\r\\n\\r\\n#### useShallowState 구현하기\\r\\n\\r\\n기존 set 함수의 형태를 만족하기 위해 인자로 값과 함수 모두 받을 수 있도록 만들었다.\\r\\nuseState 의 set 함수는 같은 참조를 반환하기 때문에 useAutoCallback 을 사용했다.\\r\\n구현을 하면서 타입추론이 가능한 코드를 작성하기 위한 고민을 했습니다.\\r\\n\\r\\n```ts\\r\\nexport const useShallowState = <T>(initialValue: T): [T, Dispatch<SetStateAction<T>>] => {\\r\\n  // useState를 사용하여 상태를 관리하고, shallowEquals를 사용하여 상태 변경을 감지하는 훅을 구현합니다.\\r\\n  const [value, _setValue] = useState(initialValue);\\r\\n  const setValue = useAutoCallback((value: SetStateAction<T>) => {\\r\\n    _setValue((prev) => {\\r\\n      const next = isFunction(value) ? value(prev) : value;\\r\\n      return shallowEquals(prev, next) ? prev : next;\\r\\n    });\\r\\n  });\\r\\n\\r\\n  return [value, setValue];\\r\\n};\\r\\n\\r\\nfunction isFunction<T>(value: SetStateAction<T>): value is (prev: T) => T {\\r\\n  return typeof value === \\"function\\";\\r\\n}\\r\\n```\\r\\n\\r\\n#### zustand 와 비교해보기\\r\\n\\r\\n직접 작성한 useShallowSelector 코드와 zustand 의 [useShallow](https://github.com/pmndrs/zustand/blob/main/src/react/shallow.ts#L4C17-L4C27) 코드를 비교했다.\\r\\n\\r\\n```tsx\\r\\n// zustand\\r\\nconst prev = React.useRef<U>(undefined);\\r\\n\\r\\n// 내 코드\\r\\nconst prevState = useRef<S | null>(null);\\r\\n```\\r\\n\\r\\nzustand 의 경우 초기값을 undefined 로 설정했고 나는 null 로 설정했다.\\r\\n자바스크립트에서 undefined 는 변수가 선언 되었지만 아직 값이 할당되지 않은 상태를 나타낸다. null 의 경우 null 이라는 값이 할당된 상태이다. 이전 상태를 저장하는 prev 의 초기값으로 아직 값이 할당되지 않은 상태를 나타낸다면 undefined 를 사용하는 것이 알맞아 보였다.\\r\\n\\r\\n```js\\r\\n// zustand\\r\\nreturn (state) => {\\r\\n    const next = selector(state)\\r\\n    return shallow(prev.current, next)\\r\\n      ? (prev.current as U)\\r\\n      : (prev.current = next)\\r\\n  }\\r\\n\\r\\n// 내 코드\\r\\nreturn (state: T): S => {\\r\\n  const currentState = selector(state);\\r\\n\\r\\n  if (prevState.current === null) {\\r\\n    // 초기 값 설정 의도\\r\\n    prevState.current = currentState;\\r\\n    return prevState.current;\\r\\n  }\\r\\n\\r\\n  if (!shallowEquals(prevState.current, currentState)) {\\r\\n    prevState.current = currentState;\\r\\n    return prevState.current;\\r\\n  }\\r\\n\\r\\n  return prevState.current;\\r\\n}\\r\\n```\\r\\n\\r\\nzustand 에서는 이전 값과 새로운 값을 비교하는 과정만 존재한다. 내 코드에서는 초기값 설정과 비교하는 과정이 분리되어 있다. 입력 받은 state 값이 null 일수도 있기 때문에 사실상 초기 값 설정이라는 부분이 의미가 없다는 걸 알게 되었다. zustand 에서 값을 할당하면서 return 을 하는 방식으로 코드를 작성했는데, 주관적으로 할당과 리턴을 분리하는게 이해하기 쉽다고 생각한다.\\r\\n\\r\\n최종적으로는 아래와 같이 코드를 수정했다.\\r\\n\\r\\n```js\\r\\nexport const useShallowSelector = <T, S = T>(selector: Selector<T, S>) => {\\r\\n  // 이전 상태를 저장하고, shallowEquals를 사용하여 상태가 변경되었는지 확인하는 훅을 구현합니다.\\r\\n  const prevState = useRef<S>(undefined);\\r\\n\\r\\n  return (state: T): S => {\\r\\n    const currentState = selector(state);\\r\\n\\r\\n    if (shallowEquals(prevState.current, currentState)) {\\r\\n      return prevState.current as S;\\r\\n    }\\r\\n\\r\\n    prevState.current = currentState;\\r\\n    return prevState.current;\\r\\n  };\\r\\n};\\r\\n```\\r\\n\\r\\n#### Context 사용할 때 리렌더링 최소화 하기\\r\\n\\r\\nvalue 값이 참조를 유지할 수 있도록 useMemo 를 사용해 `{ show: showWithHide, hide, ...state }` 값을 캐싱한다. 의존성 배열에 showWithHide, hide, state 값을 넣어줘야 한다.\\r\\n\\r\\n```tsx\\r\\nuseMemo(() => {\\r\\n   show: showWithHide,\\r\\n   hide,\\r\\n   ...state,\\r\\n}, [showWithHide, hide, state.message, state.type]);\\r\\n```\\r\\n\\r\\nshowWithHide, hide 는 함수이기 때문에 useCallback 을 이용해 따로 최적화가 필요하다. 최적화를 위해 아래와 같이 계속 의존성 배열에 값을 넣고, 의존성 배열에서 비교를 위해 참조를 유지하도록 만드는 작업을 반복해야 한다. \\r\\n```tsx\\r\\n// show, hideAfter 참조를 유지하기 위해 또 다른 작업 ..\\r\\n\\r\\nconst showWithHide: ShowToast = useCallback((...args) => {\\r\\n  show(...args);\\r\\n  hideAfter();\\r\\n}, [show, hideAfter]);\\r\\n```\\r\\n\\r\\n과제를 진행하면서 만든 useAutoCallback 훅을 사용하면 의존성 배열 없이 최신 상태의 함수를 사용하면서 참조를 유지할 수 있어 간단하게 작성이 가능하다.\\r\\n\\r\\n```tsx\\r\\nconst showWithHide: ShowToast = useAutoCallback((...args) => {\\r\\n  show(...args);\\r\\n  hideAfter();\\r\\n});\\r\\n```\\r\\n\\r\\n이렇게 참조를 유지하도록 만들어도 장바구니 담기를 누르면 불필요한 리렌더링이 발생한다. 문제는 show, hide 를 호출하는 과정에서 state 값이 바뀌기 때문이다. 장바구니 추가 모달을 띄울 때 useCartAddCommand 훅을 사용하는 컴포넌트에서 state 의 값을 사용하지 않기 때문에, state 값과, 액션 함수들을 별개의 컨텍스트로 분리해 최적화를 진행할 수 있다.\\r\\n\\r\\n최종적으로 아래와 같은 형태로 최적화를 진행했다.\\r\\n```tsx\\r\\n// 컨텍스트를 분리\\r\\nconst ToastStateContext = createContext<{\\r\\n  message: string;\\r\\n  type: ToastType;\\r\\n}>(initialState);\\r\\nconst ToastCommandContext = createContext<{\\r\\n  show: ShowToast;\\r\\n  hide: Hide;\\r\\n}>({\\r\\n  show: () => null,\\r\\n  hide: () => null,\\r\\n});\\r\\n\\r\\nexport const ToastProvider = memo(({ children }: PropsWithChildren) => {\\r\\n  ...\\r\\n\\r\\n  // 참조 유지\\r\\n  const showWithHide: ShowToast = useAutoCallback((...args) => {\\r\\n    show(...args);\\r\\n    hideAfter();\\r\\n  });\\r\\n\\r\\n  // 액션 객체의 참조를 유지\\r\\n  const memorizedCommand = useMemo(() => ({ show: showWithHide, hide }), [showWithHide, hide]);\\r\\n\\r\\n  return (\\r\\n    <ToastCommandContext value={memorizedCommand}>\\r\\n      <ToastStateContext value={state}>\\r\\n        {children}\\r\\n        {visible && createPortal(<Toast />, document.body)}\\r\\n      </ToastStateContext>\\r\\n    </ToastCommandContext>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n> [객체와 함수를 전달할 때 리렌더링 최적화하기](https://ko.react.dev/reference/react/useContext#optimizing-re-renders-when-passing-objects-and-functions)\\r\\n> zustand 를 사용하는 경우 하나의 컨텍스트를 사용하면서 리렌더링 최적화가 되는 걸로 알고 있는데, 하나의 컨텍스트를 최적화 하는 방법도 찾아보면 도움이 될 것 같다.\\r\\n\\r\\n___\\r\\n\\r\\n<!-- ### 개선이 필요하다고 생각하는 코드 -->\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n- 컴포넌트를 함수로 호출하는 실수는 앞으로 하지 않을 것 같다.\\r\\n- useMemo, useCallback 과 같은 훅은 제공하는 형태로만 사용을 해왔는데, 이번 과제에서 만든 useDeepMemo, useAutoCallback 과 같은 훅들을 만들면 코드를 더 단순하게 만들 수 있을 것 같다.\\r\\n- setState 를 사용할 때 \\r\\n- 이번에 구현해본 훅 이외에 다른 훅들도 어떻게 구현할 수 있을지 학습하면 좋을 것 같다.\\r\\n- 추천 도서 읽어보기\\r\\n  - 오프 코치님 추천: [전문가를 위한 리액트](https://product.kyobobook.co.kr/detail/S000214977649), [리액트 훅을 활용한 마이크로 상태 관리](https://product.kyobobook.co.kr/detail/S000212233308)\\r\\n  - 8팀 유열님 추천: [모던 리액트 Deep Dive](https://product.kyobobook.co.kr/detail/S000210725203)\\r\\n\\r\\n___\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n- 어떤 훅을 이용해 해당 기능을 구현하세요 라는 힌트가 있는 부분은 구현이 상대적으로 쉬웠습니다.\\r\\n- memo 를 ts 파일로 다루는 부분에서 createElement 를 사용하라는 힌트가 없어서 학습에 도움이 된 것 같습니다.\\r\\n- 토스트 context 를 최적화 하는 부분도 과제에서 정해진 방법이 없어서 최적화를 위한 다양한 방법을 찾아볼 수 있었습니다.\\r\\n\\r\\n___\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n<!-- ### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요. -->\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n### 리액트 렌더링 과정\\r\\n\\r\\n리액트는 컴포넌트를 화면에 그릴 때 트리거 -> 렌더링 -> 커밋 과정을 거친다.\\r\\n\\r\\n### 1. 트리거\\r\\n\\r\\n트리거는 2가지가 존재한다.\\r\\n1. 초기 렌더링\\r\\n2. 상태 변화에 대한 렌더링\\r\\n\\r\\n#### 초기 렌더링\\r\\n\\r\\n```jsx\\r\\nconst root = createRoot(document.getElementById(\'root\'));\\r\\nroot.render(<Image />);\\r\\n```\\r\\n\\r\\ncreateRoot 함수를 사용해 브라우저 DOM 노드 안에 React 컴포넌트를 표시하는 루트를 생성한다. 루트를 생성한 후 root.render 를 호출해 초기 렌더링을 트리거 할 수 있다.\\r\\n\\r\\n#### 상태 변화에 대한 렌더링\\r\\n\\r\\nstate 를 업데이트 하면 자동으로 렌더링이 트리거 된다.\\r\\n\\r\\n### 2. 렌더링\\r\\n\\r\\n리액트에서 렌더링은 컴포넌트를 호출하는 것을 의미한다.\\r\\n초기 렌더링은 루트 컴포넌트를 호출하게 되고, 이후 상태 변화에 대한 렌더링은 state 가 바뀌어 렌더링을 트리거한 컴포넌트를 호출한다. 컴포넌트가 다른 컴포넌트를 반환하면 해당 컴포넌트도 다시 호출된다. 이것이 부모 컴포넌트가 렌더링 될 때 자식 컴포넌트도 렌더링 되는 이유다.\\r\\n\\r\\n렌더링 과정을 좀 더 구체적으로 표현하면\\r\\nJSX 문법 -> 컴파일러를 통한 변환 -> ReactElement 생성 -> FiberNode 로 확장 -> 재조정 -> 변경사항 적용을 위한 스케쥴러 실행 과정을 거친다.\\r\\n\\r\\n> JSX 문법은 컴파일러를 통해 ReactElement 를 생성하는 자바스크립트 코드로 변환된다. ReactElement 는 type, key, props, ref 등 컴포넌트에 필요한 정보를 담고 있다. \\r\\n> FiberNode는 ReactElement의 정보를 바탕으로, 트리 구조(부모, 자식, 형제 노드 참조), 컴포넌트의 상태, 훅, 라이프사이클 정보, 렌더링 작업에 필요한 다양한 메타데이터를 추가적으로 포함하는 가상 DOM 노드이다.\\r\\n> 효율적인 재조정을 위해 useMemo, useCallback, memo 를 사용할 수 있다.\\r\\n\\r\\n### 3. 커밋\\r\\n\\r\\n렌더링 이후 실제 DOM 을 수정하는 것을 커밋이라고 부른다.\\r\\n초기 렌더링의 경우 Node.appendChild() 매서드를 사용해 생성한 모든 DOM 노드를 화면에 표시한다. 리렌더링의 경우 차이가 발생한 부분만 DOM 에 적용된다.\\r\\n\\r\\n페인트 이전에 useLayoutEffect 가 동기적으로 실행된다.\\r\\n페인트 이후 useEffect 가 실행된다.\\r\\n\\r\\n>[렌더링 그리고 커밋](https://ko.react.dev/learn/render-and-commit)\\r\\n>[React 톺아보기](https://goidle.github.io/)\\r\\n\\r\\n### 컴포넌트 라이프사이클 훅\\r\\n\\r\\n#### 마운트\\r\\nuseState 초기화\\r\\n페인트 전 useLayoutEffect 동기적 실행\\r\\n페인트 이후 useEffect 실행\\r\\n\\r\\n#### 업데이트\\r\\n의존성 배열에 따라 useLayoutEffect, useEffect 실행\\r\\n\\r\\n#### 언마운트\\r\\nuseLayoutEffect, useEffect 클린업 실행\\r\\n\\r\\n___\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n리액트는 가상 DOM 비교를 통해 변화된 부분만 DOM 을 업데이트 한다. 변화를 확인하는 방법으로 Object.is 매서드를 사용해 값을 비교한다. 이 과정에서 객체, 배열, 함수 등은 참조 값을 비교하게 되는데 컴포넌트가 리렌더링 되는 과정에서 새로운 참조가 생성되고, 값이 달라졌다 판단하게 된다. 이때 참조를 유지시키기 위해 메모이제이션이 필요하다.\\r\\n\\r\\n메모이제이션을 사용했을 때 장점은 참초를 유지할 수 있다는 점이다. 참조를 유지하게 되면 의존성 배열, memo 등 값을 비교하는 과정에서 값이 변하지 않도록 판단하게 만들 수 있다. 단점으로는 참조를 유지시키는 useMemo, useCallback과 같은 훅들도 의존하는 값이 변했는지 비교하는 과정을 거치게 되는데, 불필요하게 사용할 경우 불필요한 비교 연산이 발생하게 된다.\\r\\n\\r\\n메모이제이션을 사용하지 않고, 비교에 필요한 값을 개별로 넣는 방법을 사용할 수 있다.\\r\\n\\r\\n```jsx\\r\\nconst [state, setState] = useState({name:\\"\\", age:0});\\r\\nconst memoization = useMemo(()=> state, [state.name, state.age]);\\r\\n\\r\\nuseEffect(()=>{\\r\\n  ...\\r\\n  // 객체를 메모이제이션\\r\\n}, [memoization]);\\r\\n```\\r\\n\\r\\n```jsx\\r\\nconst [state, setState] = useState({name:\\"\\", age:0});\\r\\n\\r\\nuseEffect(()=>{\\r\\n  ...\\r\\n  // 객체를 메모이제이션 하지 않고, 필요한 값을 개별로 넣는다.\\r\\n}, [state.name, state.age]);\\r\\n```\\r\\n\\r\\n컨텍스트를 사용해 리렌더링이 발생하는 경우 컨텍스트 분리, 메모이제이션을 통한 최적화를 진행할 수 있다. 만약 상태를 더 좁은 범위로 격리할 수 있다면, 컴포넌트 내부 상태로 분리 -> 필요한 시점에 컨텍스트 업데이트 와 같은 방법으로 최적화를 할 수 있다.\\r\\n___\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n> 컨텍스트 + useState 사용하는 것을 가정한다.\\r\\n\\r\\n컨텍스트는 props 로 값을 전달하지 않아도, 값을 읽을 수 있게 해준다. props 를 전달하는 방식은 컴포넌트에 필요한 정보를 명시할 수 있는 점에서 좋은 방식이지만, 때론 해당 컴포넌트에서 불필요한 값도 전달을 목적으로 받아야 하는 경우가 발생한다. 이런 경우 컴포넌트 추가/삭제가 어려워 질 수 있고, 재사용성이 떨어진다. 또한 props 만 전달하는 중간 컴포넌트들이 불필요한 리렌더링을 해야할 수 있다. 컨텍스트는 이런 상황에서 대안이 될 수 있다.\\r\\n\\r\\n> 불필요한 props 전달의 경우 컴포넌트를 children 으로 전달하는 방법으로도 개선할 수 있다. 리액트 공식 문서에서는 컨텍스트를 사용하기 전 JSX 를 children 으로 전달하는 것을 고려하도록 권장한다.\\r\\n> [Context를 사용하기 전에 고려할 것](https://ko.react.dev/learn/passing-data-deeply-with-context#before-you-use-context)\\r\\n\\r\\n컨텍스트를 사용할 때 컨텍스트 값이 변경되면 값을 구독중인 컴포넌트들이 모두 리렌더링 되기 때문에 불필요한 리렌더링이 발생하지 않도록 주의해야 한다. 메모이제이션을 사용해 참조를 유지하도록 최적화를 할 수 있고, 자주 변경되는 값과, 자주 변경되지 않는 값을 별도의 컨텍스트로 분리하는 방법으로 최적화를 진행할 수 있다.\\r\\n\\r\\n___\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금한다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야한다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n\\r\\n1. 자주 사용하는 커스텀훅이 있는지 궁금합니다. useAutoCallback 처럼 기존 훅을 더 쉽게 사용할 수 있도록 만든 훅들이 있을까요?\\r\\n\\r\\n2. 메모이제이션을 사용하다 보면 결국 모든 값을 메모이제이션 해야 하는 상황들이 발생하는 것 같은데, 모든 컴포넌트와 값들에 메모이제이션을 적용하는건 어떻게 생각하시나요? 물론 불필요한 비교 과정은 비효율 적이지만, 코드를 지속적으로 유지보수하면서 메모이제이션을 알맞게 사용하기 어렵다 느껴져서 질문 드립니다. ","created_at":"2025-07-19T14:06:27Z","updated_at":"2025-07-28T09:48:26Z","closed_at":null,"merged_at":null,"merge_commit_sha":"4e0b604990a7496d56942b4928734545e95e2212","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/14/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/14/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/14/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/ef5d359e7c85e22cca768de455f9f71e79224481","head":{"label":"JiHoon-0330:main","ref":"main","sha":"ef5d359e7c85e22cca768de455f9f71e79224481","user":{"login":"JiHoon-0330","id":58219394,"node_id":"MDQ6VXNlcjU4MjE5Mzk0","avatar_url":"https://avatars.githubusercontent.com/u/58219394?v=4","gravatar_id":"","url":"https://api.github.com/users/JiHoon-0330","html_url":"https://github.com/JiHoon-0330","followers_url":"https://api.github.com/users/JiHoon-0330/followers","following_url":"https://api.github.com/users/JiHoon-0330/following{/other_user}","gists_url":"https://api.github.com/users/JiHoon-0330/gists{/gist_id}","starred_url":"https://api.github.com/users/JiHoon-0330/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JiHoon-0330/subscriptions","organizations_url":"https://api.github.com/users/JiHoon-0330/orgs","repos_url":"https://api.github.com/users/JiHoon-0330/repos","events_url":"https://api.github.com/users/JiHoon-0330/events{/privacy}","received_events_url":"https://api.github.com/users/JiHoon-0330/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022638349,"node_id":"R_kgDOPPQ5DQ","name":"front_6th_chapter1-3","full_name":"JiHoon-0330/front_6th_chapter1-3","private":false,"owner":{"login":"JiHoon-0330","id":58219394,"node_id":"MDQ6VXNlcjU4MjE5Mzk0","avatar_url":"https://avatars.githubusercontent.com/u/58219394?v=4","gravatar_id":"","url":"https://api.github.com/users/JiHoon-0330","html_url":"https://github.com/JiHoon-0330","followers_url":"https://api.github.com/users/JiHoon-0330/followers","following_url":"https://api.github.com/users/JiHoon-0330/following{/other_user}","gists_url":"https://api.github.com/users/JiHoon-0330/gists{/gist_id}","starred_url":"https://api.github.com/users/JiHoon-0330/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JiHoon-0330/subscriptions","organizations_url":"https://api.github.com/users/JiHoon-0330/orgs","repos_url":"https://api.github.com/users/JiHoon-0330/repos","events_url":"https://api.github.com/users/JiHoon-0330/events{/privacy}","received_events_url":"https://api.github.com/users/JiHoon-0330/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/JiHoon-0330/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/JiHoon-0330/front_6th_chapter1-3/deployments","created_at":"2025-07-19T14:02:20Z","updated_at":"2025-07-28T09:48:29Z","pushed_at":"2025-07-28T09:48:24Z","git_url":"git://github.com/JiHoon-0330/front_6th_chapter1-3.git","ssh_url":"git@github.com:JiHoon-0330/front_6th_chapter1-3.git","clone_url":"https://github.com/JiHoon-0330/front_6th_chapter1-3.git","svn_url":"https://github.com/JiHoon-0330/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":154,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":9,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":9,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/14"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/14"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/14"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/14/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/14/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/14/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/ef5d359e7c85e22cca768de455f9f71e79224481"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/15","id":2679123024,"node_id":"PR_kwDOPMCTuc6fsCxQ","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/15","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/15.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/15.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/15","number":15,"state":"open","locked":false,"title":"[8팀 정유열] Chapter 1-3. 프레임워크 없이 SPA 만들기","user":{"login":"Yuyeol","id":52055504,"node_id":"MDQ6VXNlcjUyMDU1NTA0","avatar_url":"https://avatars.githubusercontent.com/u/52055504?v=4","gravatar_id":"","url":"https://api.github.com/users/Yuyeol","html_url":"https://github.com/Yuyeol","followers_url":"https://api.github.com/users/Yuyeol/followers","following_url":"https://api.github.com/users/Yuyeol/following{/other_user}","gists_url":"https://api.github.com/users/Yuyeol/gists{/gist_id}","starred_url":"https://api.github.com/users/Yuyeol/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Yuyeol/subscriptions","organizations_url":"https://api.github.com/users/Yuyeol/orgs","repos_url":"https://api.github.com/users/Yuyeol/repos","events_url":"https://api.github.com/users/Yuyeol/events{/privacy}","received_events_url":"https://api.github.com/users/Yuyeol/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n[https://yuyeol.github.io/front_6th_chapter1-3/](https://yuyeol.github.io/front_6th_chapter1-3/)\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장과 학습효과\\r\\n\\r\\n#### useShallowState를 구현하면서 새로 안 사실\\r\\n\\r\\nsetState로 prev와 동일한 값을 넣으면 기본적으로 리렌더가 발생하지 않음을 알게되었습니다.\\r\\n이 사실을 알기 전에는 useShallowState가 왜 필요한 것인지 처음에는 이해하지 못했었고,\\r\\n상태가 참조값인 경우 prev의 주소가 항상 변하는 특징으로 인해 동일한 값을 초기화해도 리렌더링을 발생시키기 때문에 이 훅이 필요하다는 것을 알게 되었습니다.\\r\\n\\r\\n#### store / storage / router 코드 구현 과정 중의 고민\\r\\n\\r\\ncreateObserver → useShallowSelector → useStore 유기적 연결을 파악하는데 어려움이 있었습니다.\\r\\n단순히 구현하라고 지시한 모듈을 하나씩만 구현해보려니 막막한 부분이 많았고 제시해주신 학습 자료들과 학습을 통해 어떤 구조로 어떻게 연결할지 찾아보면서 기존 라이브러리들의 코드들을 답습하여 답안에 가까운 코드를 작성하는 방법을 배웠습니다.\\r\\n\\r\\n#### ToastContext 리팩토링을 통한 상태관리에 대한 고찰\\r\\n\\r\\n컨텍스트의 렌더링 문제를 해결하면서 프롭스 드릴링과 Context API, 상태관리 라이브러리의 리렌더 특징에 대해 다시 복습하는 기회를 가졌고, 문서로 남길 수 있었습니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n어느정도 정답이나 구현 디테일이 균일할 수밖에 없는 과제인 것 같아서 크게 자랑할 것은 없는것 같습니다.\\r\\n비슷한 로직을 사용한다면, 통일성을 지키며 코드를 작성했고 알아보기 쉽고 복집하지 않게 코드를 작성하기 위해 노력했습니다.\\r\\n아래 예시 코드와 비슷한 수준으로 전체적으로 일관성을 신경쓰며 작성했습니다.\\r\\n- 명확한 분기 분리 \\r\\n- early return과 선택적 에러처리\\r\\n- 가독성 보강이나 재사용이 필요할 때 선택적으로 변수 선언\\r\\n\\r\\n```tsx\\r\\ntype AnonymousObj = { [key: string]: unknown };\\r\\n\\r\\nexport const shallowEquals = (a: unknown, b: unknown): boolean => {\\r\\n  if (typeof a !== typeof b) return false;\\r\\n\\r\\n  if (a === null || b === null) return a === b;\\r\\n\\r\\n  if (Array.isArray(a) && Array.isArray(b)) {\\r\\n    if (a.length !== b.length) return false;\\r\\n    return a.every((item, index) => item === b[index]);\\r\\n  }\\r\\n\\r\\n  if (typeof a === \\"object\\" && typeof b === \\"object\\") {\\r\\n    const aKeys = Object.keys(a);\\r\\n    const bKeys = Object.keys(b);\\r\\n    if (aKeys.length !== bKeys.length) return false;\\r\\n    return aKeys.every((key) => (a as AnonymousObj)[key] === (b as AnonymousObj)[key]);\\r\\n  }\\r\\n\\r\\n  return a === b;\\r\\n};\\r\\n```\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\nToastContext의 컨텍스트를 분리하는 방향으로 리팩토링을 진행하고 좀 더 리렌더 성능을 향상 시켜보면 어떨까 하고 상태관리 라이브러리들에서 흔히 사용되는 셀렉터 구현을 고려해보았습니다.\\r\\n하지만 변경이 잦은 상태를 소비하는 컴포넌트는 단 하나였고, 샐렉터를 사용하지 않아도 성능적인 차이가 없어서 지금 프로덕트 단계에서는 필요없는 구현이라고 판단했습니다.\\r\\n하지만 기회가 된다면 시간을 내어 구현해보고 싶습니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n과제를 수행함과 동시에 학습효과를 얻어가기에 적절한 과제였다고 생각합니다. 다루고싶던 주제의 글도 써보고 좋은 경험이었습니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링의 단계.\\r\\n라이프사이클에 따라 렌더링 단계별 어떤 일이 일어나는지 자세히 알고싶어 공부한 내용을 기록한 글입니다.\\r\\n[리액트의 렌더링 단계와 라이프사이클](https://github.com/Yuyeol/front_6th_chapter1-3/issues/2)\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n실제 메모이제이션 훅을 사용하던 경험을 떠올려가며 작성한 글입니다.\\r\\n[메모이제이션은 무거운 연산이 필요할 때](https://github.com/Yuyeol/front_6th_chapter1-3/issues/3)\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n상태관리의 방법에 따라 리렌더 성능이 어떻게 달라지는지 공부 해 본 것과, 평소 상태관리 라이브러리를 사용하면서 느꼈던 저의 생각을 함께 담은 글입니다.\\r\\n[프롭스 드릴링 vs 컨텍스트 vs 상태관리 라이브러리](https://github.com/Yuyeol/front_6th_chapter1-3/issues/1)\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n코드리뷰는 아니지만 과제를 수행하면서 코치님의 상태관리 방법이나 용도에 대한 생각을 듣고싶어졌습니다.\\r\\n- 어떤 방식으로 상태 관리를 하는 것을 선호하시는지(방법론, 상태관리 라이브러리 종류 등)\\r\\n- 여러 팀이나 프로젝트 환경에서 상태관리 라이브러리를 사용해 보셨을텐데 어떤 불편함을 겪었고 어떻게 해결하셨는지\\r\\n  - 저의 경우 전역 상태관리의 특성 상 특히나 팀 협업 시 관리되지 못하는 스토어가 증식하여 관리가 어려워서 합리적인 해결책을 생각해보고 있습니다.\\r\\n- 상태관리에 대한 베스트프랙티스나 잘 할 수 있는 방법론을 다루는 책이나 글이 있다면 소개해주시면 감사할 것 같습니다.\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요.\\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-19T15:50:41Z","updated_at":"2025-07-29T01:18:29Z","closed_at":null,"merged_at":null,"merge_commit_sha":"bfa5ecc43551715b906ce6a453b9b3966c725af0","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/15/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/15/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/15/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/b35d0e218578e85d279d7709977116d81a7e55c4","head":{"label":"Yuyeol:main","ref":"main","sha":"b35d0e218578e85d279d7709977116d81a7e55c4","user":{"login":"Yuyeol","id":52055504,"node_id":"MDQ6VXNlcjUyMDU1NTA0","avatar_url":"https://avatars.githubusercontent.com/u/52055504?v=4","gravatar_id":"","url":"https://api.github.com/users/Yuyeol","html_url":"https://github.com/Yuyeol","followers_url":"https://api.github.com/users/Yuyeol/followers","following_url":"https://api.github.com/users/Yuyeol/following{/other_user}","gists_url":"https://api.github.com/users/Yuyeol/gists{/gist_id}","starred_url":"https://api.github.com/users/Yuyeol/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Yuyeol/subscriptions","organizations_url":"https://api.github.com/users/Yuyeol/orgs","repos_url":"https://api.github.com/users/Yuyeol/repos","events_url":"https://api.github.com/users/Yuyeol/events{/privacy}","received_events_url":"https://api.github.com/users/Yuyeol/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022654725,"node_id":"R_kgDOPPR5BQ","name":"front_6th_chapter1-3","full_name":"Yuyeol/front_6th_chapter1-3","private":false,"owner":{"login":"Yuyeol","id":52055504,"node_id":"MDQ6VXNlcjUyMDU1NTA0","avatar_url":"https://avatars.githubusercontent.com/u/52055504?v=4","gravatar_id":"","url":"https://api.github.com/users/Yuyeol","html_url":"https://github.com/Yuyeol","followers_url":"https://api.github.com/users/Yuyeol/followers","following_url":"https://api.github.com/users/Yuyeol/following{/other_user}","gists_url":"https://api.github.com/users/Yuyeol/gists{/gist_id}","starred_url":"https://api.github.com/users/Yuyeol/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Yuyeol/subscriptions","organizations_url":"https://api.github.com/users/Yuyeol/orgs","repos_url":"https://api.github.com/users/Yuyeol/repos","events_url":"https://api.github.com/users/Yuyeol/events{/privacy}","received_events_url":"https://api.github.com/users/Yuyeol/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/Yuyeol/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/Yuyeol/front_6th_chapter1-3/deployments","created_at":"2025-07-19T14:40:43Z","updated_at":"2025-07-23T12:37:16Z","pushed_at":"2025-07-23T12:37:12Z","git_url":"git://github.com/Yuyeol/front_6th_chapter1-3.git","ssh_url":"git@github.com:Yuyeol/front_6th_chapter1-3.git","clone_url":"https://github.com/Yuyeol/front_6th_chapter1-3.git","svn_url":"https://github.com/Yuyeol/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":119,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":3,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":3,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/15"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/15"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/15"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/15/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/15/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/15/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/b35d0e218578e85d279d7709977116d81a7e55c4"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/16","id":2679507592,"node_id":"PR_kwDOPMCTuc6ftgqI","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/16","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/16.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/16.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/16","number":16,"state":"open","locked":false,"title":"[6팀 이태영] Chapter 1-3. React, Beyond the Basics ","user":{"login":"taeyeong0814","id":53850117,"node_id":"MDQ6VXNlcjUzODUwMTE3","avatar_url":"https://avatars.githubusercontent.com/u/53850117?v=4","gravatar_id":"","url":"https://api.github.com/users/taeyeong0814","html_url":"https://github.com/taeyeong0814","followers_url":"https://api.github.com/users/taeyeong0814/followers","following_url":"https://api.github.com/users/taeyeong0814/following{/other_user}","gists_url":"https://api.github.com/users/taeyeong0814/gists{/gist_id}","starred_url":"https://api.github.com/users/taeyeong0814/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/taeyeong0814/subscriptions","organizations_url":"https://api.github.com/users/taeyeong0814/orgs","repos_url":"https://api.github.com/users/taeyeong0814/repos","events_url":"https://api.github.com/users/taeyeong0814/events{/privacy}","received_events_url":"https://api.github.com/users/taeyeong0814/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\nhttps://taeyeong0814.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n  - useRef, useMemo, useCallback, useDeepMemo, useShallowState, useAutoCallback 등 다양한 커스텀 훅을 직접 구현하며, \\r\\n    React의 상태 관리와 메모이제이션의 기본 원리에 대해 공부하여 학습 할 수 있었습니다.\\r\\n  - 현업에서도 타입스크립트를 사용은 하고 있으나 유틸리티 타입 같은 것은 사실 알고 사용하지 않았는데 이 부분에 개념도 알게 되었습니다.\\r\\n  - 과제를 진행하면서 **제네릭** 에 대한 부분도 많이 접했는데 자바 공부 할 때 들었었고, 아직까지도 정확히 무엇인지 모르지만 이번 과제를 하면서 추후에 블로그 주제로 사용하여 정리가 필요한 상황이지만 \\"**타입을 나중에 결정할 수 있게 해주는 타입 변수**\\" 정도로 습득하고 알아갔습니다.\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n- 처음에 구현을 했을 땐 store를 먼저 구독하고 selector과 shallow를 비교했는데\\r\\nshallow 비교가 적용 된 selector를 getSnapshot에서 바로 사용하게 하면 **불필요한 리렌더링**을 방지 할 수 있을 것으로 생각되어 변경하였습니다. \\r\\n```js\\r\\nexport const useStore = <T, S = T>(store: Store<T>, selector: (state: T) => S = defaultSelector<T, S>) => {\\r\\n  // useSyncExternalStore와 useShallowSelector를 사용해서 store의 상태를 구독하고 가져오는 훅을 구현해보세요.\\r\\n\\r\\n  // 내가 짠 코드\\r\\n  // 1. store의 상태 변화를 구독\\r\\n  // const state = useSyncExternalStore(store.subscribe, store.getState);\\r\\n  // 2. selector로 원하는 값 추출 및 shallow 비교\\r\\n  // return useShallowSelector(selector)(state);\\r\\n\\r\\n  // 변경 한 코드\\r\\n  const shallowSelector = useShallowSelector(selector);\\r\\n  //상태가 변하지 않았을 때는 렌더링이 되지 않기 위해 shallowSelector를 사용\\r\\n  return useSyncExternalStore(store.subscribe, () => shallowSelector(store.getState()));\\r\\n};\\r\\n```\\r\\n\\r\\n- deepEquals 함수를 구현 할 때 두 값을 깊은 비교를 하는데 코드를 작성하고 나니 a를 기준으로만 for 문 처리를 했었는데 그러면 \\r\\n**엣지 케이스** (예를 들어 `{ a: 1 }` vs `{ a: 1, b: 2 }`) 처럼 A가 B에 포함되는 상황이 생각났습니다. 그래서 아래와 같은 코드를 추가해서 확실하게 비교 처리하였습니다.\\r\\n\\r\\n```js\\r\\n    // keysB에 있는 모든 키가 keysA에도 있는지도 확인\\r\\n    for (const key of keysB) {\\r\\n      if (!keysA.includes(key)) return false;\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n  return false;\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n- 저는 useRef 함수를 아래와 같이 작성하였습니다. 하지만 코드에 대한 내용을 질문하고 공부하면서 초기값을 객체로 전달하는 것과 함수로 전달하는 것에 대한 차이에 대해 알게 되었습니다. 그래서 이 부분을 불필요하게 계속 객체가 만들어지지 않게 함수로 전달하는 코드로 작성하는 것이 더 권장되는 방법인 부분까지 알게 되었습니다. **즉! 리팩토링이 필요한 코드입니다.** \\r\\n```js\\r\\nimport { useState } from \\"react\\";\\r\\n\\r\\n// useRef 훅은 렌더링 사이에 값을 유지하는 가변 ref 객체를 생성합니다.\\r\\nexport function useRef<T>(initialValue: T): { current: T } {\\r\\n  const [state] = useState({ current: initialValue });\\r\\n  return state;\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n- 제가 이번 과제에서 제일 깊고 배움이 컷던 부분은 메모이제이션, useMemo, useCallback의 개념입니다. \\r\\n값을 재사용하는 것, 함수를 재사용하는 것을 시작으로 비슷하지만 다른 API 이였습니다. 또한 제일 핵심적이라고 생각이 되었는데 어떤 API인지 어떻게 사용하는지는 이미 다 작성을 해봐서 아는 부분이라 가정하고 넘어가고 이 API들은 성능 최적화를 위해 존재하는 API인데 사실 잘 못 사용하면 오히려 성능이 안 좋아 질 수 있습니다. **무군별하게 사용하면 메모리를 점유하고 있는 메모들이 많을 것**입니다.\\r\\n\\r\\n\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n**좋았던 부분**\\r\\n\\r\\n- 커스텀 훅, 비교 함수, 상태 관리 등 실무에서 자주 쓰이는 패턴을 직접 구현해보며 원리를 깊이 이해할 수 있었습니다.\\r\\n- md 파일로 구현 과정과 고민, 개선 내역을 정리하면서 스스로의 성장과정을 체계적으로 돌아볼 수 있었습니다.\\r\\n- 왜 쓰는지 모르고 그냥 쓰고 있던 hooks 을 과제 실습을 통해 단순 이론 혹은 그냥 import 가 아니라 \\"직접 작성하고 알아가고 배우는\\" 경험이 많아 만족스러웠습니다. 개인적으로는 1주차, 2주차보다 이번 주차 내용이 더 좋았습니다.\\r\\n\\r\\n**모호하거나 애매했던 부분**\\r\\n\\r\\n- useRef, useMemo 등 훅을 그냥 직접 구현을 하려고 하니 어려웠는데 이 부분은 사실 참고 자료를 보고 난 뒤 진행하라고 하셨기 때문에 제 시작 방식의 문제라고 판단 됩니다.\\r\\n- 이번 과제에서는 모호하거나 애매하다고 느낀 부분은 없습니다.\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n- React는 상태나 props가 변경되면 가상 DOM에서 변경점을 계산하고, 실제 DOM에는 꼭 필요한 부분만 최소한으로 반영합니다.\\r\\n이 과정에서 불필요한 렌더링을 막기 위해 memoization, 비교 함수, 커스텀 훅 등이 적극적으로 활용됩니다.\\r\\n- 즉, \\"**변경이 감지된 부분만 다시 렌더링**\\"는 것이 React 렌더링의 핵심입니다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n - 메모이제이션은 불필요한 연산과 렌더링을 줄여 성능을 최적화하는 데 필수적인 기법입니다.\\r\\n하지만 무분별하게 사용하면 코드가 복잡해지고, 오히려 관리가 어려워질 수 있습니다.\\r\\n\\"**진짜로 값이 자주 바뀌지 않는 계산**\\"에만 신중하게 적용하는 것이 중요하다고 생각합니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n - Context와 커스텀 훅을 활용한 상태 관리는 전역 상태를 효율적으로 공유하고, 컴포넌트 간 **결합도**를 낮추는 데 매우 유용합니다.\\r\\n하지만 Context를 남용하면 모든 컴포넌트가 불필요하게 리렌더링 될 수 있으므로, 꼭 필요한 범위에서만 사용하는 것이 좋다고 느꼈습니다.\\r\\n상태 관리의 핵심은 \\"**필요한 곳에만, 필요한 만큼**\\" 데이터를 전달하는 것임을 다시 한 번 깨달았습니다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\nReact 19 릴리즈 내용을 틈틈히 읽고 있었는데 거기서 자동 메모이제이션(Automatic Memoization) 을 보았던 기억이 있습니다.\\r\\nhttps://react.dev/blog/2025/04/21/react-compiler-rc\\r\\n\\r\\n그걸 React Compiler 로 부르며 빌드 타임 도구라는 설명을 보았었는데 현재 찾아보니 RC 버전으로 업데이트가 되었더라고요.\\r\\n \\r\\nDocs 문서나 글을 통해 제가 직접 Auto-Memoization, Compiler... 그래서 추후에 이게 반영이 된다면 기존과 어떤 차이점이 있는데? 를 파악해야 하는데 현재는 React Compiler로 useMemeo, useCallback 안 써도 되겠다. 싶은 생각 정도까지 했습니다.\\r\\n\\r\\n이와 관련한 내용들의 정보나 내용 설명이 궁금합니다!\\r\\n(사실 결론적으로 \\"네, 이젠 안 쓸 겁니다.\\" 혹은 \\"하지만 그럼에도 이런 케이스 같은 경우엔 써야 할 것으로 보여요.\\" 등과 같은 결론적 답변이 더 궁금합니다.)\\r\\n\\r\\n추가적으로 React docs나 그 외 다른 어떤 개발적인 내용을 공부 할 때 어떤 식으로 확인하고 공부하는 것이 좋을까요?\\r\\n예를 들어 저는 지금 store 의 개념에 대해 잘 모르는 상황이라 useStore 를 검색하면 useStorage 가 같이 나오며 subscribe, dispatch, Redux, Zustand.. 등등 단어가 꼬리의 꼬리를 물며 나오는데 다 읽고 보다 보면 내가 어떤 것을 그래서 알려고 한 것 이지? 정리가 안되는 상황이 많이 있습니다. \\r\\n현업에서 릴리즈도 끊어가야 늘어지지 않는다는 것처럼 공부 내용도 끊어가며 알아가야 하는데 결국 연관이 되어 있다 보니 어렵습니다.\\r\\n","created_at":"2025-07-20T02:16:38Z","updated_at":"2025-07-26T05:31:15Z","closed_at":null,"merged_at":null,"merge_commit_sha":"81e7b180a24a6e61940bede72e312abe9a298616","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/16/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/16/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/16/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/d651f93b24ac74bcd5f04bae6afcf589b781c603","head":{"label":"taeyeong0814:main","ref":"main","sha":"d651f93b24ac74bcd5f04bae6afcf589b781c603","user":{"login":"taeyeong0814","id":53850117,"node_id":"MDQ6VXNlcjUzODUwMTE3","avatar_url":"https://avatars.githubusercontent.com/u/53850117?v=4","gravatar_id":"","url":"https://api.github.com/users/taeyeong0814","html_url":"https://github.com/taeyeong0814","followers_url":"https://api.github.com/users/taeyeong0814/followers","following_url":"https://api.github.com/users/taeyeong0814/following{/other_user}","gists_url":"https://api.github.com/users/taeyeong0814/gists{/gist_id}","starred_url":"https://api.github.com/users/taeyeong0814/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/taeyeong0814/subscriptions","organizations_url":"https://api.github.com/users/taeyeong0814/orgs","repos_url":"https://api.github.com/users/taeyeong0814/repos","events_url":"https://api.github.com/users/taeyeong0814/events{/privacy}","received_events_url":"https://api.github.com/users/taeyeong0814/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022861287,"node_id":"R_kgDOPPef5w","name":"front_6th_chapter1-3","full_name":"taeyeong0814/front_6th_chapter1-3","private":false,"owner":{"login":"taeyeong0814","id":53850117,"node_id":"MDQ6VXNlcjUzODUwMTE3","avatar_url":"https://avatars.githubusercontent.com/u/53850117?v=4","gravatar_id":"","url":"https://api.github.com/users/taeyeong0814","html_url":"https://github.com/taeyeong0814","followers_url":"https://api.github.com/users/taeyeong0814/followers","following_url":"https://api.github.com/users/taeyeong0814/following{/other_user}","gists_url":"https://api.github.com/users/taeyeong0814/gists{/gist_id}","starred_url":"https://api.github.com/users/taeyeong0814/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/taeyeong0814/subscriptions","organizations_url":"https://api.github.com/users/taeyeong0814/orgs","repos_url":"https://api.github.com/users/taeyeong0814/repos","events_url":"https://api.github.com/users/taeyeong0814/events{/privacy}","received_events_url":"https://api.github.com/users/taeyeong0814/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/taeyeong0814/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/taeyeong0814/front_6th_chapter1-3/deployments","created_at":"2025-07-20T02:08:38Z","updated_at":"2025-07-24T08:09:11Z","pushed_at":"2025-07-24T12:28:10Z","git_url":"git://github.com/taeyeong0814/front_6th_chapter1-3.git","ssh_url":"git@github.com:taeyeong0814/front_6th_chapter1-3.git","clone_url":"https://github.com/taeyeong0814/front_6th_chapter1-3.git","svn_url":"https://github.com/taeyeong0814/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":315,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/16"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/16"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/16"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/16/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/16/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/16/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/d651f93b24ac74bcd5f04bae6afcf589b781c603"}},"author_association":"FIRST_TIME_CONTRIBUTOR","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/17","id":2679644568,"node_id":"PR_kwDOPMCTuc6fuCGY","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/17","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/17.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/17.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/17","number":17,"state":"open","locked":false,"title":"[6팀 이지현] Chapter 1-3. React, Beyond the Basics ","user":{"login":"j2h30728","id":60846068,"node_id":"MDQ6VXNlcjYwODQ2MDY4","avatar_url":"https://avatars.githubusercontent.com/u/60846068?v=4","gravatar_id":"","url":"https://api.github.com/users/j2h30728","html_url":"https://github.com/j2h30728","followers_url":"https://api.github.com/users/j2h30728/followers","following_url":"https://api.github.com/users/j2h30728/following{/other_user}","gists_url":"https://api.github.com/users/j2h30728/gists{/gist_id}","starred_url":"https://api.github.com/users/j2h30728/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/j2h30728/subscriptions","organizations_url":"https://api.github.com/users/j2h30728/orgs","repos_url":"https://api.github.com/users/j2h30728/repos","events_url":"https://api.github.com/users/j2h30728/events{/privacy}","received_events_url":"https://api.github.com/users/j2h30728/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n- https://j2h30728.github.io/front_6th_chapter1-3/\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n#### useState로 useRef를 만들 수도 있다.\\r\\n\\r\\n계속 전역변수로 값을 유지하려는 방법으로만 생각하려 했기에, 레퍼런스를 얻고자 오픈소스 라이브러리를 찾아봤었습니다.  \\r\\n하지만, react의 useRef 내부구현은 생각보다 이해하기 어려웠었습니다.\\r\\n\\r\\npreact의 경우에는 저희 과제는 useRef를 사용해 useMemo를 만들기 때문에 다소 당황스럽기도 했습니다.\\r\\n\\r\\n```ts\\r\\n// react\\r\\nexport function useRef<T>(initialValue: T): {current: T} {\\r\\n  const dispatcher = resolveDispatcher();\\r\\n  return dispatcher.useRef(initialValue);\\r\\n}\\r\\n\\r\\n// 내부 구현 \\r\\n// 첫 렌더링시에는 초기 값을 저장하는 로직\\r\\nfunction mountRef<T>(initialValue: T): {current: T} {\\r\\n  const hook = mountWorkInProgressHook();\\r\\n  const ref = {current: initialValue}; // ref에 저장\\r\\n  hook.memoizedState = ref; \\r\\n  return ref;\\r\\n}\\r\\n\\r\\n// 두 번쨰 렌더링 부터는 저장한 값만 가져오는 로직\\r\\nfunction updateRef<T>(initialValue: T): {current: T} {\\r\\n  const hook = updateWorkInProgressHook(); \\r\\n  return hook.memoizedState; \\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n```ts\\r\\n// preact\\r\\n/** @type {(initialValue: unknown) => unknown} */\\r\\nexport function useRef(initialValue) {\\r\\n\\tcurrentHook = 5;\\r\\n\\treturn useMemo(() => ({ current: initialValue }), []);\\r\\n}\\r\\n```\\r\\n과제 요구사항 중 주석으로 useState를 활용하는 힌트를 가지고 다시 확장된 사고를 이어갔습니다. useState의 인자에 함수를 넣으면 최초렌더링시에 한 번 만 실행하는 것을 생각해냈습니다.\\r\\n\\r\\nuseState의 인자에 함수를 넣으면 최초 렌더링 시에만 실행되는 특성을 활용해, 참조 타입 객체를 state로 저장하여 메모리 주소값을 고정시키고, setter 함수 없이 state 객체에 직접 접근하는 방식으로 구현했습니다.\\r\\n\\r\\n그리고 리액트 내부 코드를 들여다보니 이전에 확인했던 useRef 구현체가 조금이나마 이해할 수 있었습니다.\\r\\nuseState는 initailState가 함수타입이라면 실행시켜서 hook.memoizedState에 저장하는 것과 useRef에서 직접 {current: initialValue} 로 current 값을 저장하는 유사점을 확인 할 수 있었습니다.\\r\\n\\r\\n```ts\\r\\n// 실제 첫 렌더링 시에 useState 내부에서 실행되는 함수\\r\\nfunction mountState<S>(\\r\\n  initialState: (() => S) | S,\\r\\n): [S, Dispatch<BasicStateAction<S>>] {\\r\\n  const hook = mountStateImpl(initialState);\\r\\n  const queue = hook.queue;\\r\\n  const dispatch: Dispatch<BasicStateAction<S>> = (dispatchSetState.bind(\\r\\n    null,\\r\\n    currentlyRenderingFiber,\\r\\n    queue,\\r\\n  ): any);\\r\\n  queue.dispatch = dispatch;\\r\\n  return [hook.memoizedState, dispatch];\\r\\n}\\r\\n\\r\\nfunction mountStateImpl<S>(initialState: (() => S) | S): Hook {\\r\\n  const hook = mountWorkInProgressHook();\\r\\n  if (typeof initialState === \'function\') { // useState 상태 초기값이 함수일 때\\r\\n    const initialStateInitializer = initialState;\\r\\n    initialState = initialStateInitializer(); \\r\\n    \\r\\n    // 중략\\r\\n    }\\r\\n  }\\r\\n  hook.memoizedState = hook.baseState = initialState;  // 함수 실행한 초기상태 값 \\r\\n  const queue: UpdateQueue<S, BasicStateAction<S>> = {\\r\\n    pending: null,\\r\\n    lanes: NoLanes,\\r\\n    dispatch: null,\\r\\n    lastRenderedReducer: basicStateReducer,\\r\\n    lastRenderedState: (initialState: any),\\r\\n  };\\r\\n  hook.queue = queue;\\r\\n  return hook;\\r\\n}\\r\\n```\\r\\n\\r\\n#### `Object.is`와 `===`\\r\\n\\r\\n기존에는 일치 연산자(`===`)를 관성적으로 사용했었는데, 이번 과제를 통해 Object.is의 특성과 리액트에서의 활용 맥락을 더 깊이 이해하게 되었습니다.\\r\\n\\r\\n```ts\\r\\n// packages/lib/src/equals/shallowEquals.ts\\r\\n// before\\r\\n  // 4. 모든 키에 대해 얕은 비교 수행\\r\\n  for (const key of kyesA) {\\r\\n    if (!(key in b) || (a as Record<string, unknown>)[key] !== (b as Record<string, unknown>)[key]) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n// after\\r\\n  for (const key of keysA) {\\r\\n    if (!(key in b) || !Object.is((a as Record<string, unknown>)[key], (b as Record<string, unknown>)[key])) {\\r\\n      return false;\\r\\n    }\\r\\n```\\r\\n\\r\\nNaN, +0, -0 등의 특수 케이스를 정확하게 다루기 위해 Object.is를 사용하도록 리팩토링했으며, 얕은 비교 함수가 리액트의 의존성 배열 비교 로직과 별개로 동작한다는 점도 명확하게 이해할 수 있었습니다.\\r\\n\\r\\n\\r\\n#### 리액트 프로파일러\\r\\n\\r\\nToastProvider, ModalProvider 최적화 과제를 수행하면서 리액트 프로파일러를 본격적으로 활용했습니다. \\r\\n어떤 트리거에서 어떤 렌더링이 일어나는지, 어떤 부분을 메모이제이션하면 리렌더링을 방지할 수 있는지를 시각적으로 파악할 수 있어 매우 유용했습니다.\\r\\n\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\nuseState를 활용한 useRef 구현이 가장 만족스러웠습니다. \\r\\n처음에는 전역 상태 관리 방식으로만 접근하려 했었고, useState 힌트조차 이해하지 못했었습니다. \\r\\n하지만 결국 useState의 기능과 원리를 다시 복습하며 완성한 코드라서 특별한 의미가 있습니다.\\r\\n\\r\\n```ts\\r\\nexport function useRef<T>(initialValue: T): { current: T } {\\r\\n  const [refObejct] = useState(() => ({\\r\\n    current: initialValue,\\r\\n  }));\\r\\n  \\r\\n  return refObejct;\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\nToastProvider에서 상태와 액션 프로바이더를 분리하면서 복잡도가 높아진 것 같은 기분이 듭니다.  기분이...\\r\\n\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n#### 실무 관련 내용\\r\\n현재 디자인 시스템 컴포넌트 개발에서 컴파운드 컴포넌트 패턴과 Context API를 자주 사용하고 있습니다. \\r\\n이번 3주차 과제를 통해 어떤 값을 메모이제이션해야 하는지, 어디에 집중해야 하는지에 대한 방향의 이정표가 될 수 있었습니다.\\r\\n\\r\\n같은 날 업무로 아코디언 컴포넌트를 개발했는데, 멀티 아코디언이 아닌 이상 특정 인터랙션에 하나의 아코디언 컴포넌트만 리렌더링 되는 게 자연스러워, 무분별한 메모이제이션이 오히려 불필요할 수 있다는 점을 깨달았습니다.\\r\\n\\r\\n그동안 관성적으로 메모이제이션을 사용해왔을 가능성이 있지만, 이번 경험을 계기로 메모이제이션이 실제 유의미한 상황인지 프로파일링과 함께 고민할 수 있었습니다.\\r\\n\\r\\n#### 가장 큰 배움이 있었던 부분\\r\\n\\r\\n사실, react 라이브러리의 내부 구현을 찾아볼 때 다음과 같은 코드를 만나면 더 이상 찾아보려 하지 않았었습니다.\\r\\n```tsx\\r\\nimport * as React from \'react\';\\r\\n\\r\\nconst ReactSharedInternals =\\r\\n  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;\\r\\n\\r\\nexport default ReactSharedInternals;\\r\\n```\\r\\n하지만 이번 과제를 계기로 **\\"다른 개발자들은 어떻게 내부 구현을 추적하고 분석하는가?\\"**에 대한 궁금증이 생겼습니다.\\r\\n여러 블로그와 자료를 찾아보며 코드 흐름을 따라가는 방법들도 함께 학습할 수 있었습니다.\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n진행한 과제 중 3주차 요구사항이 가장 친절하고 재미있었습니다. \\r\\n덕분에 오픈소스 라이브러리 코드를 확인해보는 시간을 가질 수 있어서 부가적인 학습 효과까지 얻을 수 있었습니다.\\r\\n\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n#### 리액트 렌더링 과정\\r\\n\\r\\n1) 트리거(Trigger): 렌더링 시작 신호\\r\\n\\r\\n- 상태(state)나 props가 변경될 때, 혹은\xA0**`ReactDOM.createRoot(...).render(<App />)`**\xA0코드처럼 최초 마운트 시 렌더링이 시작됩니다.\\r\\n- 여러 상태 변화를 한 번에 처리하는 Batching 기법이 적용되어, 실제로는 한 번만 렌더링됩니다.\\r\\n- React 18부터는 비동기 콜백 내부에서 발생하는 여러 렌더링 트리거도 한 번에 묶어 처리할 수 있게 개선되었습니다.\\r\\n\\r\\n2) Render 단계: 가상 DOM 생성 및 준비\\r\\n\\r\\n- JSX 문법을 통해 만들어진 UI 구조는 내부적으로 JS 객체(React Element)로 변환됩니다.\\r\\n- 실제 DOM 대신 Virtual DOM(가상 DOM)이라는 메모리 내 구조가 만들어집니다.\\r\\n- Virtual DOM상에 Fiber라는 단위 객체가 각 컴포넌트별로 생성되어, 상태, 이펙트, 업데이트 정보 등을 보관합니다.\\r\\n\\r\\n3) Reconciliation(재조정): 변화점 감지\\r\\n\\r\\n- 새롭게 만들어진 Virtual DOM 트리와 직전의 트리를 비교(diffing)합니다.\\r\\n- 변화가 필요한 부분만 찾아내기 위해 key 등 휴리스틱 알고리즘을 사용, 성능을 O(n)까지 최적화합니다.\\r\\n- 변경이 발생한 요소만 선별해 실제 DOM 변경이 이루어지도록 준비합니다.\\r\\n\\r\\n4) Commit 단계\\r\\n\\r\\n- 변화가 감지된 부분만 실제 DOM에 반영합니다.\\r\\n- 이 시점에 컴포넌트의 생명주기 메서드(`componentDidMount`,\xA0`componentDidUpdate`,\xA0`componentWillUnmount` 등) 또는 함수형 컴포넌트의 이펙트 훅(`useEffect`,\xA0`useLayoutEffect`\xA0등)이 실행됩니다.\\r\\n\\r\\n##### 렌더링 최적화 방법\\r\\n\\r\\n- **memo** : 동일한 props에 대해 불필요한 컴포넌트 리렌더링 방지합니다.\\r\\n- **커스텀훅 `useMemo`와 `useCallback`**: 값 또는 함수를 메모이제이션하여 무거운 새로운계산 및 재생성을 방지합니다.\\r\\n- **index가 아닌 key 사용**: 리스트 컴포넌트에서 알맞은 key을 지정할 경우에 diff 알고리즘의 효율을 높일 수 있습니다. index를 사용할 경우에는 순서가 바뀌거나 리스트 아이템이 바뀔 경우에 알아채지 못하게 되어 효율성이 저하됩니다.\\r\\n- 상태 관리: 자주 변경되는 상태와 그렇지 않은 상태를 분리하고, 전역 상태보다는 지역 상태를 사용하는 것으로 사이드 이펙트로 인한 리렌더링을 줄입니다.\\r\\n\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n커스텀훅을 만들 때, 해당 훅이 실제로 어디서 어떻게 사용될지 모르기 때문에 보통 외부로 내보내는 함수는 `useCallback`으로 감싸서 `export`하려고 합니다. \\r\\n실제로 prop으로 핸들러 함수가 내려가는 경우, 이 참조가 바뀔 때마다 하위 컴포넌트가 불필요하게 리렌더링되는 현상을 방지하는 용도로 많이 쓰게 됩니다.\\r\\n\\r\\n또한, 데이터(리스트 등)가 변경되지 않으면 `React.memo`나 `useMemo`를 활용해서 컴포넌트나 연산 결과를 캐싱하는 경험도 자주 했습니다.\\r\\n복잡하거나 연산 비용이 비싼 작업이 반복될 경우에도 useMemo로 값을 캐싱해 연산 횟수를 줄입니다.\\r\\n\\r\\nUI에서 리렌더링이 자주 일어나서 성능에 영향을 줄 수 있는 상황에는 `useMemo` 혹은 `useCallback`으로 불필요한 재계산과 리렌더를 최소화하려고 노력합니다.\\r\\n\\r\\n대신, 필요 이상으로 메모이제이션을 남용하는 것은 오히려 코드의 복잡도만 올릴 수 있으니, 가능하면 상태나 함수를 외부 모듈로 분리하여 참조가 바뀌지 않게 설계하거나, 상태 분리로 리렌더링 범위를 최대한 좁히는 것에도 신경씁니다.\\r\\n\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n3주차 발제 시간 후 팀별 활동에서 *`주제3` Context와 전역상태 라이브러리의 차이점은 뭘까요?* 에 대해서 이야기를 나누게 되었었습니다.\\r\\n\\r\\n당시에는 저는 이렇게 작성했었습니다.\\r\\n\\r\\n> 이지현: context는 상태를 공유하고싶은 원하는 범위가 명확하거나 **프롭드릴링**을 해소하기 위해 사용합니다. \\r\\n> 전역상태 라이브러리의 경우에는 사용 범위가 프로젝트 전체 단위로 광범위적일 때 많이 사용하고 있습니다.\\r\\n> \\r\\n\\r\\n대체로 contextAPI로는 컴파운드 컴포넌트를 만들 때 자주 활용했습니다. \\r\\n이때까지의 경험기반으로 작성하고 이야기를 했었는데 과제를 하면서 또 다른 생각을 가지게 되었습니다.\\r\\n\\r\\nToastProvider 같은 리렌더링에 민감한 케이스에서 `contextAPI`만으로는 성능 최적화가 까다롭다는 걸 새삼 느꼈습니다. \\r\\n특히 state와 action 분리, provider value의 메모이제이션, 관련 함수들의\xA0useCallback\xA0처리 등 수동 최적화 작업이 상당히 많다는 것을 경험했습니다.\\r\\n\\r\\n이 과정을 겪으면서, 그동안\xA0`useMemo`,\xA0`useCallback`을 습관적으로 사용해왔고 실제 리렌더링 여부를 프로파일링하지 않았다는 반성도 하게 됐습니다. \\r\\n\\r\\n이러한 작업을 진행하다보니, 리렌더링에 민감한 케이스라면 `contextAPI` 보다는 상태 관리 라이브러리를 사용하여 성능 최적화 및 개발 편의성까지 동시에 고려하는 것도 더 좋은 선택일 수 있겠다는 생각이 들었습니다\\r\\n\\r\\n\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n\\r\\n- ** contextAPI를 활용한 코드를 작성하다보면 어떻게 파일 및 코드 분리를 해놓을지 고민이 되기도합니다.**\\r\\n    \\r\\n    예를들면, 컴파운트 컴포넌트를 만들다고 했을때 context provider와 다른요소들을 한 파일에 둘지 하나의 폴더에 하위 파일로 요소마다 분리할지 고민입니다. 이 부분은 주관이기도 하고 컨벤션이기도 하지만, 만약 컨벤션이 없는 상황이라면 코치님은 어떻게 하시는지 궁금합니다.\\r\\n    \\r\\n- **Object.is와 shallowEquals를 보면서 궁금했던 부분이 있습니다.**\\r\\n    \\r\\n    상태저장소를 만드는 createStore에서는 Object.is사용하여 빠른 최적화과 함께 참조값을 비교하여 상태를 업데이트하고있습니다. 이는 리액트내부에서 dispatch가 빈번하게 발생할 수도 있다는 관점으로 생각하면 합리적이라고 생각합니다. \\r\\n    그렇다면 store보다는 set하는 빈도수가 적게 사용할 것 같은 createStorage는 shallowEquals를 사용하여 얕은 비교까지 하여 업데이트하는 방식으로 최적화하는 것에 대해서는 어떻게 생각하시나요? 이 또한, 어떤 대량의 데이터가 저장될지 모르니 Object.is가 더 괜찮은 선택일까요?\\r\\n","created_at":"2025-07-20T06:14:49Z","updated_at":"2025-07-26T05:20:18Z","closed_at":null,"merged_at":null,"merge_commit_sha":"f8c8b2eb48cdc56aee78fcac5e4b4025577ebd27","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/17/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/17/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/17/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/1bbfb0c04e253aeb299988e26d7d1ab67d737b24","head":{"label":"j2h30728:main","ref":"main","sha":"1bbfb0c04e253aeb299988e26d7d1ab67d737b24","user":{"login":"j2h30728","id":60846068,"node_id":"MDQ6VXNlcjYwODQ2MDY4","avatar_url":"https://avatars.githubusercontent.com/u/60846068?v=4","gravatar_id":"","url":"https://api.github.com/users/j2h30728","html_url":"https://github.com/j2h30728","followers_url":"https://api.github.com/users/j2h30728/followers","following_url":"https://api.github.com/users/j2h30728/following{/other_user}","gists_url":"https://api.github.com/users/j2h30728/gists{/gist_id}","starred_url":"https://api.github.com/users/j2h30728/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/j2h30728/subscriptions","organizations_url":"https://api.github.com/users/j2h30728/orgs","repos_url":"https://api.github.com/users/j2h30728/repos","events_url":"https://api.github.com/users/j2h30728/events{/privacy}","received_events_url":"https://api.github.com/users/j2h30728/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022917171,"node_id":"R_kgDOPPh6Mw","name":"front_6th_chapter1-3","full_name":"j2h30728/front_6th_chapter1-3","private":false,"owner":{"login":"j2h30728","id":60846068,"node_id":"MDQ6VXNlcjYwODQ2MDY4","avatar_url":"https://avatars.githubusercontent.com/u/60846068?v=4","gravatar_id":"","url":"https://api.github.com/users/j2h30728","html_url":"https://github.com/j2h30728","followers_url":"https://api.github.com/users/j2h30728/followers","following_url":"https://api.github.com/users/j2h30728/following{/other_user}","gists_url":"https://api.github.com/users/j2h30728/gists{/gist_id}","starred_url":"https://api.github.com/users/j2h30728/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/j2h30728/subscriptions","organizations_url":"https://api.github.com/users/j2h30728/orgs","repos_url":"https://api.github.com/users/j2h30728/repos","events_url":"https://api.github.com/users/j2h30728/events{/privacy}","received_events_url":"https://api.github.com/users/j2h30728/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/j2h30728/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/j2h30728/front_6th_chapter1-3/deployments","created_at":"2025-07-20T06:00:44Z","updated_at":"2025-07-24T19:03:02Z","pushed_at":"2025-07-24T19:03:26Z","git_url":"git://github.com/j2h30728/front_6th_chapter1-3.git","ssh_url":"git@github.com:j2h30728/front_6th_chapter1-3.git","clone_url":"https://github.com/j2h30728/front_6th_chapter1-3.git","svn_url":"https://github.com/j2h30728/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":293,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/17"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/17"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/17"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/17/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/17/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/17/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/1bbfb0c04e253aeb299988e26d7d1ab67d737b24"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/18","id":2679690373,"node_id":"PR_kwDOPMCTuc6fuNSF","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/18","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/18.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/18.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/18","number":18,"state":"open","locked":false,"title":"[8팀 김민지] Chapter 1-3. React, Beyond the Basics ","user":{"login":"annkimm","id":27846161,"node_id":"MDQ6VXNlcjI3ODQ2MTYx","avatar_url":"https://avatars.githubusercontent.com/u/27846161?v=4","gravatar_id":"","url":"https://api.github.com/users/annkimm","html_url":"https://github.com/annkimm","followers_url":"https://api.github.com/users/annkimm/followers","following_url":"https://api.github.com/users/annkimm/following{/other_user}","gists_url":"https://api.github.com/users/annkimm/gists{/gist_id}","starred_url":"https://api.github.com/users/annkimm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/annkimm/subscriptions","organizations_url":"https://api.github.com/users/annkimm/orgs","repos_url":"https://api.github.com/users/annkimm/repos","events_url":"https://api.github.com/users/annkimm/events{/privacy}","received_events_url":"https://api.github.com/users/annkimm/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://annkimm.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [X] shallowEquals 구현 완료\\r\\n- [X] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [X] useRef 구현 완료\\r\\n- [X] useMemo 구현 완료\\r\\n- [X] useCallback 구현 완료\\r\\n- [X] useDeepMemo 구현 완료\\r\\n- [X] useShallowState 구현 완료\\r\\n- [X] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [X] memo 구현 완료\\r\\n- [X] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [X] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [X] useShallowSelector 구현\\r\\n- [X] useStore 구현\\r\\n- [X] useRouter 구현\\r\\n- [X] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [X] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n기존에 너무 AI에 의존한 것에 대해서 어떻게 하면 개선할 수 있을까 고민하다가\\r\\n대신에 AI에게 코드 없이 구현해야하는 함수를 어떻게 하면 \\r\\n짤 수 있을지 순서를 정하고 흐름을 알려주는 방식으로 바꿨다.\\r\\n이른바 AI를 튜터처럼 쓰기 개시...!\\r\\n\\r\\n가끔 너무 많은 흐름을 알려줄 때도 있었지만,\\r\\n두번째 과제보다는 이번 과제를 해보면서\\r\\n과제를 스스로 구현할 수 있는 힘을 좀 더 기르고 있다는 생각이 들었다.\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n- 다른 훅들도 의외로 useState와 useRef를 기반으로 구현\\r\\n이를 통해 useState와 useRef가 훅의 근간을 이루는 필수 개념임을 깨달았다.\\r\\n\\r\\n-  useAutoCallback과 useCallback의 차이점에 대한 이해\\r\\n그동안 useCallback을 너무 무지성으로 썼다는 것을 알 수 있었던 지점 중에 하나였다. \\r\\nuseCallback은 의존성 배열에 따라 값이 바뀌면 새로 참조된다는 것을 새롭게 알 수 있었고,\\r\\nuseAutoCallback은 한번만 참조하기 때문에 특히나 성능 최적화에 유리하다는 것까지 이번에 알 수 있었다.\\r\\n\\r\\n- useShallowSelector와 useShallowState 차이\\r\\nuseShallowSelector ->  얕은 비교를 하는 함수의 역할, (useSyncExternalStore 같은 store가 없기 때문에 구독을 할 수 없다)\\r\\nuseShallowState -> context api, useState 같은 데에서 불필요한 리렌더링을 줄일 때 사용하는 역할\\r\\n\\r\\n- useStorage, useStore 차이\\r\\nuseStorage -> localStorage 같은 Storage에서 값이 변경되면 컴포넌트를 재리렌더링 역할\\r\\nuseStore -> 구독해서 바뀌는 것, 즉 zustand같은 라이브러리 역할\\r\\n\\r\\n- 생각보다 deepEqual은 사용하지 않는다는 점을 봤을 때, 연산에 대한 성능을 위해 쓰지 않는걸까라는 생각이 들었다. \\r\\n    \\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n없다...\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\nshallowEquals에서 객체로 비교한 구문과 배열로 비교한 구문을 따로 함수로 뺐으면 좋았을 것 같다.\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n기술적 성장으로 대체\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n저는 2주차 과제보다\\r\\n이번주차 과제가 더 재밌었어요...\\r\\n회사에서 아무 생각없이 훅을 쓰게 되는데\\r\\n여기서 구현해봄으로써 이건 굳이 필요할까?\\r\\n라는 생각을 더 해보게 되었습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n1. 업데이트 트리거\\r\\n- 사용자 상호작용 (클릭, 입력 등)\\r\\n- setState() 또는 useState setter 호출\\r\\n- useReducer의 dispatch() 실행\\r\\n- 부모로부터 받은 props 변경\\r\\n- 네트워크 응답 또는 타이머 콜백\\r\\n\\r\\n2. 스케줄링\\r\\n- 들어온 업데이트를 배치 처리\\r\\n- 동기 모드(이벤트 루프 후 즉시)\\r\\n- Concurrent 모드(우선순위에 따라 분할 실행)\\r\\n- React 스케줄러로 작업 정리\\r\\n\\r\\n3. 렌더(Render) 단계\\r\\n- 함수형 컴포넌트 실행 또는 클래스 render() 호출\\r\\n- 새로운 가상 DOM 트리 생성\\r\\n- 순수 연산만 수행 (부작용 없음)\\r\\n\\r\\n4. 리콘실리에이션(Reconciliation)\\r\\n- 이전 가상 DOM과 새 가상 DOM 비교(diff)\\r\\n- 변경될 노드 삽입·삭제·속성 업데이트 목록 계산\\r\\n- key 기반으로 리스트 항목 효율적 매핑\\r\\n\\r\\n5. 커밋(Commit) 단계\\r\\n- Before Mutation: getSnapshotBeforeUpdate 호출\\r\\n- Mutation: 실제 DOM에 노드 추가·삭제·속성 변경\\r\\n- Layout: useLayoutEffect 또는 componentDidUpdate 동기 실행\\r\\n\\r\\n6. 사이드 이펙트 처리\\r\\n- 브라우저 레이아웃 완료 후 실행\\r\\n- useEffect 또는 componentDidMount/componentDidUpdate\\r\\n- 네트워크 요청, 구독 설정, 이벤트 등록 등 수행\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n- 기본적으로 리액트가 성능 최적화를 다해주기 때문에 굳이 메모리제이션을 쓸 필요는 없다고 생각합니다.\\r\\n- 다만 굳이 사용한다면 API 통신으로 값을 업데이트할 때나 같은 함수나 연산이 반복된다면 그 정도는 할만하다고 생각합니다.\\r\\n- 메모리제이션으로 캐시를 물고 있는 것 자체도 다 성능에 문제를 일으킬 수 있기 때문에 굳이 꼭 필요한 게 아니라면 저는 사용하는 것 보단 사용하지 않는 걸 더 추천합니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n- Context API를 사용해보면서의 느낀 장점은 일단 이전에는 컴포넌트에 모든 값을 props로 전달해줘야 해서 props drilling이 너무 깊어져서 일일히 props 전달하는 것도 굉장히 귀찮은 일이고, 어디까지 이어져 있는지 알 수 없어서 힘든 일이엇지만, 이제는 Context API로 한 번 선언하면 어디서든 간단하게 가져다 쓸 수 있는게 굉장히 편리하고 간단해서 메리트라고 생각이 들었습니다.\\r\\n- 하지만 하나의 페이지 안에 데이터가 굉장히 많아지게 되면 Context API에 그 데이터를 다 관리하다보니 관리하기도 힘들고 너무 불필요한 렌더링이 여러번 일어난다는 걸 알 수 있었습니다. 이번에 토스트 과제에서 `ToastContext` 부분을 함수 부분과 변수부분으로 나눠서 관리하는 방법을 보고 아 저런 방법이 있겠구나 생각이 들었습니다. 오...너무 무거워지지 않게 분산 투자는 중요하구나..(유레카...?!)\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n- 이번에 useCallback와 useAutoCallback에 대해서 구현하면서 생각이 든건데 useCallback은 의존성 배열에서 따라서 새로 참조한다고 이번에 알게 되었는데, 그냥 드는 생각은 의존성 배열 대신에 매개변수로 받아서 useAutoCallback으로 하먄 될 꺼 같은데 왜 useCallback가 생겨났는지에 대한 이해가 잘 되지 않더라구요. 이렇게 함으로써 장점이 있나요? 성능 최적화의 부분으로써는 최악? 이라는 생각이 드는데.. 의존성 배열에 값이 바뀌면 다시 계속 새로 참조해야 하잖아요.\\r\\n\\r\\n- deepEquals에서 배열 부분을 짤 때 flat을 이용해서 평탄화시킨 다음에 `JSON.stringify`를 사용해서 짰는데요.. \\r\\n역시 이렇게 짜면 안좋은걸까요? for문이나 이런 걸로 하나씩 다 비교하는 게 맞는 걸까요? (과제는 다 통과하긴 했지만...)\\r\\n뭔가 더 간단한 방법이 없을까 싶어서 해보긴 했지만 틀린건가라는 생각이 들더라구요.\\r\\n\\r\\n```\\r\\n  if (Array.isArray(a) && Array.isArray(b)) {\\r\\n    if (a.length !== b.length) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    const flattedA = a.flat(Infinity);\\r\\n    const flattedB = b.flat(Infinity);\\r\\n    return JSON.stringify(flattedA) === JSON.stringify(flattedB);\\r\\n  }\\r\\n```","created_at":"2025-07-20T07:06:23Z","updated_at":"2025-07-28T07:51:00Z","closed_at":null,"merged_at":null,"merge_commit_sha":"2d519617f472bd624478db5b304e0c45b84e1ea5","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/18/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/18/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/18/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/86d27394418cbc070c794355555deebdcad49028","head":{"label":"annkimm:main","ref":"main","sha":"86d27394418cbc070c794355555deebdcad49028","user":{"login":"annkimm","id":27846161,"node_id":"MDQ6VXNlcjI3ODQ2MTYx","avatar_url":"https://avatars.githubusercontent.com/u/27846161?v=4","gravatar_id":"","url":"https://api.github.com/users/annkimm","html_url":"https://github.com/annkimm","followers_url":"https://api.github.com/users/annkimm/followers","following_url":"https://api.github.com/users/annkimm/following{/other_user}","gists_url":"https://api.github.com/users/annkimm/gists{/gist_id}","starred_url":"https://api.github.com/users/annkimm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/annkimm/subscriptions","organizations_url":"https://api.github.com/users/annkimm/orgs","repos_url":"https://api.github.com/users/annkimm/repos","events_url":"https://api.github.com/users/annkimm/events{/privacy}","received_events_url":"https://api.github.com/users/annkimm/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022457217,"node_id":"R_kgDOPPF1gQ","name":"front_6th_chapter1-3","full_name":"annkimm/front_6th_chapter1-3","private":false,"owner":{"login":"annkimm","id":27846161,"node_id":"MDQ6VXNlcjI3ODQ2MTYx","avatar_url":"https://avatars.githubusercontent.com/u/27846161?v=4","gravatar_id":"","url":"https://api.github.com/users/annkimm","html_url":"https://github.com/annkimm","followers_url":"https://api.github.com/users/annkimm/followers","following_url":"https://api.github.com/users/annkimm/following{/other_user}","gists_url":"https://api.github.com/users/annkimm/gists{/gist_id}","starred_url":"https://api.github.com/users/annkimm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/annkimm/subscriptions","organizations_url":"https://api.github.com/users/annkimm/orgs","repos_url":"https://api.github.com/users/annkimm/repos","events_url":"https://api.github.com/users/annkimm/events{/privacy}","received_events_url":"https://api.github.com/users/annkimm/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/annkimm/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/annkimm/front_6th_chapter1-3/deployments","created_at":"2025-07-19T05:42:24Z","updated_at":"2025-07-23T12:00:37Z","pushed_at":"2025-07-23T13:05:35Z","git_url":"git://github.com/annkimm/front_6th_chapter1-3.git","ssh_url":"git@github.com:annkimm/front_6th_chapter1-3.git","clone_url":"https://github.com/annkimm/front_6th_chapter1-3.git","svn_url":"https://github.com/annkimm/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":351,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/18"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/18"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/18"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/18/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/18/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/18/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/86d27394418cbc070c794355555deebdcad49028"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/19","id":2679690463,"node_id":"PR_kwDOPMCTuc6fuNTf","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/19","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/19.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/19.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/19","number":19,"state":"open","locked":false,"title":"[5팀 허정석] Chapter 1-3. React, Beyond the Basics","user":{"login":"heojungseok","id":99116541,"node_id":"U_kgDOBehl_Q","avatar_url":"https://avatars.githubusercontent.com/u/99116541?v=4","gravatar_id":"","url":"https://api.github.com/users/heojungseok","html_url":"https://github.com/heojungseok","followers_url":"https://api.github.com/users/heojungseok/followers","following_url":"https://api.github.com/users/heojungseok/following{/other_user}","gists_url":"https://api.github.com/users/heojungseok/gists{/gist_id}","starred_url":"https://api.github.com/users/heojungseok/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/heojungseok/subscriptions","organizations_url":"https://api.github.com/users/heojungseok/orgs","repos_url":"https://api.github.com/users/heojungseok/repos","events_url":"https://api.github.com/users/heojungseok/events{/privacy}","received_events_url":"https://api.github.com/users/heojungseok/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n[PR만이 유일하게 이 잔혹한 세계에 저항할 방법이다!!](https://heojungseok.github.io/front_6th_chapter1-3/)\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\nReact, Beyond the Basics....\\r\\n기초를 넘어서기 위한 3주차 과제가 끝났다. 1, 2주차에서 JS 로 SPA 를 구현하면서 3주차가 되게 힘들거라고 예상했다.\\r\\n리액트를 써보지 않은 입장에서 React hooks, React 메모이제이션, ... 험난했다. (+ Typescript 또한 안써봤다...)\\r\\n그래도 1, 2 주차에 예방주사를 좀 맞아 놓은 덕에 내 예상보다는 조금은 수월하게 진행했다. 그렇다고 절대 쉽다는 말은 아니다.\\r\\n1주였지만 리액트라는 것을 조금은 알아간거에 만족하고있다. 더 알아갈 일만 남았다.\\r\\n그리고 양질의 과제 준비하시느라 고생 많으셨습니다. 준일 코치님! \\r\\n\\"To infinity… and beyond!\\"\\r\\n<img width=\\"300\\" height=\\"300\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/03fb19ff-4611-47d3-9d67-65c5d760c7d7\\" />\\r\\n\\r\\n#### TIL 링크\\r\\n* [equalities 만들기](https://velog.io/@jungseokheo/til5th)\\r\\n* [React Hooks: useRef](https://velog.io/@jungseokheo/til6th)\\r\\n* [React Hooks: useMemo](https://velog.io/@jungseokheo/til7th)\\r\\n* [React Hooks: useCallback](https://velog.io/@jungseokheo/til8th)\\r\\n* [React Hooks: useShallowState](https://velog.io/@jungseokheo/til9th)\\r\\n* [React Hooks: useAutoCallback](https://velog.io/@jungseokheo/til10th)\\r\\n* [Higher-Order Component - HOC: memo](https://velog.io/@jungseokheo/til11th)\\r\\n* [활용해보기](https://velog.io/@jungseokheo/til12th)\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n새로 학습한 개념들은 너무나도 많았다. 어쩌면 전부 다 새로 학습한 개념이라해도 무방하다.\\r\\n나는 최대한 덜 움직이고 효율적이게 효과를 내는 것을 좋아하기에 **메모이제이션** 이 제일 기억에 남는다.\\r\\n\\r\\n`memo (컴포넌트 메모이제이션), useMemo (값을 메모이제이션), useCallback (함수를 메모이제이션)`\\r\\n\\r\\n* 불필요한 렌더링을 방지\\r\\n* 복잡한 계산과 큰 데이터 세트를 다룰 때 이전 결과를 재사용함으로써 비용을 줄일 수 있음\\r\\n ⬇️ ⬇️ ⬇️ ⬇️ ⬇️\\r\\n* 컴포넌트 예측 가능성을 높임\\r\\n* 버그를 줄임\\r\\n* 확장성과 유지보수성 증대\\r\\n\\r\\n메모이제이션에 대한 생각은 아래 항목에 정리하겠다.\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n커밋 링크: [refactor: ToastProvider 리팩토링](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/19/commits/09ec2333645d891a882766a32d2bd6d63c38b5f3)\\r\\n\\r\\n```javascript\\r\\n/* eslint-disable react-refresh/only-export-components */\\r\\nimport { createContext, memo, type PropsWithChildren, useContext, useReducer } from \\"react\\";\\r\\nimport { createPortal } from \\"react-dom\\";\\r\\nimport { Toast } from \\"./Toast\\";\\r\\nimport { createActions, initialState, toastReducer, type ToastType } from \\"./toastReducer\\";\\r\\nimport { debounce } from \\"../../utils\\";\\r\\nimport { useCallback, useMemo } from \\"@hanghae-plus/lib/src/hooks\\";\\r\\n\\r\\ntype ShowToast = (message: string, type: ToastType) => void;\\r\\ntype Hide = () => void;\\r\\n// Context 분리\\r\\n// 상태 Context\\r\\nconst ToastStateContext = createContext<{\\r\\n  message: string;\\r\\n  type: ToastType;\\r\\n}>({ ...initialState });\\r\\n// 이벤트 Context\\r\\nconst ToastCommandContext = createContext<{ show: ShowToast; hide: Hide }>({\\r\\n  show: () => null,\\r\\n  hide: () => null,\\r\\n});\\r\\n\\r\\nconst DEFAULT_DELAY = 3000;\\r\\n// Hook 수정\\r\\nexport const useToastCommand = () => useContext(ToastCommandContext);\\r\\nexport const useToastState = () => useContext(ToastStateContext);\\r\\n\\r\\nexport const ToastProvider = memo(({ children }: PropsWithChildren) => {\\r\\n  const [state, dispatch] = useReducer(toastReducer, initialState);\\r\\n  const { show, hide } = useMemo(() => createActions(dispatch), [dispatch]);\\r\\n  const visible = state.message !== \\"\\";\\r\\n  // 메모이제이션\\r\\n  const hideAfter = useMemo(() => debounce(hide, DEFAULT_DELAY), [hide]);\\r\\n  // 메모이제이션\\r\\n  const showWithHide: ShowToast = useCallback(\\r\\n    (...args) => {\\r\\n      show(...args);\\r\\n      hideAfter();\\r\\n    },\\r\\n    [show, hideAfter],\\r\\n  );\\r\\n  // props 로 넘길 값 (메모이제이션)\\r\\n  const commandValue = useMemo(\\r\\n    () => ({\\r\\n      show: showWithHide,\\r\\n      hide: hide,\\r\\n    }),\\r\\n    [showWithHide, hide],\\r\\n  );\\r\\n  return (\\r\\n    // Provider 중첩\\r\\n    <ToastCommandContext.Provider value={commandValue}>\\r\\n      <ToastStateContext.Provider value={state}>\\r\\n        {children}\\r\\n        {visible && createPortal(<Toast />, document.body)}\\r\\n      </ToastStateContext.Provider>\\r\\n    </ToastCommandContext.Provider>\\r\\n  );\\r\\n});\\r\\n\\r\\n\\r\\n```\\r\\n\\r\\n<img width=\\"1567\\" height=\\"626\\" alt=\\"구현_힌트\\" src=\\"https://github.com/user-attachments/assets/828ec475-09f9-4db3-9822-1bacde7630a5\\" />\\r\\n\\r\\n위 이미지는 Gemini CLI 를 통해서 리팩토링을 위해서는 어떻게 해야하는지에 대한 구현 힌트를 얻은 부분이다. (+ 3팀분들의 도움)\\r\\n처음부터 끝 까지 스스로 하진 못했지만 내가 생각하기엔 배운 내용을 정리 및 활용하기에 좋았다.\\r\\n좋은 테스트 항목을 넣어주신거 같다. 약간 엑기스 같은 느낌이 강하다.\\r\\n\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n```ts\\r\\nimport type { AnyFunction } from \\"../types\\";\\r\\nimport { useCallback } from \\"./useCallback\\";\\r\\nimport { useRef } from \\"./useRef\\";\\r\\n\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  // 매 렌더링마다 latestFnRef.current 값이 업데이트됩니다.\\r\\n  const latestFnRef = useRef(fn);\\r\\n  latestFnRef.current = fn;\\r\\n\\r\\n  // dispatcherRef: \\"latestFnRef을 여는 행위\\"를 하는 함수를 담을겁니다. 해당 함수는 자체는 변하지 않음.\\r\\n  const dispatcherRef = useRef<(...args: any[]) => any>();\\r\\n\\r\\n  // \\"latestFnRef을 여는 행위\\"를 정의합니다.\\r\\n  // 이 함수는 매 렌더링마다 새로 생성됩니다.\\r\\n  // 따라서 항상 최신 스코프의 `latestFnRef`를 참조합니다.\\r\\n  const dispatcher = (...args: any[]) => {\\r\\n    return latestFnRef.current(...args);\\r\\n  };\\r\\n\\r\\n  // 새로 생성된 dispatcher 함수를 dispatcherRef의 내용물로 업데이트.\\r\\n  dispatcherRef.current = dispatcher;\\r\\n\\r\\n  // autoCallback: 이 함수의 참조는 절대 변하면 안 됩니다.\\r\\n  // autoCallback은 오직 \\"dispatcherRef를 열어서 그 안의 dispatcher를 실행\\"하는 것입니다.\\r\\n  const autoCallback = useCallback((...args: any[]) => {\\r\\n    // 이 함수가 호출될 때, 그 시점의 dispatcherRef를 열고,\\r\\n    // 그 안에 있는 최신 dispatcher를 실행합니다.\\r\\n    return dispatcherRef.current?.(...args);\\r\\n  }, []); // 참조 고정\\r\\n\\r\\n  return autoCallback as T;\\r\\n};\\r\\n\\r\\n```\\r\\n두 개의 ref 를 사용하여 코드의 복잡성을 증가 시킴.\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n가장 큰 배움은 전반적인 리액트의 훅을 알게된 점이다.\\r\\n과제지만 조금은 리액트를 뜯어본 느낌이였고 리액트가 어떤 방식으로 실행하는지 알아가는 과정 덕에\\r\\n다음 과제 또는 다른 프로젝트에서 리액트를 써본다면 이번보다는 더 친해지지 않을까 싶다.\\r\\n\\r\\n추가적으로는 Typescript 도 학습을 해야한다고 느꼈다. 어떻게 쓰겠다고 명시한다는게 좋지만 \\r\\n과제를 하면서 살짝 귀찮다고 느껴지는 경우도 많았다. 아직 손에 익지 않아서라고 생각이 든다.\\r\\n익숙해지면 정말 개발에 많이 유용할 것 같다. \\r\\n\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\ne2e 테스트에서 맨 마지막 항목이 제일 인상 깊습니다. 아무래도 과제의 마침표를 찍는 테스트이기도 하지만 \\r\\n위에서도 얘기했듯이 3 주차 과제의 주제를 명확히 담고 있다고 개인적으로 생각합니다. **(내가 만들고 내가 활용한다.)**\\r\\n하지만 심화 까지 가야지만 **누릴 수 있는 테스트**이기에 기본에서도 비슷한 포맷의 테스트가 있다면 좋을 것 같습니다. \\r\\n(기본에도 해당 뉘앙스의 테스트가 있는데 제가 못 알아챘을 수 있습니다. 그렇다면 죄송합니다.)\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n#### 렌더링이 발생 되는 상황\\r\\n1. 최초 렌더링: 애플리케이션이 처음 로드 될 때\\r\\n2. 상태 변경: 컴포넌트 내에서 `useState` 나 `useReducer` 의 setter 함수가 호출되어 상태가 변경 될 때\\r\\n3. 부모 컴포넌트의 리렌더링: **특별한 최적화 처리**를 하지 않았다면 모든 자식 컴포넌트 리렌더링\\r\\n\\r\\n#### 렌더 와 커밋\\r\\n1. 렌더: 계획 세우기 (DOM 변경 없음)\\r\\n- 리렌더링 트리거: state 변경등으로 리렌더링 시작\\r\\n- Virtual DOM 생성\\r\\n2. 커밋: DOM 에 변경 사항 적용\\r\\n- 재조정(Reconciliation): 새로 만들어진 Virtual DOM과 이전 렌더링 때 만들었던 Virtual DOM을 비교 (Diffing)\\r\\n- 최소한의 변경 사항 계산: Diffing 알고리즘을 통해서 계산\\r\\n- DOM 업데이트\\r\\n\\r\\n#### 📍정리\\r\\n1. State나 Props가 변경되면 컴포넌트의 리렌더링이 시작됩니다.\\r\\n4. React는 컴포넌트를 실행하여 Virtual DOM이라는 가상의 UI 구조를 만듭니다.\\r\\n5. 이전의 Virtual DOM과 비교하여 바뀐 부분만 찾아냅니다 (Reconciliation).\\r\\n6. 바뀐 부분만 실제 DOM에 적용하여 성능을 최적화합니다.\\r\\n\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n성격, 성향적으로 효율성을 추구하는 나에게는 되게 신선하게 다가온 개념이었다.\\r\\n먼저, 리액트가 해당 개념을 첫 도입한게 18년 10월이라고 한다. 그 뒤로 Hooks가 공식 도입되면서\\r\\n코드 구조가 깔끔해지고 입문 장벽이 낮아졌다고 한다.\\r\\n물론 남발하면 좋지 않지만 \\r\\n\\r\\n1. 불필요한 캐싱 비용\\r\\n4. 의존성 관리 어려움\\r\\n5. 코드 가독성 저하\\r\\n\\r\\n적재적소에 사용하면 성능 최적화는 보장이 되니까 굉장히 매력적이다.\\r\\n특정 상황에 따라 사용하는 Hooks 가 달라지는 것도 좋다. 개발자에게 맥가이버 칼을 쥐어준 느낌이랄까...\\r\\n과제로 인해 처음 접해본 개념이니까 아직은 사용 빈도가 높진 않지만 나중엔 꽤나 밥 먹듯이 사용할 수 있을 것 같은 예감이 든다.\\r\\n\\r\\n<details>\\r\\n   <summary>내가 구현한 hooks </summary>\\r\\n   <div markdown=\\"1\\">\\r\\n\\r\\n```javascript\\r\\n\\r\\n// useMemo.ts\\r\\nimport type { DependencyList } from \\"react\\";\\r\\nimport { shallowEquals } from \\"../equals\\";\\r\\nimport { useRef } from \\"./useRef\\";\\r\\n\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n  // 단 한 번만 초기화. 컴포넌트가 사라지기 전까지 유지.\\r\\n  const memoizedRef = useRef<{ deps: DependencyList; result: T } | null>(null);\\r\\n\\r\\n  if (memoizedRef.current === null || !_equals(memoizedRef.current.deps, _deps)) {\\r\\n    // 만약 새로운 값으로 업데이트 해야한다면 랜더링을 유발하지 않는 방식으로..\\r\\n    memoizedRef.current = { deps: _deps, result: factory() };\\r\\n  }\\r\\n  // 마지막엔 저장된 result 반환\\r\\n  return memoizedRef.current.result;\\r\\n}\\r\\n\\r\\n// useCallback.ts\\r\\nimport type { DependencyList } from \\"react\\";\\r\\nimport { useMemo } from \\"./useMemo\\";\\r\\n\\r\\nexport function useCallback<T extends Function>(factory: T, _deps: DependencyList) {\\r\\n  const callbackFunc = useMemo(() => factory, _deps);\\r\\n  return callbackFunc as T;\\r\\n}\\r\\n\\r\\n// memo.ts\\r\\nimport { type FunctionComponent } from \\"react\\";\\r\\nimport { shallowEquals } from \\"../equals\\";\\r\\nimport { useRef } from \\"../hooks\\";\\r\\n\\r\\nexport function memo<P extends object>(Component: FunctionComponent<P>, equals = shallowEquals) {\\r\\n  // 새로운 컴포넌트 정의, 렌더링 할 때 props 넘겨줌.\\r\\n  const memoizedComponent: FunctionComponent<P> = (props) => {\\r\\n    const cache = useRef<{ preProps: P; result: React.ReactElement } | null>(null);\\r\\n    // 최초 렌더링 또는 props 변경 시 컴포넌트 호출하여 렌더링 값 설정\\r\\n    if (cache.current === null || !equals(cache.current.preProps, props)) {\\r\\n      const newResult = Component(props);\\r\\n      cache.current = { preProps: props, result: newResult };\\r\\n    }\\r\\n    return cache.current.result;\\r\\n  };\\r\\n  return memoizedComponent;\\r\\n}\\r\\n\\r\\n\\r\\n```\\r\\n    </div>\\r\\n</details>\\r\\n\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n\\r\\n1. 개선이 필요한 코드에서도 `useAutoCallback` 를 언급했습니다. latestFnRef와 dispatcherRef라는 두 개의 ref를 사용하여 구현했습니다. 주석으로 표기를 해놨으나 패턴을 쉽게 이해하기는 어려울 것으로 보입니다. 구조를 명확하지만 쉽게 파악할 수 있는 방법에 대해 리뷰 부탁드리겠습니다. 감사합니다.\\r\\n\\r\\n<details>\\r\\n<summary>useAutoCallback</summary>\\r\\n<div markdown=\\"1\\">\\r\\n\\r\\n```ts\\r\\nimport type { AnyFunction } from \\"../types\\";\\r\\nimport { useCallback } from \\"./useCallback\\";\\r\\nimport { useRef } from \\"./useRef\\";\\r\\n\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  // 매 렌더링마다 latestFnRef.current 값이 업데이트됩니다.\\r\\n  const latestFnRef = useRef(fn);\\r\\n  latestFnRef.current = fn;\\r\\n\\r\\n  // dispatcherRef: \\"latestFnRef을 여는 행위\\"를 하는 함수를 담을겁니다. 해당 함수는 자체는 변하지 않음.\\r\\n  const dispatcherRef = useRef<(...args: any[]) => any>();\\r\\n\\r\\n  // \\"latestFnRef을 여는 행위\\"를 정의합니다.\\r\\n  // 이 함수는 매 렌더링마다 새로 생성됩니다.\\r\\n  // 따라서 항상 최신 스코프의 `latestFnRef`를 참조합니다.\\r\\n  const dispatcher = (...args: any[]) => {\\r\\n    return latestFnRef.current(...args);\\r\\n  };\\r\\n\\r\\n  // 새로 생성된 dispatcher 함수를 dispatcherRef의 내용물로 업데이트.\\r\\n  dispatcherRef.current = dispatcher;\\r\\n\\r\\n  // autoCallback: 이 함수의 참조는 절대 변하면 안 됩니다.\\r\\n  // autoCallback은 오직 \\"dispatcherRef를 열어서 그 안의 dispatcher를 실행\\"하는 것입니다.\\r\\n  const autoCallback = useCallback((...args: any[]) => {\\r\\n    // 이 함수가 호출될 때, 그 시점의 dispatcherRef를 열고,\\r\\n    // 그 안에 있는 최신 dispatcher를 실행합니다.\\r\\n    return dispatcherRef.current?.(...args);\\r\\n  }, []); // 참조 고정\\r\\n\\r\\n  return autoCallback as T;\\r\\n};\\r\\n\\r\\n```\\r\\n</div>\\r\\n</details>\\r\\n\\r\\n\\r\\n\\r\\n","created_at":"2025-07-20T07:06:37Z","updated_at":"2025-07-27T06:02:53Z","closed_at":null,"merged_at":null,"merge_commit_sha":"0007f20a318e5b5ac8d6da13291a351c7daca307","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/19/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/19/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/19/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/f71a788bad7816ee5773f358106ed014e47e6118","head":{"label":"heojungseok:main","ref":"main","sha":"f71a788bad7816ee5773f358106ed014e47e6118","user":{"login":"heojungseok","id":99116541,"node_id":"U_kgDOBehl_Q","avatar_url":"https://avatars.githubusercontent.com/u/99116541?v=4","gravatar_id":"","url":"https://api.github.com/users/heojungseok","html_url":"https://github.com/heojungseok","followers_url":"https://api.github.com/users/heojungseok/followers","following_url":"https://api.github.com/users/heojungseok/following{/other_user}","gists_url":"https://api.github.com/users/heojungseok/gists{/gist_id}","starred_url":"https://api.github.com/users/heojungseok/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/heojungseok/subscriptions","organizations_url":"https://api.github.com/users/heojungseok/orgs","repos_url":"https://api.github.com/users/heojungseok/repos","events_url":"https://api.github.com/users/heojungseok/events{/privacy}","received_events_url":"https://api.github.com/users/heojungseok/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022933619,"node_id":"R_kgDOPPi6cw","name":"front_6th_chapter1-3","full_name":"heojungseok/front_6th_chapter1-3","private":false,"owner":{"login":"heojungseok","id":99116541,"node_id":"U_kgDOBehl_Q","avatar_url":"https://avatars.githubusercontent.com/u/99116541?v=4","gravatar_id":"","url":"https://api.github.com/users/heojungseok","html_url":"https://github.com/heojungseok","followers_url":"https://api.github.com/users/heojungseok/followers","following_url":"https://api.github.com/users/heojungseok/following{/other_user}","gists_url":"https://api.github.com/users/heojungseok/gists{/gist_id}","starred_url":"https://api.github.com/users/heojungseok/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/heojungseok/subscriptions","organizations_url":"https://api.github.com/users/heojungseok/orgs","repos_url":"https://api.github.com/users/heojungseok/repos","events_url":"https://api.github.com/users/heojungseok/events{/privacy}","received_events_url":"https://api.github.com/users/heojungseok/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/heojungseok/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/heojungseok/front_6th_chapter1-3/deployments","created_at":"2025-07-20T06:54:06Z","updated_at":"2025-07-24T16:57:10Z","pushed_at":"2025-07-24T16:58:19Z","git_url":"git://github.com/heojungseok/front_6th_chapter1-3.git","ssh_url":"git@github.com:heojungseok/front_6th_chapter1-3.git","clone_url":"https://github.com/heojungseok/front_6th_chapter1-3.git","svn_url":"https://github.com/heojungseok/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":298,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":7,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":7,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/19"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/19"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/19"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/19/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/19/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/19/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/f71a788bad7816ee5773f358106ed014e47e6118"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/20","id":2679702253,"node_id":"PR_kwDOPMCTuc6fuQLt","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/20","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/20.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/20.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/20","number":20,"state":"open","locked":false,"title":"[8팀 박창준] Chapter 1-3. React, Beyond the Basics","user":{"login":"devchangjun","id":40492343,"node_id":"MDQ6VXNlcjQwNDkyMzQz","avatar_url":"https://avatars.githubusercontent.com/u/40492343?v=4","gravatar_id":"","url":"https://api.github.com/users/devchangjun","html_url":"https://github.com/devchangjun","followers_url":"https://api.github.com/users/devchangjun/followers","following_url":"https://api.github.com/users/devchangjun/following{/other_user}","gists_url":"https://api.github.com/users/devchangjun/gists{/gist_id}","starred_url":"https://api.github.com/users/devchangjun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/devchangjun/subscriptions","organizations_url":"https://api.github.com/users/devchangjun/orgs","repos_url":"https://api.github.com/users/devchangjun/repos","events_url":"https://api.github.com/users/devchangjun/events{/privacy}","received_events_url":"https://api.github.com/users/devchangjun/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://devchangjun.github.io/front_6th_chapter1-3/\\r\\n\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n이번 과제를 진행하면서 기존에 사용하였던 React 훅들이 어떤 매커니즘으로 만들어졌고, 왜 이렇게 동작을 하는지 코드레벨에서 깊이있게 이해할 수 있었던 과제였습니다. \\r\\n\\r\\n특히\xA0메모이제이션에 대해서\xA0더 깊이 고민해볼 수\xA0있었습니다. 예전에는\xA0`useMemo`, `useCallback`, `useRef`\xA0등 React에서\xA0제공하는 훅들을\xA0단순히\xA0\\"최적화를\xA0위한\xA0도구\\" 정도로만\xA0생각했었는데, 이번 과제를 통해\\r\\n\\r\\n- 각각의 훅이 내부적으로 어떤 동작 원리로 작동하는지\\r\\n- 불필요한 리렌더링을 막기 위해 어떤 비교 전략(shallowEquals, deepEquals)이 사용되는지\\r\\n- 외부 스토어/ 라우터와의 연동에서 useSyncExternalStore 훅과 연동한 구독, 알림 시스템이 어떻게 동작하는지 \\r\\n\\r\\n좀 더 깊이있게 학습할 수 있었습니다. \\r\\n\\r\\n**useSyncExternalStore** 훅에 대한 학습\\r\\n\\r\\n공부하다 보니 재미있는 사실을 발견했습니다.\\r\\nReact가 성능과 사용자 경험을 높이기 위해 **동시성 렌더링**을 도입했는데, 아이러니하게도 이게 상태가 찢어지는(Tearing) 문제를 만들어냈더라고요. 즉, UX 문제를 해결하려고 도입한 기능이 새로운 문제를 만든 셈이죠. 그걸 또 해결하기 위해 등장한 게 바로 **useSyncExternalStore**라는 훅이었고요.\\r\\n\\r\\n>A 문제를 해결하려고 B를 도입했더니, 또 다른 문제가 생겨서 C를 만들어낸 흐름이 React의 진화 과정 자체가 하나의 문제 해결 여정처럼 느껴져서 정말 흥미로웠습니다.\\r\\n\\r\\nReact는 단순히 새로운 기능만 쌓아가는 게 아니라 **기존의 구조적 문제를 하나하나 개선해가며 점진적으로 아키텍처를 정제**해가는 프레임워크라는 그런 진화과정을 엿볼 수 있었던것 같습니다.\\r\\n\\r\\n`useSyncExternalStore`훅 관련된 내용은 \\r\\n [React 18부터 도입된 useSyncExternalStore 훅 살펴보기](https://velog.io/@ckdwns9121/React-18%EB%B6%80%ED%84%B0-%EB%8F%84%EC%9E%85%EB%90%9C-useSyncExternalStore-%ED%9B%85-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0)라는 포스팅에 정리하였습니다.\\r\\n\\r\\n**useAutoCallback와 같은 유연한 커스텀훅을 설계하는 사고방식 습득**\\r\\n\\r\\n과제를 진행하면서 제일 인상깊었던 코드는 `useAutoCallback`과 같은 커스텀 훅이였습니다. \\r\\n이전까지는 useCallback만 사용하면 함수의 재생성을 막을 수 있다고 막연히 생각했지만, 실제로는 의존성 배열에 따라 최신 상태를 참조하지 못하는 문제가 종종 있습니다. (의존성 누락).\\r\\n\\r\\n그 문제를 useRef와 useCallback을 조합해서 **항상 최신 함수**를 참조하면서도 **함수의 참조값은 변하지 않게 만드는 패턴**이 매우 유용하다는 것을 직접 구현하며 체감할 수 있었습니다.\\r\\n\\r\\n`useAutoCallback`은 아래와 같은 과정으로 구현하였습니다.\\r\\n\\r\\n**1. useRef로 최신 함수 보관**\\r\\n\\r\\n```tsx\\r\\nconst callbackRef = useRef<T>(fn);\\r\\ncallbackRef.current = fn;\\r\\n```\\r\\n- useRef는 컴포넌트가 리렌더링되어도 동일한 ref 객체를 반환합니다.\\r\\n- callbackRef.current에 항상 최신의 fn을 할당합니다. 즉, 컴포넌트가 리렌더링될 때마다 최신의 fn이 ref에 저장됩니다.\\r\\n- 이로써 콜백 함수 내부에서 항상 최신의 함수를 참조할 수 있게 구현했습니다.\\r\\n\\r\\n**2. useCallback으로 함수 참조를 고정**\\r\\n\\r\\n```tsx\\r\\nreturn useCallback((...args: Parameters<T>) => {\\r\\n  return callbackRef.current(...args);\\r\\n}, []) as T;\\r\\n```\\r\\n\\r\\n- useCallback은 의존성 배열이 `[]`(빈배열)이므로 최초 마운트 시에만 콜백을 생성하고, 이후에는 동일한 함수 참조를 반환합니다.\\r\\n- 하지만 이 콜백 내부에서 직접 fn을 참조하지 않고 ref를 통해 접근하게 만들었습니다.\\r\\n- 즉 콜백 함수의 참조는 고정되어 있지만  **내부에서 실행되는 fn은 항상 최신**입니다.\\r\\n\\r\\n**3. 최종 구현된 코드**\\r\\n\\r\\n```tsx\\r\\nimport type { AnyFunction } from \\"../types\\";\\r\\nimport { useCallback } from \\"./useCallback\\";\\r\\nimport { useRef } from \\"./useRef\\";\\r\\n\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  const callbackRef = useRef<T>(fn);\\r\\n  callbackRef.current = fn;\\r\\n\\r\\n  return useCallback((...args: Parameters<T>) => {\\r\\n    return callbackRef.current(...args);\\r\\n  }, []) as T;\\r\\n};\\r\\n```\\r\\n이 구현으로 인해서 `useCallback`의 단점인 **state closure문제**를 우회하면서도 **불필요한 함수 재생성 없이 항상 최신상태를 참조**할 수 있는 커스텀 훅을 구현하였습니다. 이 패턴을 활용해서 토스트에서 `showWithHide` 함수에 적용하여 **타이머 리셋 문제**를 개선할 수 있었습니다. \\r\\n\\r\\n이렇게 상황에 따라 유연하게 **필요한 훅을 재조합**하거나 필요시 **새롭게 구현할 수 있는** 사고방식을 기르게 되었습니다.\\r\\n\\r\\n또한, 토스트 UI를 Context 기반으로 구현한 `ToastProvider`를 리팩토링하면서 **불필요한 리렌더링 방지**와 **관심사 분리**의 중요성을  직접 경험해볼 수 있었습니다. \\r\\n\\r\\n초기에는 상태(state)와 액션(show/hide)을 하나의 Context에 통합한 구조를 사용했는데, 이 경우 `message`가 변경되면 액션만 사용하는 컴포넌트도 불필요하게 리렌더링되는 이슈가 있었습니다. 이를 해결하기 위해 다음과 같은 리팩토링을 진행하였습니다.\\r\\n\\r\\n**1. 상태와 액션을 별도의 Context로 분리**\\r\\n\\r\\n```tsx\\r\\n// 상태만 담는 Context\\r\\nconst ToastStateContext = createContext({ message: \\"\\", type: \\"success\\" });\\r\\n\\r\\n// 액션만 담는 Context\\r\\nconst ToastActionContext = createContext({ show: () => {}, hide: () => {} });\\r\\n\\r\\n// 소비하는 쪽\\r\\nexport const useToastState = () => useContext(ToastStateContext);\\r\\nexport const useToastCommand = () => useContext(ToastActionContext);\\r\\n```\\r\\n이전에는 하나의 Context에 `message`, `show()`, `hide()`등 모든걸 넣었는데 상태와 액션을 분리해 **필요한 값만 구독해서** 불필요한 렌더링을 방지하였습니다. \\r\\n\\r\\n**2. `value` 객체는 `useMemo`로 메모이제이션**\\r\\n\\r\\n기존 코드는 `value`에 객체 리터럴을 바로 넘기는 방식이였습니다. \\r\\n```tsx\\r\\n<ToastActionContext.Provider value={{ show, hide }}>\\r\\n```\\r\\n\\r\\n이 객체는 매번 렌더링할 때 **새로운 객체**로 생성됩니다. 즉\\r\\n\\r\\n```ts\\r\\n{ show, hide } !== { show, hide } // 참조값 다름\\r\\n```\\r\\n\\r\\n이렇게 값은 같아도 참조하고 있는 메모리 주소가 다르기 때문에 이 컨텍스트를 사용하는 **모든 하위 컴포넌트**가 리렌더링이 되는 문제가 있었습니다. \\r\\n\\r\\n그래서 `useMemo`를 활용해서 `show`와 `hide` 함수가 불필요하게 재생성되지 않도록 고정시켰습니다.\\r\\n\\r\\n```tsx\\r\\n  const { show, hide } = useMemo(() => createActions(dispatch), [dispatch]);\\r\\n```\\r\\n\\r\\n**3. showWithHide를 useAutoCallback으로 고정된 참조 + 최신상태를 보장하게 구현**\\r\\n\\r\\n위에서 언급한 `useAutoCallback`을 통해 아래와 같이 리팩토링하였습니다.\\r\\n\\r\\n```tsx\\r\\nconst showWithHide = useAutoCallback((message: string, type: ToastType) => {\\r\\n  show(message, type);\\r\\n  hideAfter(); // debounce(hide)\\r\\n});\\r\\n```\\r\\n\\r\\n이 함수는 다음과 같은 이점을 가집니다.\\r\\n- 외부에 전달되는 showWithHide는 항상 동일한 참조값을 유지하므로, useMemo 등에서 안전하게 사용 가능합니다.\\r\\n- 내부에서 ref를 통해 최신 `show`, `hideAfter`를 참조하므로 **클로저에 의한 stale 상태 문제**를 방지할 수 있습니다.\\r\\n- 결과적으로 `show()`를 연속으로 호출한다 해도 `debound`가 **정상적으로 리셋** 되면서 가장 마지막 호출 기준으로 토스트 메시지가 닫히게 됩니다.\\r\\n\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n**1. 리액트는 왜 얕은비교 방식을 채택했을까?**\\r\\n\\r\\nReact는 상태 비교에서 기본적으로 **얕은 비교(shallow comparison)**를 사용합니다. 이는 단순히 \\"성능 때문에 그렇다\\"는 얘기보단 어떤 철학적인 설계에 가깝다고 생각했습니다.\\r\\n\\r\\n- 깊은 비교를 하게되면 객체가 중첩될수록 비교 비용이 기하급수적으로 늘어납니다.\\r\\n- 반면 얕은 비교는 `===` 연산 및 한 레벨의 비교로 끝나기 때문에 **예측 가능하고 빠릅니다.**\\r\\n- React는 불변성을 지키는 방식으로 상태를 다루도록 유도하는데 얕은 비교만으로 상태 변경 여부를 판단할 수 있게 만들었습니다.\\r\\n\\r\\n즉 React는 개발자에게 불변성 유지를 책임지게 하고, 프레임워크는 그 위에서 가볍고 빠른 비교를 제공하는 방식을 택했다고 생각합니다. 이로 인해 컴포넌트 리렌더링 판단, memo, useMemo, useCallback 같은 훅의 최적화가 모두 얕은 비교를 기준으로 설계되었다고 합니다.\\r\\n\\r\\n**2. useAutoEffect, useAutoMemo와 같은 훅은 만들 수 없을까?**\\r\\n\\r\\n이번 과제에서 `useAutoCallback`을 구현하면서 **참조는 고정하면서 항상 내부에서 최신상태를 받아올 수 있는 훅**도 만들 수 있지않을까? **그것을 만들면 완전 혁신아니야!?** 라는 기대도 했습니다.\\r\\n\\r\\n이 아이디어를 기반으로 `useAutoEffect` 같은 훅을 상상해봤습니다. 예를 들어, 의존성 배열 없이도 최신 상태를 반영하는 effect 훅을 만들 수 있다면 매번 의존성 배열을 일일이 나열하지 않아도 돼서 굉장히 편리할 것 같았습니다.\\r\\n\\r\\n그래서 아래와 같은 시도를 했습니다.\\r\\n```tsx\\r\\nconst useAutoEffect = (effectFn: () => void) => {\\r\\n  const ref = useRef(effectFn);\\r\\n  ref.current = effectFn;\\r\\n\\r\\n  useEffect(() => {\\r\\n    return ref.current();\\r\\n  }, []);\\r\\n};\\r\\n```\\r\\n\\r\\n**문제점**\\r\\n\\r\\n- 보기엔 ref.current가 항상 최신 effectFn을 참조하므로 괜찮아 보이지만, 실제로는 이 useEffect는 컴포넌트 마운트 시 단 한 번만 실행됩니다 \\r\\n- 즉, 이후 effectFn이 바뀌어도 다시 실행되지 않게 때문에 때문에 ref.current가 최신이든 아니든 다시 실행되지 않는 문제점이 있었습니다.\\r\\n\\r\\n마찬가지로 `useAutoMemo`도 만들어볼 수 있을 것 같았지만\\r\\n\\r\\n```tsx\\r\\nconst useAutoMemo = <T>(factory: () => T): T => {\\r\\n  const ref = useRef(factory);\\r\\n  ref.current = factory;\\r\\n\\r\\n  return useMemo(() => ref.current(), []);\\r\\n};\\r\\n```\\r\\n**문제점**\\r\\n\\r\\n- useMemo(..., [])는 초기 마운트 시 **한 번만 실행**되며 그 이후에는 ref가 최신이더라도 factory는 다시 평가되지 않습니다. \\r\\n- 결국 매번 팩토리함수를 다시 실행해야하는데 이는 메모이제이션이 아니라 **매번 새로운 결과를 재생성**하는 것이기 때문에 메모이제이션의 목적을 달성하지 못했습니다.\\r\\n\\r\\n이 훅들을 구현해보면서 `useAutoCallback`은 **언제 실행될지**를 **사용자가 제어**하기 때문에 최신 상태 참조에 의미가 있었지만, 제가 시도하려 했던 useAutoEffect, useAutoMemo는 **React가 정한 타이밍**에 실행되는 훅이기 때문에 내부에 최신 참조(ref)가 있어도 그 **타이밍이 고정되어 있어서** 최신 상태를 반영할 수 없는 구조적인 한계가 있다는것을 깨달았습니다.\\r\\n\\r\\n**3. useShallowSelector의 동작 원리 분석**\\r\\nuseShallowSelector의 동작 원리가 잘 이해 되지 않아서 천천히 디버깅해보며 학습한 내용을 정리하였습니다.\\r\\n\\r\\n**흐름 상세 설명**\\r\\n1. **컴포넌트**가 `useStore`(또는 `useRouter`)를 호출할 때, selector 함수를 함께 전달합니다.\\r\\n2. `useStore` 내부에서 `useShallowSelector(selector)`를 호출하여, selector 기반의 shallowSelector 함수를 만듭니다.\\r\\n3. `useSyncExternalStore`를 통해 store의 subscribe로 상태 변화를 구독합니다.\\r\\n4. store의 상태가 바뀌면, subscribe에 등록된 콜백이 실행되어 컴포넌트가 다시 shallowSelector(state)를 호출합니다.\\r\\n5. shallowSelector는 selector(state)로 값을 뽑고, 이전 값과 shallowEquals로 비교합니다.\\r\\n6. 값이 다르면 prevSelectedRef를 갱신하고 새 값을 반환하여 컴포넌트가 리렌더링됩니다.\\r\\n7. 값이 같으면 이전 값을 그대로 반환하여 불필요한 리렌더링을 방지합니다.\\r\\n\\r\\n이 흐름을 시각화 하였습니다.\\r\\n\\r\\n```mermaid\\r\\nsequenceDiagram\\r\\n  participant 컴포넌트\\r\\n  participant useStore\\r\\n  participant useShallowSelector\\r\\n  participant store\\r\\n  participant shallowEquals\\r\\n\\r\\n  컴포넌트->>useStore: selector 전달하며 호출\\r\\n  useStore->>useShallowSelector: selector 전달\\r\\n  useStore->>store: subscribe 등록\\r\\n  useStore->>store: getState()로 상태 조회\\r\\n  useStore->>useShallowSelector: shallowSelector(state) 호출\\r\\n  useShallowSelector->>shallowEquals: 이전 값과 selector(state) 결과 비교\\r\\n  alt 값이 다름\\r\\n    shallowEquals-->>useShallowSelector: false\\r\\n    useShallowSelector-->>useStore: 새 값 반환 (prevSelectedRef 갱신)\\r\\n    useStore-->>컴포넌트: 새 값 전달, 리렌더링 발생\\r\\n  else 값이 같음\\r\\n    shallowEquals-->>useShallowSelector: true\\r\\n    useShallowSelector-->>useStore: 이전 값 반환\\r\\n    useStore-->>컴포넌트: 이전 값 전달, 리렌더링 없음\\r\\n  end\\r\\n  store-->>useStore: 상태 변경 시 notify (구독자 콜백 호출)\\r\\n  useStore->>useShallowSelector: shallowSelector(state) 재호출 (이전과 동일 흐름 반복)\\r\\n\\r\\n\\r\\n```\\r\\n\\r\\n**4. 실제 ProductList에 메모이제이션을 도입하여 성능 측정**\\r\\n\\r\\n이 컴포넌트는 무한 스크롤 구조로, 스크롤이 일정 위치에 도달할 때마다 새로운 데이터를 계속 fetching 해오는 구조입니다.\\r\\n`products` 상태가 갱신될 때마다 `ProductList`가 리렌더링되고, 그에 따라 내부의 `ProductCard`들도 전부 리렌더링 되는 문제가 있었습니다.\\r\\n\\r\\n**성능 측정 시나리오**\\r\\n- 무한스크롤을 10번해서 데이터 받아오기 (current=10이 될때까지)\\r\\n-  **React Profier**를 이용해 이 과정을 측정합니다.\\r\\n\\r\\n| 항목         | 메모이제이션 전                                                                                         | 메모이제이션 후                                                                                         |\\r\\n|--------------|----------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------|\\r\\n| **이미지**   | ![메모 전](https://github.com/user-attachments/assets/43d18222-7442-42c5-9566-af0808739658)             | ![메모 후](https://github.com/user-attachments/assets/89d9e969-1748-412a-b2b7-e633dea87bce)             |\\r\\n| **최대 렌더링 시간** | `13.5s for 96.2ms` – 프레임 드랍 위험 있음                                                              | `12.3s for 27.4ms` – 개선됨, 여전히 최적화 여지 있음                                                     |\\r\\n| **렌더링 방식** | `ProductCard`가 매번 전부 리렌더링됨 (`key=...`)                                                         | `MemoizedComponent`로 감싸진 컴포넌트들은 대부분 `<0.1ms`, 재렌더링 회피됨                              |\\r\\n| **렌더링 시간 분포** | 대부분 `0.3~0.5ms`씩 소모되는 카드들이 20개 이상 → 누적 비용 큼                                     | 대부분 `<0.1ms`로 스킵되며 누적 비용이 대폭 감소                                                        |\\r\\n| **ProductList** | 여전히 매번 리렌더링 (state 변경 영향)                                                       | 불필요한 리렌더링 없음                                                         |\\r\\n| **성능 요약** | memo 미적용 시, 무한스크롤에 따른 전체 컴포넌트 재렌더링 발생, FPS 저하                                     | memo 적용으로 동일 props인 컴포넌트 재사용 → CPU 사용량 및 프레임 시간 감소                              |\\r\\n\\r\\n\\r\\n메모이제이션을 적용하지 않았을 때는 `ProductCard`가 props가 같음에도 **모두 다시 렌더링되어 96.2ms에 달하는 프레임**이 발생했고,\\r\\n이는 사용자가 스크롤을 내릴 때 프레임 드랍이나 버벅임을 느낄 수 있는 수준입니다.\\r\\n\\r\\n반면,  memo를 적용한 후에는 동일 props를 가진 카드들이 렌더링을 건너뛰게 되면서 **전체 렌더링 시간은 27.4ms로 약 3.5배 이상 감소**했습니다. 특히 각 ProductCard 컴포넌트가 <0.1ms 수준으로 최적화되어 있어 불필요한 리렌더링이 일어나지 않았음을 확인할 수 있었습니다. \\r\\n\\r\\n메모이제이션을 적용한 코드는 [여기](https://github.com/devchangjun/front_6th_chapter1-3/blob/main/packages/app/src/entities/products/components/ProductList.tsx#L85)서 확인할 수 있습니다.\\r\\n\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\nReact의 훅을 직접 단계별로 구현해보면서 동작원리를 자세히 익힐 수 있어서 좋았습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n[리액트의 렌더링은 어떻게 이루어질까?](https://github.com/devchangjun/front_6th_chapter1-3/issues/1)에 정리하였습니다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\nReact에서 `useMemo`, `useCallback`, `memo`와 같은 메모이제이션 도구는 **성능 최적화를 위한 수단이지, 반드시 적용해야 하는 규칙은 아니라고 생각합니다.**\\r\\n\\r\\n개발자들 사이에서 자주 나오는 얘기 중 하나는 다음과 같은 토론입니다.\\r\\n\\r\\n> **\\"일단 다 적용하고 보자\\" vs \\"성능 이슈가 생겼을 때 최적화하자\\"**\\r\\n\\r\\n저는 이 중에서 **성능 이슈가 발생했을 때 최적화하자**에 가깝습니다.\\r\\n\\r\\n실제로 React useMemo의 공식문서에도 아래와 같은 내용이 있습니다.\\r\\n\\r\\n>If your app is like this site, and most interactions are coarse (like replacing a page or an entire section), memoization is usually unnecessary. On the other hand, if your app is more like a drawing editor, and most interactions are granular (like moving shapes), then you might find memoization very helpful.\\r\\nOptimizing with useMemo  is only valuable in a few cases\\r\\n\\r\\n❌ 무분별한 메모이제이션의 문제점\\r\\n\\r\\n**1. 의존성 배열 실수**\\r\\n  `useMemo(() => ..., [a, b])`처럼 작성했을 때, 의존성 하나만 빠져도 **오래된 값을 계속 참조**하게 됩니다. 특히 협업 중 리팩토링 시, 눈에 띄지 않는 버그로 발전하기 쉽습니다. \\r\\n\\r\\n**2. 디버깅과 테스트 복잡도 증가**\\r\\nstale value와 관련된 버그는 눈에 띄지 않기 때문에 추적이 어렵고, 테스트 코드에서도 예외적인 흐름을 만들어냅니다.\\r\\n\\r\\n**3. 불필요한 메모리 사용과 렌더링 최적화 실패**\\r\\n모든 것을 메모이제이션한다고 해서 항상 성능이 좋아지는 것은 아닙니다. 오히려 메모이제이션 오버헤드가 렌더링 비용보다 커질 수도 있다고 생각합니다.\\r\\n\\r\\n> 따라서 무분별한 메모이제이션은 코드 품질을 떨어뜨릴 수 있으며, **선택적이고 명확한 목적 아래에서만 사용해야한다는 것이 저의 생각입니다.**\\r\\n\\r\\n✅ 내가 따르는 메모이제이션 원칙\\r\\n\\r\\n**불변성을 지켜야 하는 상황에서만 메모이제이션을 쓴다.**\\r\\n 예: Context의 value 객체, 복잡한 계산 로직 등\\r\\n\\r\\n**렌더링 병목이 실제로 관측되는 경우에만 메모이제이션을 적용한다.**\\r\\n 예: 수천 개의 리스트 렌더링, 연산이 무거운 경우 등\\r\\n\\r\\n**불필요한 최적화는 하지 않는다.**\\r\\n나중에 코드를 이해하는 사람에게는 오히려 방해 요소가 될 수 있다.\\r\\n\\r\\n메모이제이션은 \\"언제든 쓰면 좋은 도구\\"가 아니라 \\"쓸 줄 아는 사람이 신중하게 선택해야 하는 칼\\"이라고 생각합니다.\\r\\n\\r\\n이 관점을 바탕으로 실무나 과제에서도 메모이제이션 도구를 **무분별하게 남용하지 않고, 필요한 곳에만 적절히 적용하는 습관**을 가지려 하고 있습니다.\\r\\n\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n많은 사람들이 React의 Context를 전역 상태 관리 도구로만 이해하지만 실제로는 의존성 주입(DI) 시스템에 더 가까운 개념이라고 생각합니다. Context는 상위 컴포넌트에서 특정 값을 설정해 하위 컴포넌트로 직접 전달할 수 있게 해주며, 이 구조는 전통적인 DI 패턴과 매우 유사합니다. 실제로 많은 라이브러리들이 이 구조를 적극적으로 활용하고 있습니다.\\r\\n\\r\\n**1. ThemeProvider**\\r\\n\\r\\n하위의 모든 Component에서 `theme`객체를 참조할 수 있게 해주는 구조로 전형적인 설정값 주입의 대표적인 예시입니다.\\r\\n\\r\\n```tsx\\r\\n<ThemeProvider theme={myTheme}>\\r\\n  <App />\\r\\n</ThemeProvider>\\r\\n```\\r\\n\\r\\n\\r\\n**2. TanStack Query – QueryClientProvider**\\r\\n\\r\\nAPI 캐싱과 상태 관리를 담당하는 QueryClient를 트리 전체에 주입하여 하위 컴포넌트에서는 별도의 설정 없이 useQuery, useMutation 등의 훅을 통해 해당 클라이언트를 자동으로 참조하고 사용할 수 있게됩니다.\\r\\n\\r\\n```tsx\\r\\n<QueryClientProvider client={queryClient}>\\r\\n  <App />\\r\\n</QueryClientProvider>\\r\\n```\\r\\n\\r\\n**3.  i18next – I18nextProvider**\\r\\n\\r\\n번역 객체(i18n 인스턴스)를 하위 컴포넌트에 주입해서 어디서든 다국어 기능을 사용할 수 있게 합니다.\\r\\n```tsx\\r\\n<I18nextProvider i18n={i18n}>\\r\\n  <App />\\r\\n</I18nextProvider>\\r\\n```\\r\\n\\r\\n이러한 패턴들은 모두 다음과 같은 공통점을 가집니다\\r\\n\\r\\n- 상위에서 특정 객체나 설정값을 생성\\r\\n- Provider로 컴포넌트 트리에 주입\\r\\n- 하위에서 Hook이나 Context로 접근하여 사용\\r\\n\\r\\n이것은 전형적인 의존성 주입 패턴이며, React의 Context가 전역 상태 관리 도구라기보다 애플리케이션의 **구성 요소**를 주입하는 용도에 더 적합하다는 걸 보여주는 대표적인 예시들입니다.\\r\\n\\r\\n**결론**\\r\\n> Context는 \\"전역 상태 관리\\"보다는, \\"외부에서 설정값이나 서비스 객체를 주입\\"하는 데 더 적합한 도구다. \\r\\n- 자주 바뀌는 상태를 Context로 관리하면 불필요한 리렌더링이 많아지고 성능 저하가 발생할 수 있다.\\r\\n- 반면, 잘 변하지 않는 값(API client, config, 다국어 객체 등)은 Context로 주입하면 props drilling 없이 효율적으로 전달할 수 있다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n### Q1. 업무를 진행하실 때 메모이제이션을 다 해놓은 편인가요? 아니면 성능 이슈가 발생했을 때 적용하시나요?\\r\\n\\r\\n### Q2. 만약 성능이슈가 발생해서 메모이제이션을 적용하신 경험이 있다면 한번 소개해주시면 감사합니다!\\r\\n\\r\\n### Q3. 컨텍스트와 상태관리에 대한 코치님의 생각도 궁금합니다.\\r\\n","created_at":"2025-07-20T07:20:06Z","updated_at":"2025-07-28T08:28:35Z","closed_at":null,"merged_at":null,"merge_commit_sha":"57d40f20ba3bf1cffce5cf1426eac436dd273562","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/20/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/20/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/20/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/efd5b6542d2a1b9de7257397b6aaf4653cf44683","head":{"label":"devchangjun:main","ref":"main","sha":"efd5b6542d2a1b9de7257397b6aaf4653cf44683","user":{"login":"devchangjun","id":40492343,"node_id":"MDQ6VXNlcjQwNDkyMzQz","avatar_url":"https://avatars.githubusercontent.com/u/40492343?v=4","gravatar_id":"","url":"https://api.github.com/users/devchangjun","html_url":"https://github.com/devchangjun","followers_url":"https://api.github.com/users/devchangjun/followers","following_url":"https://api.github.com/users/devchangjun/following{/other_user}","gists_url":"https://api.github.com/users/devchangjun/gists{/gist_id}","starred_url":"https://api.github.com/users/devchangjun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/devchangjun/subscriptions","organizations_url":"https://api.github.com/users/devchangjun/orgs","repos_url":"https://api.github.com/users/devchangjun/repos","events_url":"https://api.github.com/users/devchangjun/events{/privacy}","received_events_url":"https://api.github.com/users/devchangjun/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022940778,"node_id":"R_kgDOPPjWag","name":"front_6th_chapter1-3","full_name":"devchangjun/front_6th_chapter1-3","private":false,"owner":{"login":"devchangjun","id":40492343,"node_id":"MDQ6VXNlcjQwNDkyMzQz","avatar_url":"https://avatars.githubusercontent.com/u/40492343?v=4","gravatar_id":"","url":"https://api.github.com/users/devchangjun","html_url":"https://github.com/devchangjun","followers_url":"https://api.github.com/users/devchangjun/followers","following_url":"https://api.github.com/users/devchangjun/following{/other_user}","gists_url":"https://api.github.com/users/devchangjun/gists{/gist_id}","starred_url":"https://api.github.com/users/devchangjun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/devchangjun/subscriptions","organizations_url":"https://api.github.com/users/devchangjun/orgs","repos_url":"https://api.github.com/users/devchangjun/repos","events_url":"https://api.github.com/users/devchangjun/events{/privacy}","received_events_url":"https://api.github.com/users/devchangjun/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/devchangjun/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/devchangjun/front_6th_chapter1-3/deployments","created_at":"2025-07-20T07:16:00Z","updated_at":"2025-07-24T19:05:44Z","pushed_at":"2025-07-24T19:05:40Z","git_url":"git://github.com/devchangjun/front_6th_chapter1-3.git","ssh_url":"git@github.com:devchangjun/front_6th_chapter1-3.git","clone_url":"https://github.com/devchangjun/front_6th_chapter1-3.git","svn_url":"https://github.com/devchangjun/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":119,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":1,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":1,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/20"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/20"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/20"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/20/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/20/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/20/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/efd5b6542d2a1b9de7257397b6aaf4653cf44683"}},"author_association":"FIRST_TIME_CONTRIBUTOR","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/22","id":2679759003,"node_id":"PR_kwDOPMCTuc6fueCb","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/22","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/22.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/22.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/22","number":22,"state":"open","locked":false,"title":"[5팀 김유현] Chapter 1-3. React, Beyond the Basics","user":{"login":"yuhyeon99","id":83055700,"node_id":"MDQ6VXNlcjgzMDU1NzAw","avatar_url":"https://avatars.githubusercontent.com/u/83055700?v=4","gravatar_id":"","url":"https://api.github.com/users/yuhyeon99","html_url":"https://github.com/yuhyeon99","followers_url":"https://api.github.com/users/yuhyeon99/followers","following_url":"https://api.github.com/users/yuhyeon99/following{/other_user}","gists_url":"https://api.github.com/users/yuhyeon99/gists{/gist_id}","starred_url":"https://api.github.com/users/yuhyeon99/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yuhyeon99/subscriptions","organizations_url":"https://api.github.com/users/yuhyeon99/orgs","repos_url":"https://api.github.com/users/yuhyeon99/repos","events_url":"https://api.github.com/users/yuhyeon99/events{/privacy}","received_events_url":"https://api.github.com/users/yuhyeon99/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://yuhyeon99.github.io/front_6th_chapter1-3/\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n- **새로 학습한 개념:** \\r\\n  - 리액트의 여러 훅들의 동작 방식에 대해 학습했습니다.\\r\\n  - 특히나, useRef에 대해서 왜 필요한지 이해가 가지 않아서 블로그 글로 정리해봤어요.\\r\\n    - https://velog.io/@jujini31/초보자의-관점에서-본-useRef-왜-필요할까-i8ragh5a\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n- 얕은 복사와, 깊은 복사 구현\\r\\n  - `shallowEquals`함수를 구현한 코드\\r\\n    - ```ts\\r\\n      export const shallowEquals = (a: unknown, b: unknown) => {\\r\\n        if (Object.is(a, b)) {\\r\\n          return true;\\r\\n        }\\r\\n      \\r\\n        if (typeof a !== \\"object\\" || a === null || typeof b !== \\"object\\" || b === null) {\\r\\n          return false;\\r\\n        }\\r\\n      \\r\\n        const keysA = Object.keys(a);\\r\\n        const keysB = Object.keys(b);\\r\\n      \\r\\n        if (keysA.length !== keysB.length) {\\r\\n          return false;\\r\\n        }\\r\\n      \\r\\n        for (let i = 0; i < keysA.length; i++) {\\r\\n          const currentKey = keysA[i];\\r\\n          if (\\r\\n            !Object.prototype.hasOwnProperty.call(b, currentKey) ||\\r\\n            !Object.is((a as Record<string, unknown>)[currentKey], (b as Record<string, unknown>)[currentKey])\\r\\n          ) {\\r\\n            return false;\\r\\n          }\\r\\n        }\\r\\n      \\r\\n        return true;\\r\\n      };\\r\\n      ```\\r\\n      - React repository에서 shallowEquals.ts 파일을 참고해서 작성했음.\\r\\n      - 해당 코드는 Flow로 작업되어있었는데, TypeScript 버전으로 수정해서 적용.\\r\\n      - Object.is를 통해 +0과 -0, NaN === NaN을 true로 처리하는 부분을 심플하게 구현\\r\\n      - hasOwnProperty가 객체의 메서드로 덮어져서 들어오는 경우를 대비해서 prototype과 call 메서드를 활용한 것\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n- useCallback, useMemo, memo 등 메모이제이션 관련 훅과 HOC를 직접 구현하며 리액트 렌더링 최적화 개념을 체득\\r\\n- 컨텍스트와 상태 관리를 다루는  구조적 설계 경험이 생김.\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n- 단계별로 구현 난이도를 높이며 개념을 학습할 수 있도록 구성된 점이 좋았습니다.\\r\\n- 실제 React 내부 구현 패턴을 따라가는 문제 구성이라 실무에 대한 감각도 높아졌습니다.\\r\\n- useRef, useMemo 같은 기본 훅 부터 useStore, useRouter까지 이어지는 심화 과제가 자연스럽게 연결되어 있어 성장하는 느낌이 들었습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n- **리액트의 렌더링 정리:**\\r\\n  - 상태/props 변경 -> 리렌더 -> Virtual DOM -> diff -> 실제 DOM 업데이트 (Reconciliation)\\r\\n  - memo, useMemo, useCallback 등으로 불필요한 리렌더링 최소화\\r\\n  - 렌더링 최적화를 위해 참조 안정성 관리, 의존성 명시, selector 분리 등이 중요\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n- **사용 시점:** 고비용 계산 로직, 자주 리렌더링되는 컴포넌트, 참조 안정성이 필요한 콜백\\r\\n- **장점:** 성능 개선, 불필요한 리렌더 방지\\r\\n- **단점:** 남용 시 코드 복잡도 증가, 메모리 사용 증가\\r\\n- **대안:** context 분리, state 구조 개선, selector 최소화\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n- 전역적 상태 공유가 필요한 UI에 필수\\r\\n- 불필요한 리렌더를 막기 위해 구조 분리 또는 selector 사용이 중요함\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n### 1. 옵저버 패턴 기반의 상태 관리 로직 (useStore, createStore)\\r\\n`useSyncExternalStore`와 옵저버 패턴 기반의 `createStore`를 사용해 전역 상태 관리 시스템을 구성했습니다.\\r\\n- `createStore`는 내부적으로 `subscribe/notify` 구조를 따르고 있어, 상태 변경 시 수동으로 구독자에게 알리는 구조입니다.\\r\\n- `useStore`는 `useSyncExternalStore`를 통해 외부 상태의 변경을 감지하며 `selector`와 `useShallowSelector`를 함께 사용해 리렌더링 최소화를 유도했습니다.\\r\\n  - **질문:** 이 상태 관리 구조가 다음과 같은 기능 확장 상황에서도 유연하게 대응할 수 있을지 피드백 받고 싶습니다\\r\\n    - 비동기 액션 처리 (ex. Redux middleware처럼 side-effect 대응)\\r\\n      - 상황 예시: \\r\\n        - ```ts\\r\\n          // 제품 목록을 API로 불러와서 상태에 저장\\r\\n          function fetchAndSetProducts() {\\r\\n            const res = await fetch(\\"/products\\");\\r\\n            const data = await res.json();\\r\\n            productStore.setState({ items: data });\\r\\n          }\\r\\n          ```\\r\\n          - 이 함수는 store 외부에서 직접 호출해야 함 → store가 액션을 모르는 상태\\r\\n          - 로딩 중/에러 처리 상태를 분리해서 관리하기가 어려움","created_at":"2025-07-20T09:05:32Z","updated_at":"2025-07-26T05:39:40Z","closed_at":null,"merged_at":null,"merge_commit_sha":"0f1834562c55e58c5e8d8b9bf6e28aabb10117a7","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/22/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/22/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/22/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/586b6a7c5d4e3955005246778337f74f70d6838e","head":{"label":"yuhyeon99:main","ref":"main","sha":"586b6a7c5d4e3955005246778337f74f70d6838e","user":{"login":"yuhyeon99","id":83055700,"node_id":"MDQ6VXNlcjgzMDU1NzAw","avatar_url":"https://avatars.githubusercontent.com/u/83055700?v=4","gravatar_id":"","url":"https://api.github.com/users/yuhyeon99","html_url":"https://github.com/yuhyeon99","followers_url":"https://api.github.com/users/yuhyeon99/followers","following_url":"https://api.github.com/users/yuhyeon99/following{/other_user}","gists_url":"https://api.github.com/users/yuhyeon99/gists{/gist_id}","starred_url":"https://api.github.com/users/yuhyeon99/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yuhyeon99/subscriptions","organizations_url":"https://api.github.com/users/yuhyeon99/orgs","repos_url":"https://api.github.com/users/yuhyeon99/repos","events_url":"https://api.github.com/users/yuhyeon99/events{/privacy}","received_events_url":"https://api.github.com/users/yuhyeon99/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022463242,"node_id":"R_kgDOPPGNCg","name":"front_6th_chapter1-3","full_name":"yuhyeon99/front_6th_chapter1-3","private":false,"owner":{"login":"yuhyeon99","id":83055700,"node_id":"MDQ6VXNlcjgzMDU1NzAw","avatar_url":"https://avatars.githubusercontent.com/u/83055700?v=4","gravatar_id":"","url":"https://api.github.com/users/yuhyeon99","html_url":"https://github.com/yuhyeon99","followers_url":"https://api.github.com/users/yuhyeon99/followers","following_url":"https://api.github.com/users/yuhyeon99/following{/other_user}","gists_url":"https://api.github.com/users/yuhyeon99/gists{/gist_id}","starred_url":"https://api.github.com/users/yuhyeon99/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yuhyeon99/subscriptions","organizations_url":"https://api.github.com/users/yuhyeon99/orgs","repos_url":"https://api.github.com/users/yuhyeon99/repos","events_url":"https://api.github.com/users/yuhyeon99/events{/privacy}","received_events_url":"https://api.github.com/users/yuhyeon99/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/yuhyeon99/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/yuhyeon99/front_6th_chapter1-3/deployments","created_at":"2025-07-19T06:01:52Z","updated_at":"2025-07-24T07:27:53Z","pushed_at":"2025-07-24T07:27:49Z","git_url":"git://github.com/yuhyeon99/front_6th_chapter1-3.git","ssh_url":"git@github.com:yuhyeon99/front_6th_chapter1-3.git","clone_url":"https://github.com/yuhyeon99/front_6th_chapter1-3.git","svn_url":"https://github.com/yuhyeon99/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":112,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":3,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":3,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/22"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/22"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/22"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/22/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/22/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/22/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/586b6a7c5d4e3955005246778337f74f70d6838e"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/24","id":2679832661,"node_id":"PR_kwDOPMCTuc6fuwBV","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/24","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/24.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/24.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/24","number":24,"state":"open","locked":false,"title":"[4팀 오하늘] Chapter 1-3. React, Beyond the Basics","user":{"login":"eveneul","id":99119406,"node_id":"U_kgDOBehxLg","avatar_url":"https://avatars.githubusercontent.com/u/99119406?v=4","gravatar_id":"","url":"https://api.github.com/users/eveneul","html_url":"https://github.com/eveneul","followers_url":"https://api.github.com/users/eveneul/followers","following_url":"https://api.github.com/users/eveneul/following{/other_user}","gists_url":"https://api.github.com/users/eveneul/gists{/gist_id}","starred_url":"https://api.github.com/users/eveneul/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eveneul/subscriptions","organizations_url":"https://api.github.com/users/eveneul/orgs","repos_url":"https://api.github.com/users/eveneul/repos","events_url":"https://api.github.com/users/eveneul/events{/privacy}","received_events_url":"https://api.github.com/users/eveneul/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://eveneul.github.io/front_6th_chapter1-3/\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n### equalities\\r\\n\\r\\n- [x]  shallowEquals 구현 완료\\r\\n- [x]  deepEquals 구현 완료\\r\\n\\r\\n### hooks\\r\\n\\r\\n- [x]  useRef 구현 완료\\r\\n- [x]  useMemo 구현 완료\\r\\n- [x]  useCallback 구현 완료\\r\\n- [x]  useDeepMemo 구현 완료\\r\\n- [x]  useShallowState 구현 완료\\r\\n- [x]  useAutoCallback 구현 완료\\r\\n\\r\\n### High Order Components\\r\\n\\r\\n- [x]  memo 구현 완료\\r\\n- [x]  deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n### hooks\\r\\n\\r\\n- [x]  createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x]  useShallowSelector 구현\\r\\n- [x]  useStore 구현\\r\\n- [x]  useRouter 구현\\r\\n- [x]  useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x]  ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n1주차부터 3주차까지 자바스크립트를 나름대로 딥 다이브 한 것 같다. 프레임워크 없이 SPA 만들기는 정말 생각하지도 못했고, **리액트를 사용하면서 이건 자바스크립트로 어떻게 굴러가는 거지?** 라는 생각을 개발 시장에 뛰어든 지 3년에서야 하게 되었다. ~~이것 참 부끄러운 일이다..~~\\r\\n\\r\\n각설하고, 기술적인 성장을 나열하자면 아래와 같다.\\r\\n\\r\\n- [얕은 비교/깊은 비교] `Object.is`를 처음 봤다.\\r\\n\\r\\n동등 연산자, 일치 연산자와의 차이도 알았다. 대신 이해는 조금 어려웠다. 타입까지 분별해 주기에 일치 연산자를 쓰라고 권장하기에 일치 연산자가 만능인 줄 알았다. 그런데 그게 객체에서는 적용이 안 되는 줄은 몰랐다.\\r\\n\\r\\n객체는 참조형 타입이므로 일치 연산자로 비교를 했을 때, 메모리 주소값으로 비교를 하기 때문에 key-value값을 확인하지 못하기에 Object.keys를 통해 반복문을 돌면서 Object.is로 key, value가 같은지 확인했다.\\r\\n\\r\\n```jsx\\r\\n  const keysA = Object.keys(a as Record<string, unknown>);\\r\\n  const keysB = Object.keys(b as Record<string, unknown>);\\r\\n\\r\\n  // 길이가 다르면 false 리턴\\r\\n  if (keysA.length !== keysB.length) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  // A 키를 기준으로 B에 같은 키가 있는지, 그리고 그 값이 있는지 확인\\r\\n  // Object.prototype.hasOwnProperty.call() => 객체가 해당 속성을 직접 소유하고 있는지 확인\\r\\n  for (let i = 0; i < keysA.length; i++) {\\r\\n    const currentKey = keysA[i];\\r\\n\\r\\n    if (\\r\\n      !Object.prototype.hasOwnProperty.call(b, currentKey) ||\\r\\n      !Object.is((a as Record<string, unknown>)[currentKey], (b as Record<string, unknown>)[currentKey])\\r\\n    ) {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n```\\r\\n\\r\\n`Object.prototype.hasDownProperty.call`로 B 객체에 A가 가지고 있는 키가 없거나, Object.is로 두 값의 key가 일치하지 않으면 두 오브젝트는 같지 않다고 반환해 주었다.\\r\\n\\r\\n- [useRef] useState 초기값에 왜 { current: initialValue }를 넣으면 안 될까?\\r\\n\\r\\n`useRef`는 **렌더링에 필요하지 않은 값을 참조**할 수 있다. **initialValue에 값을 넣으면 초기 렌더링 이후부터는 무시된다**. 같은 값을 유지해야 하는 방법은 아래와 같다.\\r\\n\\r\\n- useState: 상태 유지\\r\\n- useRef: 참조 유지 (그런데 이걸 만들어야 하니까 쓸 수 없음)\\r\\n- useMemo: 계산 결과 유지\\r\\n- useReducer: 복잡한 상태 유지\\r\\n\\r\\nuseMemo는 복잡한 계산을 캐싱해서 성능을 최적화시키는 건데, 생각보다 많은 데에 쓰일 useRef를 만들 때 useMemo를 쓰는 게 맞나? 싶었다. 잘못 사용하면 성능이 더 안 좋아진다. useReducer는 너무 복잡했다. 그래서 useState로 만들었다.\\r\\n\\r\\n**그런데 한 가지 더 의문이 생겼다.** 왜 `useState({ current: initialValue })`는 안 되고, `useState(() ⇒ { current: initialValue })`는 되는 것일까? \\r\\n\\r\\nuseState에게 직접적으로 부여한 객체(값)은 랜더링 될 때마다 생성하고, 함수는 첫 랜더링 이후 다시 실행되지 않는다. 이 점이 useRef를 구현하는 데에 잘 맞는 것 같아서 useState를 사용했다.  \\r\\n\\r\\n```jsx\\r\\nfunction App() {\\r\\n  const [count, setCount] = useState(0);\\r\\n  console.log(\'🔥 컴포넌트가 실행되었습니다.\');\\r\\n\\r\\n  console.log(\'🏃 직접 객체 코드 실행 시작\');\\r\\n  const directObject = { current: 100 };\\r\\n  console.log(\'🏃 직접 객체 생성됨::\', directObject);\\r\\n\\r\\n  console.log(\'👀 함수 코드 실행 시작\');\\r\\n  const [ref] = useState(() => {\\r\\n    console.log(\\r\\n      \'🍀🍀🍀🍀🍀🍀🍀🍀 함수 내부 실행됨. 새 객체 생성 🍀🍀🍀🍀🍀🍀🍀🍀🍀\'\\r\\n    );\\r\\n    return { current: 200 };\\r\\n  });\\r\\n\\r\\n  console.log(\'🫵 useState 완료 (직접 객체도, 함수 코드도)\');\\r\\n\\r\\n  return (\\r\\n    <div className=\'App\'>\\r\\n      <span>개발자 도구 콘솔창을 열어서 결과를 확인해 보세요.</span>\\r\\n      <button onClick={() => setCount(prev => prev + 1)}>\\r\\n        리렌더링 시키기!\\r\\n      </button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n결과는 여기에서 확인 가능하다. https://2473697.playcode.io/\\r\\n(수민 공주.. 보고 있어..?) \\r\\n\\r\\n- useSyncExternalStore Hook에 대해서\\r\\n\\r\\n리액트에서 전역 상태 관리는 Recoil, Zustand 같은 라이브러리를 사용해서 전역 상태에 대한 깊은 생각을 하지 않았었는데, 이번 과제를 통해 useSyncExternalStore 훅도 보고, 라이브러리를 직접 뜯어 볼 수 있어서 재미있었다. [관련한 내용은 벨로그를 통해 포스트 발행했다](https://velog.io/@eveneul/React.js-useSyncExternalStore%EB%9E%80-%EA%B7%B8%EB%A6%AC%EA%B3%A0-Zustand%EC%97%90%EC%84%9C-useSyncExternalStore%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EC%8B%9D). \\r\\n\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n```tsx\\r\\n// createObserver.ts\\r\\nexport const createObserver = () => {\\r\\n  const listeners = new Set<Listener>();\\r\\n\\r\\n  // useSyncExternalStore 에서 활용할 수 있도록 subscribe 함수를 수정합니다.\\r\\n  const subscribe = (fn: Listener) => {\\r\\n    listeners.add(fn);\\r\\n\\r\\n    return () => {\\r\\n      listeners.delete(fn);\\r\\n    };\\r\\n  };\\r\\n\\r\\n  const notify = () => listeners.forEach((listener) => listener());\\r\\n\\r\\n  return { subscribe, notify };\\r\\n};\\r\\n```\\r\\n\\r\\n사실 자랑하고 싶은 잘 짠 코드는 아니고, 내가 이해해서 과제를 수행했다! 를 보여 드리고 싶다. 실은 그간 보냈던 2주 동안에 listener에 대한 깊이 있는 이해가 부족해서 store를 구현하는 데에도 이게 왜 되지? 싶었는데, 이번 주차 과제를 통해 에라이~ 모르겠다! 하고 listener에 대해 좀 찾아봤다.\\r\\n\\r\\n[관련한 벨로그 포스트도 발행했다.](https://velog.io/@eveneul/%EC%A0%84%EC%97%AD-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC%EC%97%90%EC%84%9C-%EC%99%9C-listener-%EB%B0%B0%EC%97%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C)\\r\\n\\r\\n`unsubscribe` 함수를 삭제하고 `subscribe` 안에 `return () ⇒ { … }`로 추가했다. Zustand 같은 라이브러리를 사용한다면 알아서 메모리 누수를 방지하기 위해 구독 해제도 해 주지만, 생으로 store를 만들 때에는 다른 함수로 빼는 것이 아니라 같은 구독 함수 내에서 반환해 주어야 메모리 누수가 생기지 않는다.\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n개선이 필요한 건 아니고, 왜 이렇게 돌아가는지 궁금했지만 (원래는 개인 회고 질문란에 넣을 생각이었다) 금주 준일 코치님 멘토링 시간에 해답을 찾았다.\\r\\n\\r\\n```tsx\\r\\nconst defaultSelector = <T, S = T>(state: T) => state as unknown as S;\\r\\n\\r\\nexport const useRouter = <T extends RouterInstance<AnyFunction>, S>(router: T, selector = defaultSelector<T, S>) => {\\r\\n  // useSyncExternalStore를 사용하여 router의 상태를 구독하고 가져오는 훅을 구현합니다.\\r\\n  const shallowSelector = useShallowSelector(selector);\\r\\n  // useSyncExternalStore 두 번째 인자(현재상태)는 \\"전체 상태\\"를 반환해야 함\\r\\n  const state = useSyncExternalStore(router.subscribe, () => shallowSelector(router));\\r\\n  return state;\\r\\n};\\r\\n```\\r\\n\\r\\n`useSyncExternalStore`의 두 번째 인자로 현재 상태값을 넣어 줘야 하는 건 이해했다. 그런데 왜 `router.pathname`을 넣는 게 아닐지 궁금했다. **현재 상태값이라고 하면, 즉 router의 현재 상태값이라고 하면 pathname이 맞다고 생각했는데, 코치님께서는 아래와 같은 답변을 주셨다.**\\r\\n\\r\\n```\\r\\npathname만 넘겨줘도 좋을 것 같긴 한데, 문제는 router 자체 대한 정보가 다 필요할 때가 있어서, \\r\\npathname 뿐만 아니라 router 자체를 넘겨줘야 하지 않나!? 라고 생각이 되네요..!\\r\\n```\\r\\n\\r\\n이걸 듣고 앗.. 했다. 실제 (내가 사용할 때) 리액트에서 pathname을 얻을 때 `const router = useRouter()`로 선언해 준 뒤, router.pathname으로 접근하기도 하고, pathname만 얻는 거면 새로운 usePathname() 같은 걸 만들어 줘야 하지 않나? 결론은 닉값 하지 못한다. 라고 생각이 되었다.\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n- 새로운 문법? 같은 걸 많이 만나 볼 수 있어서 좋았다. 앞서 작성했던 Object.is라든가, hasOwnProperty라든가, useSyncExternalStore 등..\\r\\n- 스토어를 만들 때 왜 listener가 필요한지도 깊게 파고들 기회가 생겨서 좋았다. 그리고 일반 배열이 아닌 new Set으로 중복 방지를 해 주는 것까지!\\r\\n- 실무 적용 가능성은 잘 모르겠다. 회사 바이 회사, 실무 바이 실무일 것 같다. 저희 회사는 개발 일감이 없어요.. 하.. 하지만 다른 프로젝트를 하거나, 다른 회사로 이직하게 된다면 useMemo, useCallback은 한두 번 정도 써먹을 수 있을 것 같다.\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n- 1, 2주차보다 재미있었습니다. 1주차는 UI를 직접 조작할 수 있었지만 첫 과제라는 부담감과 자바스크립트로 리액트를 직접 구현한 적이 없어서 어려웠고, 2주차는 알고리즘 성격의 로직 구현이 있어서 제 뇌로는 한계가 있는 것 같았지만.. 1, 2주차로부터 얻은 (얕은) 지식으로 충분히 풀어나갈 수 있어서 일찍 과제를 마치고(제일 중요) 저녁 약속도 잡았습니다.(이게 더 중요) 🍺\\r\\n- 결론: 1, 2주차를 경험했어서, 3주차 과제가 수월할 수 있었습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n- 리액트는 Virtual DOM(가상 돔)을 만들어서 이전 Virtual DOM 트리랑 비교(Diffing)하여 바뀐 부분을 실제 DOM에 반영(Reconciliation)한다.\\r\\n- 그렇다면 렌더링이 일어날 때는 아래와 같다.\\r\\n    - 상태가 바뀔 때 (useState로)\\r\\n    - props가 바뀔 때, Context가 바뀔 때\\r\\n    - 부모가 리랜더링되면서 자식도 덩달아 부모 컴포넌트가 바뀌면 자식들도 “어? 나도 바뀌어야 하나?” 하면서 리랜더링 (이게 중요)\\r\\n    - …\\r\\n- 여기에서 중요한 점은 나는 부모만 바꾸고 싶은데 자식까지 같이 바뀌어서 개발자가 가늠하지 못한 리랜더링이 일어난다는 것이다.\\r\\n- 만약 자식 컴포넌트가 무거운 계산을 가지고 있다면, 부모가 바뀔 때마다 (말이 조금 이상하지만) 다시 계산을 해 주어야 하니 난감한 상황이 발생한다.\\r\\n- 그럴 때 무거운 계산을 수행해야 하는 컴포넌트에게 useMemo, useCallback, React.memo 등으로 복잡한 계산을 캐싱해 준다.\\r\\n    - `useMemo`: 복잡한 계산이 끝난 뒤 ‘값’을 메모이제이션한다.\\r\\n    - `useCallback`: 함수 자체를 메모이제이션해서 불필요한 함수 재생성을 방지.\\r\\n    - `React.memo`: 컴포넌트 자체를 메모이제이션한다.\\r\\n- 이러한 메모이제이션 훅을 이용해서 이전 값과 현재 값이 같으면 리랜더링하지 않는다. 하지만 메모이제이션도 비용이므로 꼭 필요한 곳에만 사용한다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n- 그렇다면 메모이제이션은 언제 필요할까? 우선 메모이제이션이 무엇일까?\\r\\n    - `메모이제이션`: 한 번 계산한 건 메모해 뒀다가(RAM(메모리)에 저장해 두었다가) 똑같은 계산을 해야 한다면, 메모리에 저장해 둔 걸 다시 재사용하는 것.\\r\\n- 말만 들으면 오?! 이러면 죄다 저장하면 개꿀이잖아 ㅋㅋ 하겠지만.. 램은 한정되어 있고, 컴퓨터에 있는 램이 온전히 개발할 때 사용할 수도 없어서 너무 많이 저장하면 메모리 부족으로 컴퓨터가 느려진다.\\r\\n- 즉, 메모이제이션은 꼭 필요한 때에 사용하라고 한다. 그러라고 하지만 아직까지 나는 메모이제이션을 어떻게 잘 사용해야 할지 감이 안 잡힌다. AI에게 물어봐도 10000을 반복문으로 돌렸을 때… 라는 예시만 줄 뿐이다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n- 컨텍스트는 또 뭘까? 개발하다 보면 컨텍스트, 컨텍스트 한다. ~~한국인이면 모국어를 써라.~~\\r\\n    - `컨텍스트`: 지금 어떤 상황인지, 어떤 환경인지 나타내는 정보. 리액트에서는 대다수의 컴포넌트에서 필요로 하는 값을 저장하는 저장소. (정확한가?!)\\r\\n- 그러면 컨텍스트와 상태 관리는 같은 말일까?\\r\\n    - `아니다!` 리액트에서 컨텍스트는 도구 같은 개념이고, 상태 관리는 목적? 개념적으로 더 큰 의미를 가진다. 즉 컨텍스트는 상태 관리 도구, 상태 관리는 방법론이다.\\r\\n- 컨텍스트와 상태 관리는 왜 필요할끼?\\r\\n    - props drilling을 방지하기 위해서다. A 컴포넌트에서 버튼을 누르면 전혀 다른 부모를 가진 B 컴포넌트에서 리랜더링이 일어나야 하는데, props로 옮겨 주려면 A 컴포넌트 자식으로 B가 있어야 하는데.. 애초에 말이 안 된다.\\r\\n- 주의해야 할 점은, Context Provider로 감싼 컴포넌트들은 Context의 상태가 변경될 때 리랜더링 된다는 것이다. 그래서 dark / light 모드처럼 정말 모든 컴포넌트에 영향이 가야 하는 케이스일 때만 Context를 사용해 주는 게 좋을 것 같다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요.\\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n\\r\\n- useMemo, useCallback, React.memo의 구체적인? 실무적인? 예시를 모르겠습니다. 단순한 CRUD를 주로 만져서 그런지 메모이제이션을 쓸 일이 많이 없었는데요, 코치님께서는 작업을 하시다가 메모이제이션을 써야겠다! 라는 감이 올 때가 있으신가요?","created_at":"2025-07-20T10:59:47Z","updated_at":"2025-07-28T02:10:50Z","closed_at":null,"merged_at":null,"merge_commit_sha":"9867a65afd7f985084c9966788e3e3febbbad759","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/24/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/24/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/24/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/5929096d28aff363a8d730cc479467fd7be26305","head":{"label":"eveneul:main","ref":"main","sha":"5929096d28aff363a8d730cc479467fd7be26305","user":{"login":"eveneul","id":99119406,"node_id":"U_kgDOBehxLg","avatar_url":"https://avatars.githubusercontent.com/u/99119406?v=4","gravatar_id":"","url":"https://api.github.com/users/eveneul","html_url":"https://github.com/eveneul","followers_url":"https://api.github.com/users/eveneul/followers","following_url":"https://api.github.com/users/eveneul/following{/other_user}","gists_url":"https://api.github.com/users/eveneul/gists{/gist_id}","starred_url":"https://api.github.com/users/eveneul/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eveneul/subscriptions","organizations_url":"https://api.github.com/users/eveneul/orgs","repos_url":"https://api.github.com/users/eveneul/repos","events_url":"https://api.github.com/users/eveneul/events{/privacy}","received_events_url":"https://api.github.com/users/eveneul/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023011841,"node_id":"R_kgDOPPnsAQ","name":"front_6th_chapter1-3","full_name":"eveneul/front_6th_chapter1-3","private":false,"owner":{"login":"eveneul","id":99119406,"node_id":"U_kgDOBehxLg","avatar_url":"https://avatars.githubusercontent.com/u/99119406?v=4","gravatar_id":"","url":"https://api.github.com/users/eveneul","html_url":"https://github.com/eveneul","followers_url":"https://api.github.com/users/eveneul/followers","following_url":"https://api.github.com/users/eveneul/following{/other_user}","gists_url":"https://api.github.com/users/eveneul/gists{/gist_id}","starred_url":"https://api.github.com/users/eveneul/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eveneul/subscriptions","organizations_url":"https://api.github.com/users/eveneul/orgs","repos_url":"https://api.github.com/users/eveneul/repos","events_url":"https://api.github.com/users/eveneul/events{/privacy}","received_events_url":"https://api.github.com/users/eveneul/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/eveneul/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/eveneul/front_6th_chapter1-3/deployments","created_at":"2025-07-20T10:40:47Z","updated_at":"2025-07-24T10:19:55Z","pushed_at":"2025-07-24T10:19:51Z","git_url":"git://github.com/eveneul/front_6th_chapter1-3.git","ssh_url":"git@github.com:eveneul/front_6th_chapter1-3.git","clone_url":"https://github.com/eveneul/front_6th_chapter1-3.git","svn_url":"https://github.com/eveneul/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":128,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/24"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/24"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/24"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/24/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/24/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/24/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/5929096d28aff363a8d730cc479467fd7be26305"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/25","id":2679838257,"node_id":"PR_kwDOPMCTuc6fuxYx","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/25","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/25.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/25.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/25","number":25,"state":"open","locked":false,"title":"[6팀 이민재] Chapter 1-3. React, Beyond the Basics ","user":{"login":"minjaeleee","id":81751091,"node_id":"MDQ6VXNlcjgxNzUxMDkx","avatar_url":"https://avatars.githubusercontent.com/u/81751091?v=4","gravatar_id":"","url":"https://api.github.com/users/minjaeleee","html_url":"https://github.com/minjaeleee","followers_url":"https://api.github.com/users/minjaeleee/followers","following_url":"https://api.github.com/users/minjaeleee/following{/other_user}","gists_url":"https://api.github.com/users/minjaeleee/gists{/gist_id}","starred_url":"https://api.github.com/users/minjaeleee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/minjaeleee/subscriptions","organizations_url":"https://api.github.com/users/minjaeleee/orgs","repos_url":"https://api.github.com/users/minjaeleee/repos","events_url":"https://api.github.com/users/minjaeleee/events{/privacy}","received_events_url":"https://api.github.com/users/minjaeleee/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\nhttps://minjaeleee.github.io/front_6th_chapter1-3\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n평소 참조 동일성에 대해서 깊이 이해하지 않았습니다.(= 그동안 대충 아는 ‘척’만 하고 중요한 사실은 스윽 넘겼다…) 메모이제이션이나 hooks에서 사용하는 의존성 배열에 해당하는 값들은 항상 참조 동일성을 유지하게 되고 렌더링 부분에서 즉시 비용 감소로 여겼기 때문입니다.\\r\\n사실 이 부분을 유심히 고민해보면 저는 리액트의 얕은 비교를 통한 렌더링 원리에 대해서 부족했던 것 같습니다. 따라서, 다시 이 부분을 따라가서 정리해보았습니다.\\r\\n\\r\\n**참조 동일성이란?**\\r\\n\\r\\n```jsx\\r\\nfunction MyComponent() {\\r\\n  const config = { darkMode: true };\\r\\n\\r\\n  useEffect(() => {\\r\\n    console.log(\\"config changed!\\");\\r\\n  }, [config]);\\r\\n\\r\\n  return null;\\r\\n}\\r\\n```\\r\\n\\r\\n- 이 컴포넌트가 리렌더링될 때마다 `config` 객체는 새로 만들어집니다.\\r\\n- 값은 같아 보여도 참조가 다르기 때문에 useEffect는 매번 실행이 됩니다.\\r\\n⇒ 이것이 바로 “모든 객체는 리렌더링 때 재생성되고, 참조가 다르다.” 라는 의미입니다.\\r\\n\\r\\n**참조 동일성을 유지하지 못하는 것이 어떤 문제를 유발하나?**\\r\\n\\r\\n과제를 진행하면서 memo, useMemo, useAutoCallback 훅을 작성한 코드를 보면 이해할 수 있습니다.\\r\\n\\r\\n```jsx\\r\\n// memo.ts\\r\\n\\r\\nimport { type FunctionComponent } from \\"react\\";\\r\\nimport { shallowEquals } from \\"../equals\\";\\r\\nimport { useRef } from \\"../hooks\\";\\r\\n\\r\\n// memo HOC는 컴포넌트의 props를 얕은 비교하여 불필요한 렌더링을 방지합니다.\\r\\nexport function memo<P extends object>(Component: FunctionComponent<P>, equals = shallowEquals): FunctionComponent<P> {\\r\\n  // 메모이제이션된 컴포넌트 생성\\r\\n  const MemoizedComponent: FunctionComponent<P> = (props) => {\\r\\n    // 1. 이전 props를 저장할 ref 생성\\r\\n    const memoizedRef = useRef<{\\r\\n      prevProps: P | null;\\r\\n      rendered: ReturnType<FunctionComponent<P>> | null;\\r\\n    }>({\\r\\n      // 이전 props 저장\\r\\n      prevProps: null,\\r\\n      // 이전 JSX 저장\\r\\n      rendered: null,\\r\\n    });\\r\\n\\r\\n    // 3. eqauls 함수를 사용하여 props 비교 - 새롭게 컴포넌트 렌더링X\\r\\n    if (memoizedRef.current.prevProps !== null && equals(memoizedRef.current.prevProps, props)) {\\r\\n      return memoizedRef.current.rendered!;\\r\\n    }\\r\\n\\r\\n    // 4. props가 변경된 경우에만 새로운 렌더링 수행\\r\\n    memoizedRef.current.prevProps = props;\\r\\n    memoizedRef.current.rendered = Component(props);\\r\\n\\r\\n    return memoizedRef.current.rendered;\\r\\n  };\\r\\n\\r\\n  return MemoizedComponent;\\r\\n}\\r\\n```\\r\\n\\r\\nmemo는 props를 shallowEqual(얕은 비교)를 수행하고 다르면 리렌더링을 하고 같으면 리렌더링을 막습니다.\\r\\n그런데 config 객체는 매번 새로 생성되므로 얕은 비교에서 false를 반환하고 리렌더링을 하게 됩니다.\\r\\n\\r\\n결국엔 컴포넌트는 매번 리렌더링되고 memo의 효과는 없어집니다.\\r\\n이러한 방식이 반복되고 구조가 비대해지다보면 불필요한 렌더링과 성능저하로 이어지겠죠.\\r\\n\\r\\n**참조 동일성을 안정화하는 방법**\\r\\n\\r\\n참조 동일성을 안정화하는 방법의 두 가지를 배웠습니다.\\r\\n\\r\\n**첫 번째, useRef를 사용하는 것입니다.**\\r\\n값이 변하지 않거나, 값이 바뀌어도 리렌더링을 유발하지 않아야 할 때 사용할 수 있습니다.\\r\\n다만 객체, 함수, DOM 노드 등 “**값은 유지하지만 UI와 무관**”한 상태에만 사용해야 합니다. 이는 리액트 공식문서 useRef 사용 주의사항에도 볼 수 있습니다.\\r\\n\\r\\n**두 번째, 모든 의존성 값들을 useMemo나 useCallback으로 감싸 안정화하는 것입니다.**\\r\\n이번 과제의 ToastProvider를 이렇게 값을 안정화하여 사용했습니다.\\r\\ncreateActions 함수를 매번 재실행하지 않고 useMemo를 사용하여 참조의 안정성을 확보했고,  hideAfter 함수 역시 hide에 의존한 메모이제이션을 해주어 일관된 참조를 보장하도록 구성했습니다.\\r\\n\\r\\n```jsx\\r\\n// ToastProvider.tsx\\r\\n\\r\\nexport const ToastProvider = memo(({ children }: PropsWithChildren) => {\\r\\n  const [state, dispatch] = useReducer(toastReducer, initialState);\\r\\n  const { show, hide } = useMemo(() => createActions(dispatch), [dispatch]);\\r\\n  const visible = state.message !== \\"\\";\\r\\n\\r\\n  const hideAfter = useMemo(() => debounce(hide, DEFAULT_DELAY), [hide]);\\r\\n\\r\\n  const showWithHide = useAutoCallback((message: string, type: ToastType) => {\\r\\n    show(message, type);\\r\\n    hideAfter();\\r\\n  });\\r\\n\\r\\n  const commandValue = useMemo(() => ({ show: showWithHide, hide }), [showWithHide, hide]);\\r\\n  const stateValue = useMemo(() => ({ message: state.message, type: state.type }), [state.message, state.type]);\\r\\n\\r\\n  return (\\r\\n    <ToastCommandContext.Provider value={commandValue}>\\r\\n      <ToastStateContext.Provider value={stateValue}>\\r\\n        {children}\\r\\n        {visible && createPortal(<Toast />, document.body)}\\r\\n      </ToastStateContext.Provider>\\r\\n    </ToastCommandContext.Provider>\\r\\n  );\\r\\n});\\r\\n```\\r\\n\\r\\n이런 과정들을 통해서 얕은 비교에서 참조 동일성이 왜 중요한지를 이해하고, 리액트의 렌더링 원리에 대해서 더 깊게 이해할 수 있었습니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n**얕은 비교 - 객체 순수 비교**\\r\\n\\r\\n처음에는 객체 비교를 하기 위해서 아래와 같이 type으로 구분을 했습니다. 물론, 테스트는 통과했지만 사실 자바스크립트에서 typeof value === “object” 라는 문자열로 반환되는 경우는 생각보다 많습니다. 배열, function, null, new Date(), new RegExp(), document.body …\\r\\n\\r\\n<img width=\\"144\\" height=\\"135\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/24bbb9c3-7fa7-4ee0-a6a1-62f2a256e220\\" />\\r\\n\\r\\n```jsx\\r\\n if (a && b && typeof a === \\"object\\" && typeof b === \\"object\\" && !Array.isArray(a) && !Array.isArray(b)) {\\r\\n    const keysA = Object.keys(a);\\r\\n    const keysB = Object.keys(b);\\r\\n\\r\\n    if (keysA.length !== keysB.length) return false;\\r\\n\\r\\n    for (const key of keysA) {\\r\\n      if (!keysB.includes(key) || (a as Record<string, unknown>)[key] !== (b as Record<string, unknown>)[key])\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n```\\r\\n\\r\\n따라서 isObject 함수로 순수 객체일 경우를 한 번 판단하고, Object.keys()로 직접 가진 key만 추출을 하고, Object.prototype,hasOwnProperty.call()로 해당 객체가 직접 소유하고 있는지 다시 판단하는 로직으로 변경하여 객체 여부에 대한 엣지 케이스를 보완하고 정밀도를 높였습니다.\\r\\n\\r\\n```jsx\\r\\nconst isObject = (val: unknown): val is Record<string, unknown> => {\\r\\n    return typeof val === \\"object\\" && val !== null && !Array.isArray(val);\\r\\n  };\\r\\n\\r\\n  if (isObject(a) && isObject(b)) {\\r\\n    const keysA = Object.keys(a);\\r\\n    const keysB = Object.keys(b);\\r\\n\\r\\n    if (keysA.length !== keysB.length) return false;\\r\\n\\r\\n    for (const key of keysA) {\\r\\n      if (!Object.prototype.hasOwnProperty.call(b, key)) return false;\\r\\n      if (a[key] !== b[key]) return false; // 얕은 비교\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n```\\r\\n\\r\\n**깊은비교 리팩토링**\\r\\n\\r\\ndeepEquals 함수를 작성할 때에는, shallowEquals에서 depth가 추가된 배열이나 객체일 경우에만 재귀적으로 모든 depth에 대한 탐색 및 비교가 필요했습니다. 따라서, shallowEquals 함수를 가져와 이 부분을 추가해 주었습니다.\\r\\n\\r\\n```jsx\\r\\n// 리팩토링 전\\r\\nexport const deepEquals = (a: unknown, b: unknown): boolean => {\\r\\n  // 1. 기본 값 비교\\r\\n  if (a === b || (Number.isNaN(a) && Number.isNaN(b))) return true;\\r\\n\\r\\n  // 2. 배열 비교\\r\\n  if (Array.isArray(a) && Array.isArray(b)) {\\r\\n    // 배열의 length로 비교\\r\\n    if (a.length !== b.length) return false;\\r\\n\\r\\n    // 재귀적으로 모든 depth의 요소를 비교\\r\\n    for (let i = 0; i < a.length; i++) {\\r\\n      if (!deepEquals(a[i], b[i])) return false;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // 배열이 아닌데 한쪽만 배열이면 false\\r\\n  if (Array.isArray(a) !== Array.isArray(b)) return false;\\r\\n\\r\\n  // 3. 순수 객체 비교\\r\\n  const isObject = (val: unknown): val is Record<string, unknown> => {\\r\\n    return typeof val === \\"object\\" && val !== null && !Array.isArray(val);\\r\\n  };\\r\\n\\r\\n  if (isObject(a) && isObject(b)) {\\r\\n    const keysA = Object.keys(a);\\r\\n    const keysB = Object.keys(b);\\r\\n\\r\\n    if (keysA.length !== keysB.length) return false;\\r\\n\\r\\n    for (const key of keysA) {\\r\\n      if (!Object.prototype.hasOwnProperty.call(b, key)) return false;\\r\\n      if (!deepEquals(a[key], b[key])) return false;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // 기본 타입인데 === 실패했으면 false\\r\\n  return false;\\r\\n};\\r\\n\\r\\n```\\r\\n\\r\\n작성하고 보니, 기존 비교는 shallowEquals 함수를 실행시켜 비교시키고 재귀적으로 탐색 및 비교가 필요한 요소들에 대해서만 deepEquals 함수로 깊은 비교를 실행시키도록 리팩토링하여 불필요한 코드를 shallowEquals 함수로 재활용하면서 가독성을 높였습니다.\\r\\n\\r\\n```jsx\\r\\nimport { shallowEquals } from \\"./shallowEquals\\";\\r\\n\\r\\nexport const deepEquals = (a: unknown, b: unknown): boolean => {\\r\\n  if (shallowEquals(a, b)) return true;\\r\\n\\r\\n  // 배열인 경우 재귀 비교\\r\\n  if (Array.isArray(a) && Array.isArray(b)) {\\r\\n    if (a.length !== b.length) return false;\\r\\n    for (let i = 0; i < a.length; i++) {\\r\\n      if (!deepEquals(a[i], b[i])) return false;\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  const isObject = (val: unknown): val is Record<string, unknown> =>\\r\\n    typeof val === \\"object\\" && val !== null && !Array.isArray(val);\\r\\n\\r\\n  // 순수 객체 재귀 비교\\r\\n  if (isObject(a) && isObject(b)) {\\r\\n    const keysA = Object.keys(a);\\r\\n    const keysB = Object.keys(b);\\r\\n    if (keysA.length !== keysB.length) return false;\\r\\n\\r\\n    for (const key of keysA) {\\r\\n      if (!Object.prototype.hasOwnProperty.call(b, key)) return false;\\r\\n      if (!deepEquals(a[key], b[key])) return false;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  return false;\\r\\n};\\r\\n\\r\\n\\r\\n```\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n```\\r\\nexport function memo<P extends object>(Component: FunctionComponent<P>, equals = shallowEquals): FunctionComponent<P> {\\r\\n  // 메모이제이션된 컴포넌트 생성\\r\\n  const MemoizedComponent: FunctionComponent<P> = (props) => {\\r\\n    // 1. 이전 props를 저장할 ref 생성\\r\\n    const memoizedRef = useRef<{\\r\\n      prevProps: P | null;\\r\\n      rendered: ReturnType<FunctionComponent<P>> | null;\\r\\n    }>({\\r\\n      // 이전 props 저장\\r\\n      prevProps: null,\\r\\n      // 이전 JSX 저장\\r\\n      rendered: null,\\r\\n    });\\r\\n\\r\\n    // 3. eqauls 함수를 사용하여 props 비교 - 새롭게 컴포넌트 렌더링X\\r\\n    if (memoizedRef.current.prevProps !== null && equals(memoizedRef.current.prevProps, props)) {\\r\\n      return memoizedRef.current.rendered!;\\r\\n    }\\r\\n\\r\\n    // 4. props가 변경된 경우에만 새로운 렌더링 수행\\r\\n    memoizedRef.current.prevProps = props;\\r\\n    memoizedRef.current.rendered = Component(props);\\r\\n\\r\\n    return memoizedRef.current.rendered;\\r\\n  };\\r\\n\\r\\n  return MemoizedComponent;\\r\\n}\\r\\n```\\r\\n\\r\\nmemo 컴포넌트에서 equals 함수를 사용하여 props를 비교할 때 \\"새롭게 컴포넌트 렌더링을 시키지 않는다.\\" 라는 의도로 Component 함수를 호출하지 않고 return해버렸는데, 이렇게 Component(props)를 조건부로 호출하는 방식이 문제가 생길 수도 있겠다는 생각이 들었습니다.\\r\\n예를 들어서, 아래와 같이 memo로 감싸진 컴포넌트를 사용할 때 내부에서 hooks를 사용하게 되면 equals를 통한 변경이 일어나지 않았음에도 Component(props) 함수를 생략해버리니 React의 hook 규칙 위반 가능성이 될 수 있을것 같습니다.\\r\\n이 부분에 대한 개선이 필요해보입니다!\\r\\n\\r\\n```\\r\\nconst MyComponent = memo(function MyComponent(props) {\\r\\n  const [count, setCount] = useState(0);\\r\\n  useEffect(() => {\\r\\n    console.log(\\"effect 실행됨\\");\\r\\n  }, []);\\r\\n\\r\\n  return <div>{count}</div>;\\r\\n});\\r\\n```\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n리액트의 렌더링 과정과 원리에 대해서 심층 깊게 이해한 시간이었습니다.\\r\\n다만, 꽤 많은 내용을 학습했기 때문에 제 지식으로 온전히 습득하기 위한 과정을 다시 한번 스스로 거쳐야겠습니다.\\r\\n\\r\\n리액트의 렌더링 과정과 원리에 대해서는 리액트의 공식문서와 도서, 문서 등으로 학습했고 면접과 같은 중요한 날 전에는 이를 달달 외우곤 했습니다. \\r\\n하지만, 직접 학습하고 구현해보니 자연스레 외워지게 되었습니다.\\r\\n예를 들어서, 2주차 때 학습한 과제에서 React element의 object 속성을 이해할 때 type, props, children 값들의 정의를 글로 외우다 보니 항상 몇 일 지나면 까먹었는데\\r\\n이번에 직접 object로 트랜스파일링 하는 과정을 겪고, DOM에 반영하는 과정을 겪다보니 자연스레 type, props, children 값이 필요한 이유와 의미에 대해서 이해할 수 있었습니다.\\r\\n또 리액트의 렌더링은 “얕은 비교를 수행하며 가상 DOM은 변경된 사항만 DOM에 직접 반영한다” 라는 의미를 워딩으로 외우다보니, 막상 얕은 비교는 어떻게 이루어지는지 참조 동일성은 어떻게 유지해야하는지 내부 원리에 대해서 정확히 이해하지 못하고 있었습니다. \\r\\n자연스레 과제를 하면서 부족했던 부분을 확인하고 지식을 습득할 수 있었습니다.\\r\\n\\r\\n결론은 직접 구현하면서 이해하는 과정이 있다보니 재미있게 학습할 수 있었고, 1~3주차의 과제를 통해서 리액트에 대한 깊은 이해를 더욱 할 수 있는 기반이 만들어진 것 같습니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n과제 학습을 수행하며 리액트와 자바스크립트에 대한 조금 더 많이 이해할 수 있게 되었고, 더 깊은 수준을 이해할 수 있는 중요한 디딤돌이 되었습니다.\\r\\n또한, AI와 함께 과제를 수행하면서 빠르게 나의 코드를 구조화하고, 분석하고, 리팩토링을 할 수 있었습니다. \\r\\n\\r\\n다만 요구하는 특정 기능을 “정답”에 가까운 코드로 만드는 것은 과제를 수행함에 있어서 사람마다 큰 습득이나 변별력이 없겠다는 생각이 들었습니다.\\r\\nAI로 빠르고 일원화된 정답을 제출하는데, 코드를 작성하기 위해 고민한 시간과 노력들 그리고 의도와 목적들을 모두 표현하는게 더 중요하겠다는 생각이 들었습니다.\\r\\n그래서 과제로서 이런 문제를 해결하는데는 어렵겠지만 경험하고 해결한 사례, 배경, 고민한 흔적들을 나눌 수 있을만한 과제나 시간이 있으면 더 좋을 것 같습니다.\\r\\n\\r\\n아직.. 구체적인 예시까지는 생각은 못 해봤습니다.. ㅎ\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n리액트의 렌더링 과정은 React Element 생성 → 가상 DOM 비교 (diffing) → 실제 DOM 반영 (commit) 세 가지 단계로 구성이됩니다.\\r\\n\\r\\n**1. JSX → React Element 생성**\\r\\nJSX는 React.createElement 호출로 변환되어 React Element라는 일반 Javascript 객체가 됩니다.\\r\\n\\r\\n**2. Reconciliation (조정 단계)**\\r\\n      이전 렌더링 결과와 새로운 React Element를 비교하여 업데이트해야 할 변경점만 계산하게 됩니다. 이때, 이 과정을 통해 성능을 높이고 불필요한 DOM 업데이트를 방지합니다.\\r\\n\\r\\n    이때 2주차 때 구현한 updateElement와 비교하면 주요 규칙은 다음과 같은 것들이 있습니다.\\r\\n    \\r\\n    - 타입(type)이 다르면 업데이트\\r\\n        - 예) ```<div> → <span>```\\r\\n        - 이전 노드 제거 + 새로운 노드 추가\\r\\n    - 타입이 같으면 속성만 비교\\r\\n        - 예)) ```<div className=”a”> → <div className=”b”>```\\r\\n        - DOM은 재사용되고, className만 업데이트\\r\\n    - Key 기반 리스트 비교\\r\\n        - key를 기준으로 요소 재사용 여부를 판단\\r\\n\\r\\n**3. Commit Phase (실제 DOM 반영 단계)**\\r\\n앞서 수집된 변경사항을 기반으로 실제 DOM을 조작합니다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n메모이제이션에 대한 생각을 먼저 표현하기 전에, 배경이 되는 리액트의 렌더링에 대한 생각을 먼저 정리하겠습니다.\\r\\n\\r\\n**리액트의 렌더링에 대한 나의 생각**\\r\\n\\r\\n리액트의 렌더링은 단순하고 예측 가능하다는 점에서 탁월하지만, 렌더링마다 함수 전체가 재실행되고 객체, 함수, 배열 등 모든 참조가 새로 만들어진다는 구조적인 특성은 개발자가 깊이 고민하고 다루어야할 부분이라고 생각합니다.\\r\\n그래서 저는 이 구조를 단점으로 보지 않는 대신 **변경을 감지하는 기준이 참조이기 때문에 개발자는 참조를 유지할 책임이 있다**고 생각합니다. 즉, 의미있는 리렌더링을 의도할 책임이 있다고 생각합니다.\\r\\n그렇기 때문에 리액트의 렌더링 원리를 정확하게 이해하는 것은 **값의 참조를 안정화해서, 의미있는 UI의 변화**가 반영될 수 있는 것이라고 생각합니다.\\r\\n\\r\\n**메모이제이션**\\r\\n\\r\\n먼저, 메모이제이션이란 어떤 연산의 결과를 캐싱해 두었다가, 동일한 입력이 들어오면 재계산하지 않고 캐시된 결과를 재사용하는 최적화 기법입니다.리액트의 메모이제이션은 제가 앞서 설명한 리액트의 렌더링의 구조적 단점을 보완할 수 있는 중요한 기술입니다.\\r\\n\\r\\n단, 앞서 제가 얘기한 “**리엑트의 렌더링 원리를 정확하게 이해한 상태에서 구현할 때**” 라는 전제가 붙습니다.\\r\\nReact.memo, useMemo, useCallback 등은 참조의 동일성을 기반으로 동작하기 때문에 참조의 동일성을 지켜주지 않으면 오히려 불필요한 리렌더링, 불필요한 실행, 성능 저하로 이어지기 때문입니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n**상태 관리란?**\\r\\n\\r\\n상태(state)는 UI가 반응해야 하는 데이터의 현재 모습을 의미합니다. 이 상태를 언제, 어디서, 어떻게 관리할지를 결정하는 것이프론트엔드 앱 설계에서는 가장 중요한 결정 중 하나입니다.\\r\\n현재 상태관리 라이브러리로는 Redux, Zustand, Recoil 등이 주류를 이루고 있으며 React의 상태관리는 컴포넌트 내부에서 useState를 다루는 것이 일상이 되었습니다.\\r\\n하지만, 상태의 복잡도보다 더 중요한 것은 “**이 상태를 누가 알아야 하는가?**” 즉, **컨텍스트의 경계 설정**입니다.\\r\\n\\r\\n**컨텍스트의 역할**\\r\\n\\r\\nReact의 Context는 컴포넌트 트리 어디에서든 데이터를 공급하고 구독할 수 있게 해줍니다.\\r\\n그러나, Context 내부 상태가 자주 바뀌면 그 상태를 구독 중인 모든 컴포넌트가 불필요하게 렌더링이 발생됩니다. 따라서, 컨텍스트는 공유 상태의 목적으로 쓰는 것이 가장 적절하다고 생각합니다.\\r\\n\\r\\n**공유 상태(Shared State)**\\r\\n\\r\\n공유 상태란 둘 이상의 컴포넌트가 함께 사용하는 상태를 의미합니다. \\r\\n앱 전역에서 일관된 정보를 관리하는 전역 상태의 목적과는 다르게 특정 UI흐름이나 기능 내에서 여러 컴포넌트 간 데이터를 공유하고 싶을 때, 제한된 범위 내에서 데이터를 공유하고 싶을 때 사용하는데 목적이 있습니다.\\r\\n\\r\\n**결론**\\r\\n\\r\\n따라서 상태 관리의 목적을 이해하고 설계하는 것이 중요하다고 생각이 됩니다. 공유 상태가 필요할 때는 컨텍스트, 전역 상태가 필요할 때는 전역 상태를 고려하는 것이 장,단점과 목적에 따른 적절한 사용 방법이라고 생각합니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n1. 메모이제이션이 필요한 부분을 어떻게 평가하며 사용하고 계신지가 궁금합니다!\\r\\n- 과제를 진행하며 메모이제이션을 위한 참조 동일성을 보장하는 구조를 만들다 보니 depth가 깊어지거나 공유 상태 구조가 복잡해질수록 가독성도 떨어지고, 캐시 관련 유지비용이 더 생길 것 같습니다. 리액트에서도 최적화에 의한 확실한 이점이 있는 경우에만 사용할 것으로 명시가 되어 있는데.. 현업에서는 적용하기 애매한 포인트들이 여럿 있었는데, 주로 코치님께서는 어떤 상황에서 메모이제이션이 필요한 상황이라고 판단하고 의사결정했는지 간단하게라도 경험을 들려주실 수 있을까요?\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-20T11:11:19Z","updated_at":"2025-07-26T05:33:31Z","closed_at":null,"merged_at":null,"merge_commit_sha":"f25f89b1860bf87965d29b619c97f9835cfbdda6","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/25/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/25/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/25/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/42b2d169c0795764ffe594098d0144b2b44eab7a","head":{"label":"minjaeleee:main","ref":"main","sha":"42b2d169c0795764ffe594098d0144b2b44eab7a","user":{"login":"minjaeleee","id":81751091,"node_id":"MDQ6VXNlcjgxNzUxMDkx","avatar_url":"https://avatars.githubusercontent.com/u/81751091?v=4","gravatar_id":"","url":"https://api.github.com/users/minjaeleee","html_url":"https://github.com/minjaeleee","followers_url":"https://api.github.com/users/minjaeleee/followers","following_url":"https://api.github.com/users/minjaeleee/following{/other_user}","gists_url":"https://api.github.com/users/minjaeleee/gists{/gist_id}","starred_url":"https://api.github.com/users/minjaeleee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/minjaeleee/subscriptions","organizations_url":"https://api.github.com/users/minjaeleee/orgs","repos_url":"https://api.github.com/users/minjaeleee/repos","events_url":"https://api.github.com/users/minjaeleee/events{/privacy}","received_events_url":"https://api.github.com/users/minjaeleee/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023022166,"node_id":"R_kgDOPPoUVg","name":"front_6th_chapter1-3","full_name":"minjaeleee/front_6th_chapter1-3","private":false,"owner":{"login":"minjaeleee","id":81751091,"node_id":"MDQ6VXNlcjgxNzUxMDkx","avatar_url":"https://avatars.githubusercontent.com/u/81751091?v=4","gravatar_id":"","url":"https://api.github.com/users/minjaeleee","html_url":"https://github.com/minjaeleee","followers_url":"https://api.github.com/users/minjaeleee/followers","following_url":"https://api.github.com/users/minjaeleee/following{/other_user}","gists_url":"https://api.github.com/users/minjaeleee/gists{/gist_id}","starred_url":"https://api.github.com/users/minjaeleee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/minjaeleee/subscriptions","organizations_url":"https://api.github.com/users/minjaeleee/orgs","repos_url":"https://api.github.com/users/minjaeleee/repos","events_url":"https://api.github.com/users/minjaeleee/events{/privacy}","received_events_url":"https://api.github.com/users/minjaeleee/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/minjaeleee/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/minjaeleee/front_6th_chapter1-3/deployments","created_at":"2025-07-20T11:08:47Z","updated_at":"2025-07-25T00:39:16Z","pushed_at":"2025-07-25T00:39:32Z","git_url":"git://github.com/minjaeleee/front_6th_chapter1-3.git","ssh_url":"git@github.com:minjaeleee/front_6th_chapter1-3.git","clone_url":"https://github.com/minjaeleee/front_6th_chapter1-3.git","svn_url":"https://github.com/minjaeleee/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":298,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/25"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/25"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/25"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/25/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/25/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/25/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/42b2d169c0795764ffe594098d0144b2b44eab7a"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/26","id":2679840082,"node_id":"PR_kwDOPMCTuc6fux1S","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/26","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/26.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/26.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/26","number":26,"state":"open","locked":false,"title":"[3팀 박준형] Chapter 1-3. React, Beyond the Basics","user":{"login":"BBAK-jun","id":33216504,"node_id":"MDQ6VXNlcjMzMjE2NTA0","avatar_url":"https://avatars.githubusercontent.com/u/33216504?v=4","gravatar_id":"","url":"https://api.github.com/users/BBAK-jun","html_url":"https://github.com/BBAK-jun","followers_url":"https://api.github.com/users/BBAK-jun/followers","following_url":"https://api.github.com/users/BBAK-jun/following{/other_user}","gists_url":"https://api.github.com/users/BBAK-jun/gists{/gist_id}","starred_url":"https://api.github.com/users/BBAK-jun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BBAK-jun/subscriptions","organizations_url":"https://api.github.com/users/BBAK-jun/orgs","repos_url":"https://api.github.com/users/BBAK-jun/repos","events_url":"https://api.github.com/users/BBAK-jun/events{/privacy}","received_events_url":"https://api.github.com/users/BBAK-jun/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### [배포 링크](https://bbak-jun.github.io/front_6th_chapter1-3/)\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n이번 과제를 진행하고 새롭게 정리가된 저의 생각을 [블로그 글](https://www.dev-bbak.site/blog/DEV/react-context)로 정리했습니다\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n**프레임워크의 내부 동작 원리에 대한 깊은 이해**\\r\\n\\r\\n1주차에서는 JavaScript로 SPA를 직접 구현하면서 이벤트위임, 소프트네비게이팅, 상태관리 등 모던 프론트엔드 프레임워크의 핵심 개념들을 바닥부터 구현해보는 경험을 했습니다.\\r\\n\\r\\n2주차에서는 vite의 esbuild option의 jsx factory 함수를 직접 만들어 가상돔을 구현하고 커스텀 jsx 파서를 제작했습니다. 특히 async function의 렌더링 처리 방식과 코어 렌더링 로직을 구현하며 동기적 렌더링 전이구조를 만들어보는 흥미로운 경험이었습니다.\\r\\n\\r\\n3주차에서는 React의 훅 시스템과 얕은비교/깊은비교를 직접 구현하면서 diffing 알고리즘을 구현해보는 경험을 했습니다.\\r\\n\\r\\n이러한 단계적 학습을 통해 React와 같은 프레임워크가 어떻게 동작하는지, 그리고 그 내부에서 일어나는 최적화 기법들을 직접 체험하며 프론트엔드 개발에 대한 근본적인 이해도를 크게 향상시킬 수 있었습니다.\\r\\n\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n특별히 자랑하고 싶은 코드는 없습니다. 이번 과제는 명확한 답이 있는 과제였기 때문에 테스트코드를 보고 열심히 테스트를 통과하기 위해 코드를 작성해나가면 되는 구조였습니다. 비교적 답이 없는 이전 과제들과 달리 수월했습니다.\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n개선이 필요하다고 생각하는 특별한 코드는 없습니다. 이번 과제는 명확한 답이 있는 과제였기 때문에 테스트코드를 보고 열심히 테스트를 통과하기 위해 코드를 작성해나가면 되는 구조였습니다. 비교적 답이 없는 이전 과제들과 달리 수월했습니다.\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n따로 제공해주신 학습 갈무리를 통해 평소에 보관해두었던 아티클들을 다시 읽어보고 생각을 정리할 수 있었습니다. \\r\\n\\r\\n특히 좋은 코드는 무엇일까에 대해 이전부터 깊게 생각해봤었는데, 최근에 클린 아키텍처를 읽으면서 **좋은 코드는 자유를 박탈하는 코드**라고 생각하게 되었습니다. 자유를 박탈하여 예측 가능한 코드가 함께 작성하기 좋은 코드라고 생각하게 된 계기가 되었습니다.\\r\\n\\r\\n**리액트 렌더링 과정에 대한 깊은 이해**\\r\\nVirtual DOM, Diffing 알고리즘, Reconciliation 과정을 직접 구현해보면서 React가 어떻게 성능 최적화를 달성하는지 체험할 수 있었습니다. 특히 가상돔이 단순히 성능 개선 도구가 아니라 개발자가 UI 업데이트 로직을 직접 작성하지 않도록 하는 추상화 레이어라는 점을 깨달았습니다.\\r\\n\\r\\n**메모이제이션에 대한 철학적 접근**\\r\\nDan Abramov와 Stefano J. Attardi의 메모이제이션 논쟁을 통해 성능 최적화의 본질에 대해 생각해볼 수 있었습니다. 메모이제이션이 잘못 설계된 컴포넌트 구조를 땜질하는 용도가 아니라, 올바른 컴포넌트 구조 설계가 우선되어야 한다는 관점을 정립했습니다.\\r\\n\\r\\n**Context의 본질에 대한 재정의**\\r\\nContext를 단순한 상태관리 도구로 보는 관점에서 벗어나 Dependency Injection Tool로 이해하게 되었습니다. Mark Erikson의 관점을 통해 Context가 컴포넌트의 관심사 범위를 제한하는 격리 레이어 역할을 한다는 것을 깨달았습니다.\\r\\n\\r\\n이러한 학습 과정에서 Robert Cecil Martin의 \\"패러다임은 개발자의 권한을 박탈한다\\"는 말이 깊이 와닿았습니다. 좋은 코드란 개발자의 자유를 의도적으로 제한함으로써 예측 가능하고 함께 작성하기 좋은 구조를 강제하는 코드라는 철학을 갖게 되었습니다.\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n**AI와 함께하는 학습의 새로운 경험**\\r\\n\\r\\n이번 과제는 줌 인터넷 과제를 다시 한번 좋은 도구와 함께 재도전해본 의미 있는 경험이었습니다. AI를 통해 코드 분석을 더욱 편하게 할 수 있었고, 나의 생각과 지식을 다시 한번 체계적으로 정리할 수 있는 기회가 되었습니다.\\r\\n\\r\\n**과제 설계의 우수성**\\r\\n\\r\\n특히 인상적이었던 것은 과제의 구성 방식이었습니다. \\r\\n\\r\\n답이 있는 과제에서는 추가로 답이 없는 주제로 본인의 생각을 펼쳐보라고 한 점이 매우 좋았습니다. 단순히 정해진 정답을 구현하는 것에서 그치지 않고, 그 과정에서 얻은 인사이트를 바탕으로 더 깊은 사고를 할 수 있도록 유도하는 설계였습니다.\\r\\n\\r\\n반대로 답이 없는 과제에서는 본인 코드의 추상적인 개념을 구체화하여 설명하라는 과제들이 아주 인상적이었습니다. 막연한 아이디어나 감각적인 이해를 명확한 언어로 표현하도록 강제함으로써 진정한 이해에 도달할 수 있었습니다.\\r\\n\\r\\n**가장 인상 깊었던 도전**\\r\\n\\r\\n개인적인 소견으로는 답이 없는 과제들이 가장 어렵고 힘들었지만 제일 인상적이었습니다. 정해진 정답을 찾아가는 과정이 아니라, 나의 생각들을 직접 정리해가면서 구체화시켜가는 과정이었기 때문입니다. \\r\\n\\r\\n이러한 과정을 통해 단순히 기술적 구현 능력뿐만 아니라, 개발자로서의 사고 체계와 철학을 정립할 수 있는 귀중한 기회가 되었습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\nReact와 같은 자바스크립트 라이브러리에서 사용 되는 개념인 Virtual DOM(가상돔)은 실제 DOM(Document Object Model)과 비슷한 구조를 가지지만, 자바스크립트 엔진 메모리에 상주하며 브라우저에서 실제로 표시되는 돔과는 독립적으로 존재합니다.\\r\\n\\r\\n가상돔이 존재하는 자바스크립트 엔진의 메모리는 브라우저의 렌더링 엔진이 동작하는 곳과는 별개의 공간이다. 브라우저는 자바스크립트 엔진과 렌더링 엔진을 분리하여 동작하며, 자바스크립트 엔진은 가상돔을 비롯한 자바스크립트 객체들을 처리하고 렌더링 엔진은 HTML CSS 이미지 등을 처리한다.\\r\\n\\r\\n가상돔은 자바스크립트의 일반 객체로 이루어져 있으며, 뷰(View)를 업데이트하는 데 사용된다. 일반적으로 브라우저에서 실제로 표시되는 돔은 매우 복잡하고 대규모일 수 있다. 이러한 돔 구조를 변경하면 브라우저가 렌더링하는데 많은 시간이 걸릴 수 있다. 이는 병목현상을 야기할 수도 있으며 많은 조작이 이루어질 경우 성능 저하를 초래할 수 있다. 이러한 문제를 해결하기 위해 리액트와 같은 라이브러리는 가상돔을 사용하여 돔 조작을 최소화하고 성능을 개선한다.\\r\\n\\r\\n가상돔은 위의 문제를 해결하기 위해 사용된다. 브라우저에서 표시되는 실제 돔과 동기화 되지는 않는다. 대신 업데이트된 가상돔을 사용하여 이전 가상돔과 비교하여 변경된 부분만 실제 돔에 적용한다.\\r\\n\\r\\n이를 통해 브라우저에서 필요한 최소한의 업데이트만 수행하여 성능을 개선하게된다.\\r\\n\\r\\n> 💡 가상돔 역시도 자원을 소비하기에 가상돔의 업데이트 또한 최소화해야한다. 이를 위해 리액트와 같은 라이브러리는 변경되는 부분만 업데이트하고 불필요한 렌더링을 방지하여 성능을 최적화한다.\\r\\n\\r\\n리액트는 가상돔을 사용함으로써 UI를 빠르게 업데이트 할 수 있도록 도와준다.\\r\\n\\r\\n이를 통해 개발자는 UI 업데이트 로직을 직접 작성하는 대신에 리액트라는 라이브러리에게 위임하므로 생산성을 높일 수 있다. 또한 가상돔은 리얼돔과는 별개의 메모리 공간에서 작동하므로 UI 업데이트 작업이 빠르고 효율적으로 처리 될 수 있다.\\r\\n\\r\\n**성능향상**\\r\\n\\r\\nUI를 업데이트하는 방법에는 여러가지 방법이 있다.\\r\\n\\r\\n가장 간단한 방법으로는 UI 전체를 새로 렌더링하는 방법이다. 하지만 이 방법은 UI의 크기가 커질수록 렌더링 시간이 길어지는 문제가 있고 변경되지 않아도 되는 부분까지 모두 리렌더링이 필요하므로 불필요한 작업이 많아진다.\\r\\n\\r\\nReact에서는 가상돔과 Diffing 알고리즘을 사용하여 변경된 부분만 실제 돔에 업데이트 함으로써 성능을 향상시킨다. 가상돔과 리얼돔은 동일한 구조를 갖지만, 메모리 상에 존재하므로 실제 돔보다 빠른속도로 UI업데이트 작업을 처리할 수 있다.\\r\\n\\r\\nDiffing 알고리즘\\r\\nDiffing 알고리즘은 이전 가상돔과 새로운 가상돔을 비교하여 변경된 부분을 찾아내는 과정이다. 이전 가상돔과 새로운 가상돔은 각각 하나의 트리 구조로 표현되며, 이 트리 구조를 비교하여 노드 단위로 변경된 부분을 탐색한다.\\r\\n\\r\\n노드의 타입이나 속성, 자식 노드 등을 비교하여 변경된 부분을 탐색한다. 노드의 타입이나 속성이 변경된 경우 해당 노드를 업데이트하고 자식 노드가 변경된 경우 해당 노드의 자식 노드를 비교하여 변경된 부분을 찾아낸다.\\r\\n\\r\\n**Diffing 알고리즘의 구체적인 동작 방식은 아래와 같다.**\\r\\n\\r\\n1. 트리 순회 이전 가상돔과 새로운 가상돔을 순회하면서 각 노드의 타입과 속성을 비교한다. 이를 위해 가상돔은 트리구조로 이루어져 있으며 깊이 우선 방식으로 순회한다.\\r\\n2. 변경 여부 확인 각 노드의 타입과 속성을 비교한 후 이전 가상돔과 새로운 가상돔이 동일한 노드인지 비교한다. 노드가 동일할 경우 변경되지않았다고 판단한 후 다음 노드로 이동한다.\\r\\n3. 노드 추가/제거 동일한 노드가 아닐 경우 해당 노드를 추가하거나 제거한다. 추가하는경우 새로운 노드를 생성하고 제거하는 경우 이전 노드를 제거한다.\\r\\n4. 속성 업데이트 노드가 동일하지만 속성이 변경된 경우 속성을 업데이트한다. 이전 속성과 새로운 속성 값을 비교하여 변경된 속성만 업데이트하고 변경되지 않은 속성은 그대로 유지한다.\\r\\n5. 자식 노드 순회 자식 노드가 있는 경우 이전 가상돔과 새로운 가상돔의 노드를 순회하며 Diffing 알고리즘을 재귀적으로 적용한다. 이 과정에서 변경된 부분이 있다면 해당 노드를 업데이트하고 변경되지 않은 부분은 그대로 유지한다.\\r\\n\\r\\n**Reconciliation 알고리즘**\\r\\n\\r\\nReconciliation 알고리즘은 Diffing 알고리즘으로 찾아낸 변경된 부분을 실제 돔에 반영하는 과정이다. 변경된 부분이 많은 경우에는 모든 변경사항을 적용하는 것이 아니라, 변경된 부분만 최소한의 작업으로 처리하여 성능을 향상시킨다.\\r\\n\\r\\n변경된 부분을 실제 돔에 적용하기 위해 변경된 노드를 다시 그려야 하는 경우와 기존 노드를 업데이트하는 경우로 나눌 수 있다. 기존 노드를 업데이트 하는 경우에는 변경된 속성값이나 자식 노드를 새로운 값으로 갱신한다.\\r\\n\\r\\n**Reconciliation 알고리즘의 구체적인 동작 방식은 아래와 같다.**\\r\\n\\r\\n1. 노드 추가/제거 Diffing 알고리즘에서 추가되거나 제거된 노드가 있다면, 해당 노드를 리얼돔에 추가하거나 제거한다. 추가되는 경우 리얼돔에 새로운 노드를 생성하고 제거되는 경우 해당 노드를 제거하고 새로운 위치에 새로운 노드를 생성한다.\\r\\n2. 노드이동 노드의 위치가 변경된 경우, 해당 노드를 새로운 위치에 추가한다. 이를 위해 리얼돔에서 해당 노드를 제거하고 새로운 위치에 새로운 노드를 생성한다\\r\\n3. 속성업데이트 Diffing 알고리즘에서 속성이 변경된 노드가 있다면 해당 노드의 속성을 업데이트한다. 이를 위해 리얼돔에서 해당 노드의 속성을 업데이트한다.\\r\\n4. 자식노드 순회 자식 노드가 있는 경우 이전 가상돔과 새로운 가상돔의 자식 노드를 순회하면서 Reconciliation 알고리즘을 재귀적으로 적용한다. 이 과정에서 변경된 부분이 있다면 해당 노드를 업데이트하고 변경되지 않은 부분은 그대로 유지한다.\\r\\n\\r\\n<hr/>\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\nDan Abramov와 Coinbase 개발자 Stefano J. Attardi가 메모이제이션을 두고 벌인 논쟁을 보면서, 내가 그동안 가지고 있던 생각들이 정리되는 느낌이었다.\\r\\n\\r\\nStefano의 주장을 보면 현실적인 면이 강하다. 대규모 팀에서 모든 개발자가 언제 메모이제이션을 써야 하는지 완벽하게 판단할 수 있을까? 사실 어렵다. 그래서 아예 모든 곳에 메모이제이션을 적용하자는 게 그의 접근법이다. 마스크 착용 의무화와 비슷한 논리인데, 개별 판단에 맡기는 것보다 일괄적으로 적용하는 게 더 안전하다는 것이다.\\r\\n\\r\\n실제로 메모이제이션을 깜빡하면 렌더 함수 호출, 콜백 재생성, JSX 할당 등이 연쇄적으로 발생하면서 자식 컴포넌트까지 영향을 미친다. 게다가 리액트가 이미 가상돔으로 이전 렌더 결과를 보관하고 있어서 메모리 오버헤드도 크지 않다는 점도 설득력이 있다.\\r\\n\\r\\n반면 Dan Abramov는 완전히 다른 철학을 가지고 있다. 메모이제이션은 근본적인 해결책이 아니라 최후의 수단이라는 입장이다. 컴포넌트 구조를 제대로 설계하면 메모이제이션 없이도 성능 문제가 해결된다고 본다.\\r\\n\\r\\n그가 제시한 방법들을 보면:\\r\\n- 상태를 필요한 최소 범위로 이동시키기 (Move State Down)\\r\\n- children prop을 활용해서 변경되지 않는 부분 분리하기 (Lift Content Up)\\r\\n\\r\\n이런 접근법들이 실제로 효과적이라는 건 경험해본 적이 있다.\\r\\n\\r\\n사실 나도 예전부터 \\"메모이제이션이 잘못 설계된 컴포넌트 구조를 땜질하는 용도가 아닐까?\\" 하는 의구심을 가져왔다. 이번 논쟁을 보면서 그 생각이 어느 정도 맞다는 확신이 들었다.\\r\\n\\r\\n특히 두 가지 상황에서 그런 느낌이 강하다:\\r\\n\\r\\n첫째, 상태 배치가 잘못된 경우다. 상태를 불필요하게 상위 컴포넌트에 두고 나서 메모이제이션으로 성능 문제를 해결하려고 하는 경우가 많다. 하지만 상태를 적절한 위치에 배치하면 애초에 문제가 발생하지 않는다.\\r\\n\\r\\n둘째, 컴포넌트 책임 분리가 제대로 되지 않은 경우다. 하나의 컴포넌트가 너무 많은 역할을 담당할 때 불필요한 리렌더링이 발생하는데, 이때도 메모이제이션보다는 단일 책임 원칙에 따라 컴포넌트를 분리하는 게 더 근본적인 해결책이다.\\r\\n\\r\\n그렇다고 해서 메모이제이션이 전혀 필요 없다는 건 아니다. 현실적으로 메모이제이션이 필요한 상황들이 분명 존재한다.\\r\\n\\r\\n레거시 코드베이스의 경우, 이미 복잡하게 얽힌 구조를 단번에 리팩터링하기는 현실적으로 어렵다. 이런 상황에서는 점진적인 개선 과정에서 메모이제이션이 부패 방지 계층 역할을 할 수 있다.\\r\\n\\r\\n또한 대규모 팀에서는 Stefano의 지적처럼 모든 개발자가 완벽한 구조 설계를 하기 어려운 것도 사실이다. 이럴 때는 메모이제이션을 안전장치로 활용하는 것도 하나의 방법이다.\\r\\n\\r\\n결국 내 생각은 메모이제이션 자체가 나쁜 도구는 아니지만, 사용하기 전에 \\"왜 이 컴포넌트에서 불필요한 리렌더링이 발생하는가?\\"라는 질문을 먼저 던져봐야 한다는 것이다. \\r\\n\\r\\nDan Abramov가 말한 것처럼 올바른 컴포넌트 구조는 단순히 성능 개선뿐만 아니라 데이터 플로우를 명확하게 만들고, props drilling을 줄이며, 전체적인 코드 품질을 향상시킨다. 이런 측면에서 구조적 개선이 우선되어야 한다고 본다.\\r\\n\\r\\n참고자료 \\r\\n- [Stefano J. Attardi : Why We Memo All the Things](https://attardi.org/why-we-memo-all-the-things/)\\r\\n- [Dan Abramov : Before You memo()](https://overreacted.io/before-you-memo/)\\r\\n- [Dan Abramov : ok let’s try this — AMA about React and i’ll try my best to answer. haven’t done these in a while](https://bsky.app/profile/danabra.mov/post/3khbvuwanqx2h)\\r\\n\\r\\n<hr/>\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\nContext는 상태관리 도구라기보다는 **컴포넌트의 관심사 범위를 제한해주는 격리 레이어**에 가깝다고 생각한다. Redux의 메인테이너인 Mark Erikson도 Context를 Dependency Injection Tool이라고 표현하는데, 이 관점이 훨씬 정확한 것 같다.\\r\\n\\r\\n실제로 진정한 상태관리 도구라면 4가지 요구사항을 만족해야 한다:\\r\\n1. 초기값 저장\\r\\n2. 현재값 읽기  \\r\\n3. 값 업데이트\\r\\n4. 변경 알림\\r\\n\\r\\n그런데 React Context는 이 중에서 값 업데이트 기능이 빠져있다. Context의 값을 바꾸려면 결국 외부 시스템(useState, useReducer 등)에 의존해야 한다.\\r\\n\\r\\n흥미로운 건 유명한 상태관리 라이브러리들을 보면 모두 Context를 의존성 주입 용도로 사용한다는 점이다:\\r\\n\\r\\n- Redux는 Store 인스턴스와 Subscription 객체를 Context로 전달한다\\r\\n- React Query는 QueryClient 객체를 Context로 넘긴다  \\r\\n- Apollo는 Client 객체를, MobX는 Observable 객체를 Context로 주입한다\\r\\n\\r\\n이들은 모두 Context를 통해 관찰 가능한 객체나 구독 가능한 컨테이너를 컴포넌트 트리에 주입시키고, 실제 상태관리는 각 라이브러리 자체에서 처리한다.\\r\\n\\r\\n이런 격리 레이어가 주는 핵심 가치는 무엇일까? \\r\\n\\r\\n우선 테스트가 훨씬 쉬워진다. 네트워크 요청을 모킹하지 않고도 간단하게 테스트할 수 있다:\\r\\n\\r\\n```js\\r\\ntest(\'loads products\', async () => {\\r\\n  const mockFactory = () => ({\\r\\n    async lookupAllProducts() {\\r\\n      return [{id: 1, title: \'Test Product\'}];\\r\\n    }\\r\\n  });\\r\\n  \\r\\n  render(\\r\\n    <DepsProvider productServicesFactory={mockFactory}>\\r\\n      <Products />\\r\\n    </DepsProvider>\\r\\n  );\\r\\n  \\r\\n  // 테스트 로직\\r\\n});\\r\\n```\\r\\n\\r\\n또한 관심사 분리가 자연스럽게 이뤄진다. Presentation layer는 렌더링과 사용자 상호작용에만 집중하고, Business layer는 복잡한 비즈니스 로직을 처리하며, Data layer는 HTTP나 GraphQL, 캐싱 같은 구현 세부사항을 숨길 수 있다.\\r\\n\\r\\n이걸 보면서 클린 아키텍처의 저자 Robert Cecil Martin이 한 말이 떠올랐다:\\r\\n\\r\\n> \\"패러다임은 개발자의 권한을 박탈한다\\"\\r\\n\\r\\n- 구조적 프로그래밍은 goto문 사용 권한을 박탈했고\\r\\n- 객체지향 프로그래밍은 함수 포인터의 직접 사용을 막았으며  \\r\\n- 함수형 프로그래밍은 할당문 사용을 제한했다\\r\\n\\r\\n이런 패러다임들은 모두 개발자가 할 수 있는 일을 제한함으로써 더 나은 소프트웨어를 만들도록 유도한다.\\r\\n\\r\\nContext도 마찬가지다. 개발자의 여러 권한을 박탈한다:\\r\\n\\r\\n1. 전역 모듈을 import해서 컴포넌트 내에서 직접 사용할 권한\\r\\n2. 데이터를 원하는 대로 props로 전달할 권한  \\r\\n3. Presentation 레이어와 Business 레이어를 한 곳에서 처리할 권한\\r\\n\\r\\n디자인 패턴도 비슷하다. 자유를 박탈해서 질서를 만든다:\\r\\n\\r\\n- Observer 패턴은 객체 간 직접 통신을 막고 중재자를 통해서만 소통하게 한다\\r\\n- Factory 패턴은 생성자 직접 호출을 금지하고 팩토리를 통해서만 객체를 만들게 한다\\r\\n- Dependency Injection은 의존성을 직접 생성하지 못하게 하고 외부에서 주입받도록 강제한다\\r\\n\\r\\n처음에는 이런 제약들이 불편해 보이지만, 결과적으로는 예측 가능한 코드 구조를 만들고, 테스트 용이성을 높이며, 유지보수성을 개선하고, 팀 협업 효율성을 증대시킨다.\\r\\n\\r\\nContext는 이런 문제들을 해결하기 위한 수단이라고 생각한다. 단순히 전역 상태 저장소로 보는 관점에서 벗어나서, **개발자의 자유를 의도적으로 제한함으로써 더 나은 소프트웨어 구조를 강제하는 아키텍처 도구**로 봐야 하지 않을까 싶다.\\r\\n\\r\\n참고자료 \\r\\n\\r\\n- [Mark Erikson : Why React Context is Not a State Management Tool](https://blog.isquaredsoftware.com/2021/01/context-redux-differences/)\\r\\n- [Tommy Groshong : React Context for dependency injection not state management](https://testdouble.com/insights/react-context-for-dependency-injection-not-state-management)\\r\\n- [Clean Architecture](https://product.kyobobook.co.kr/detail/S000001033082) ","created_at":"2025-07-20T11:15:02Z","updated_at":"2025-07-26T05:11:54Z","closed_at":null,"merged_at":null,"merge_commit_sha":"4f844db9cb309814d4d6a538a2811f69624b69f4","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/26/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/26/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/26/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/4ba8c06fe24de985296af1b065a285aa3473874e","head":{"label":"BBAK-jun:main","ref":"main","sha":"4ba8c06fe24de985296af1b065a285aa3473874e","user":{"login":"BBAK-jun","id":33216504,"node_id":"MDQ6VXNlcjMzMjE2NTA0","avatar_url":"https://avatars.githubusercontent.com/u/33216504?v=4","gravatar_id":"","url":"https://api.github.com/users/BBAK-jun","html_url":"https://github.com/BBAK-jun","followers_url":"https://api.github.com/users/BBAK-jun/followers","following_url":"https://api.github.com/users/BBAK-jun/following{/other_user}","gists_url":"https://api.github.com/users/BBAK-jun/gists{/gist_id}","starred_url":"https://api.github.com/users/BBAK-jun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BBAK-jun/subscriptions","organizations_url":"https://api.github.com/users/BBAK-jun/orgs","repos_url":"https://api.github.com/users/BBAK-jun/repos","events_url":"https://api.github.com/users/BBAK-jun/events{/privacy}","received_events_url":"https://api.github.com/users/BBAK-jun/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022904412,"node_id":"R_kgDOPPhIXA","name":"front_6th_chapter1-3","full_name":"BBAK-jun/front_6th_chapter1-3","private":false,"owner":{"login":"BBAK-jun","id":33216504,"node_id":"MDQ6VXNlcjMzMjE2NTA0","avatar_url":"https://avatars.githubusercontent.com/u/33216504?v=4","gravatar_id":"","url":"https://api.github.com/users/BBAK-jun","html_url":"https://github.com/BBAK-jun","followers_url":"https://api.github.com/users/BBAK-jun/followers","following_url":"https://api.github.com/users/BBAK-jun/following{/other_user}","gists_url":"https://api.github.com/users/BBAK-jun/gists{/gist_id}","starred_url":"https://api.github.com/users/BBAK-jun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BBAK-jun/subscriptions","organizations_url":"https://api.github.com/users/BBAK-jun/orgs","repos_url":"https://api.github.com/users/BBAK-jun/repos","events_url":"https://api.github.com/users/BBAK-jun/events{/privacy}","received_events_url":"https://api.github.com/users/BBAK-jun/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/BBAK-jun/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/BBAK-jun/front_6th_chapter1-3/deployments","created_at":"2025-07-20T05:14:53Z","updated_at":"2025-07-24T09:49:24Z","pushed_at":"2025-07-24T09:49:19Z","git_url":"git://github.com/BBAK-jun/front_6th_chapter1-3.git","ssh_url":"git@github.com:BBAK-jun/front_6th_chapter1-3.git","clone_url":"https://github.com/BBAK-jun/front_6th_chapter1-3.git","svn_url":"https://github.com/BBAK-jun/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":126,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/26"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/26"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/26"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/26/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/26/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/26/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/4ba8c06fe24de985296af1b065a285aa3473874e"}},"author_association":"FIRST_TIME_CONTRIBUTOR","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/27","id":2679845143,"node_id":"PR_kwDOPMCTuc6fuzEX","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/27","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/27.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/27.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/27","number":27,"state":"open","locked":false,"title":"[6팀 장희진] Chapter 1-3. React, Beyond the Basics","user":{"login":"JHeeJinDev","id":106803730,"node_id":"U_kgDOBl2yEg","avatar_url":"https://avatars.githubusercontent.com/u/106803730?v=4","gravatar_id":"","url":"https://api.github.com/users/JHeeJinDev","html_url":"https://github.com/JHeeJinDev","followers_url":"https://api.github.com/users/JHeeJinDev/followers","following_url":"https://api.github.com/users/JHeeJinDev/following{/other_user}","gists_url":"https://api.github.com/users/JHeeJinDev/gists{/gist_id}","starred_url":"https://api.github.com/users/JHeeJinDev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JHeeJinDev/subscriptions","organizations_url":"https://api.github.com/users/JHeeJinDev/orgs","repos_url":"https://api.github.com/users/JHeeJinDev/repos","events_url":"https://api.github.com/users/JHeeJinDev/events{/privacy}","received_events_url":"https://api.github.com/users/JHeeJinDev/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://jheejindev.github.io/front_6th_chapter1-3/\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n- 이번 과제를 통해 useMemo, useCallback, shallowEquals,deepEquals 등 React 내부 훅들의 작동 원리를 이해하고, 이를 직접 구현해보는 경험을 했습니다.\\r\\n- Context 기반 전역 상태에서 불필요한 리렌더링 문제를 인지하고, 이를 memo, useMemo, useCallback으로 해결하며 최적화 방향에 대해 실질적인 개선 경험을 쌓았습니다.\\r\\n-  또한 얕은 비교(shallow compare), 깊은 비교(deep compare)의 차이를 체감하고, 상태 변경에 따른 리렌더링 여부를 제어하는 데 직접 활용했습니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n이번 과제에서는 자랑할 만한 코드는 없지만, 앞으로 더 열심히 개선하고 발전해나가겠습니다!\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\nContext로 전역 상태 관리를 해보고 나니 렌더링 최적화에 관심이 생겼습니다.\\r\\n기존에는 Context를 사용해 Toast 상태를 관리했으나, Provider 아래 모든 컴포넌트가 상태 변경 시 불필요하게 리렌더링되는 단점이 있었습니다.\\r\\n새 브랜치에서 createStore를 활용해 전역 상태를 구현하고, 필요한 컴포넌트만 구독하도록 하여 불필요한 리렌더링을 줄이는 작업을 시험 삼아 진행해 보았습니다.\\r\\n\\r\\n**전역 토스트 상태를 위한 커스텀 스토어와 리듀서 정의**\\r\\n```jsx\\r\\n// Toast 상태 타입 정의\\r\\nexport interface ToastState {\\r\\n  type: \\"success\\" | \\"error\\" | \\"warning\\" | \\"info\\";\\r\\n  visible: boolean;\\r\\n  message: string;\\r\\n}\\r\\n\\r\\n// 액션 타입 정의\\r\\nexport const TOAST_ACTIONS = {\\r\\n  SHOW_TOAST: \\"toast/show\\",\\r\\n  HIDE_TOAST: \\"toast/hide\\",\\r\\n} as const;\\r\\n\\r\\n// 초기 상태\\r\\nconst initialState: ToastState = {\\r\\n  type: \\"info\\",\\r\\n  visible: false,\\r\\n  message: \\"\\",\\r\\n};\\r\\n\\r\\n// 상태 변경 로직 정의 (reducer 방식)\\r\\nconst toastReducer = (state: typeof initialState, action: any) => {\\r\\n  switch (action.type) {\\r\\n    case TOAST_ACTIONS.SHOW_TOAST:\\r\\n      return {\\r\\n        ...state,\\r\\n        visible: true,\\r\\n        message: action.payload.message,\\r\\n        type: action.payload.type || \\"info\\",\\r\\n      };\\r\\n    case TOAST_ACTIONS.HIDE_TOAST:\\r\\n      return {\\r\\n        ...state,\\r\\n        visible: false,\\r\\n        message: \\"\\",\\r\\n        type: action.payload?.type || \\"info\\",\\r\\n      };\\r\\n    default:\\r\\n      return state;\\r\\n  }\\r\\n};\\r\\n\\r\\n// 전역 상태 store 생성 \\r\\nconst toastStore = createStore(toastReducer, initialState);\\r\\n\\r\\nexport default toastStore;\\r\\n```\\r\\n\\r\\n**토스트 상태를 구독하고 표시/숨김 기능을 제공하는 커스텀 훅**\\r\\n```jsx\\r\\nimport { useRef } from \\"react\\";\\r\\nimport toastStore, { TOAST_ACTIONS } from \\"../stores/toast\\";\\r\\nimport { useStore } from \\"@hanghae-plus/lib\\";\\r\\nimport type { ToastState } from \\"../stores/toast\\";\\r\\n\\r\\n// 토스트 상태 구독 훅 (type, message, visible만 추려서 반환)\\r\\nexport const useToastState = () => {\\r\\n  return useStore(toastStore, (state) => ({\\r\\n    type: state.type,\\r\\n    message: state.message,\\r\\n    visible: state.visible,\\r\\n  }));\\r\\n};\\r\\n\\r\\n// 토스트 표시 및 숨김 제어 훅\\r\\nexport const useToast = () => {\\r\\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null); // 자동 숨김을 위한 타이머 ref\\r\\n\\r\\n  // 토스트 표시 함수\\r\\n  function show({ type, message }: { type: ToastState[\\"type\\"]; message: string }) {\\r\\n    toastStore.dispatch({ type: TOAST_ACTIONS.SHOW_TOAST, payload: { type, message } });\\r\\n\\r\\n    // 기존 타이머 초기화\\r\\n    if (timeoutRef.current) {\\r\\n      clearTimeout(timeoutRef.current);\\r\\n    }\\r\\n\\r\\n    // 3초 후 자동 숨김\\r\\n    timeoutRef.current = setTimeout(() => {\\r\\n      toastStore.dispatch({ type: TOAST_ACTIONS.HIDE_TOAST });\\r\\n      timeoutRef.current = null;\\r\\n    }, 3000);\\r\\n  }\\r\\n\\r\\n  // 수동으로 토스트 숨김\\r\\n  function hide() {\\r\\n    if (timeoutRef.current) {\\r\\n      clearTimeout(timeoutRef.current);\\r\\n      timeoutRef.current = null;\\r\\n    }\\r\\n    toastStore.dispatch({ type: \\"HIDE_TOAST\\" });\\r\\n  }\\r\\n\\r\\n  return {\\r\\n    show,\\r\\n    hide,\\r\\n  };\\r\\n};\\r\\n```\\r\\n\\r\\n이번 리팩토링의 결과, `ToastProvider` 하위에서 발생하던 불필요한 리렌더링이 줄어들었고, Toast와 무관한 영역에서의 성능 개선 가능성을 확인했습니다. 다만, Profiler 상에서 여전히 `ProductList` 컴포넌트의 리렌더링이 감지되었으며, 이는 Context 외부의 리렌더링 트리거로 인한 것으로 추정됩니다 (`HomePage`나 `PageWrapper` 등의 상태 변화). 향후에는 이 부분도 추가적인 `memo` 처리나 상태 분리를 통해 개선해야 할 것 같습니다!\\r\\n\\r\\n<img width=\\"832\\" height=\\"141\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/4c0e443c-8133-420c-b7e7-9ef7edec9edf\\" />\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n- 사실 기존에는 기존에는 해당 훅들의 핵심 개념과 사용 목적 정도만 알고 있었고, 단순히 \\"언제 써야 하는지\\" 정도에만 집중했으며useMemo나 useCallback을 언제 사용해야 할지 고민이 생기면, 큰 생각 없이 일단 사용하는 경우가 많았습니다. 하지만 이번 과제를 통해 이러한 막연한 최적화 시도는 오히려 성능에 부정적인 영향을 줄 수 있음을 깨달았습니다.\\r\\n \\r\\n- React 공식 문서에서도 useCallback과 useMemo는 **특정 경우에만 의미 있는 최적화 도구**라고 강조합니다.\\r\\nuseCallback은 memoized 컴포넌트에 함수를 prop으로 전달하거나, 다른 Hook의 의존성으로 사용될 때만 유의미합니다.\\r\\nuseMemo 또한 계산 비용이 큰 값, memoized 컴포넌트에 넘기는 값, Hook의 의존성으로 사용하는 값에만 효과적입니다.\\r\\n이러한 기준을 명확히 이해하고 나니, 불필요한 최적화 대신 진짜 필요한 곳에만 useMemo와 useCallback을 적용할 수 있게 되었고, 내부 로직을 코드로 구현하면서 리렌더링의 원인과 이를 방지하는 메커니즘까지 이해할 수 있었습니다.\\r\\n \\r\\n- 상태 변경이 바로 리렌더링으로 이어지지 않도록, 메모리제이션과 비교 로직을 적절히 조합하는 것이 리액트 성능 최적화의 핵심이라고 생각합니다.\\r\\n특히 Context 기반으로 상태를 관리하면서는 useMemo나 useCallback만으로는 해결되지 않는 리렌더링 문제를 직접 경험했습니다.\\r\\n그 과정에서 불필요한 구독은 분리하고, 꼭 필요한 부분만 구독하도록 설계하는 것이 얼마나 중요한지 체감할 수 있었습니다.\\r\\n단순히 코드가 동작하는 데서 그치는 것이 아니라, “왜 이게 리렌더링되지?”라는 시선으로 코드를 바라보는 습관을 가지게 되었습니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n- React의 렌더링 최적화(메모이제이션, 얕은/깊은 비교, 커스텀 훅 등)를 직접 구현하며 원리를 깊이 이해할 수 있게 한 점이 좋았습니다.\\r\\n\\r\\n- 기능 구현이 필요한 파트에서는 정확하게 요구사항을 만족시키는 로직을 고민하게 만들었고, 반대의 경우는 \\"왜 이렇게 동작하는가?\\", \\"이 상황에서는 어떻게 더 나은 구조를 설계할 수 있을까?\\" 같은 질문을 스스로 할 수 있게 한점이 좋았습니다. 과제를 진행하면서 단순히 개념만 알고 사용하는 데서 그치지 않고, 왜 이렇게 되고, 그럼 어떻게 해야 할까? 라는 질문을 반복하며 스스로 사고의 깊이를 확장할 수 있었던 점이 이번 과제에서 얻은 가장 큰 배움이었습니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n1. 초기 렌더링 (Initial Rendering)\\r\\n\\r\\n- ReactDOM.createRoot(...).render(<App />)로 루트 컴포넌트를 마운트합니다.\\r\\n- App 및 하위 컴포넌트들을 재귀적으로 호출해 React Element 트리(가상 DOM) 생성합니다.\\r\\n- React가 가상 DOM을 바탕으로 실제 DOM을 만들어 브라우저에 삽입합니다.\\r\\n- 비교(Reconciliation) 과정 없이 그대로 DOM 생성합니다.\\r\\n\\r\\n2.  업데이트 렌더링 (Re-rendering)\\r\\n\\r\\n- setState, useState, useReducer, props 변경 등으로 상태 변화 발생합니다.\\r\\n- 해당 컴포넌트와 자식 컴포넌트들이 다시 렌더링됨니다. (함수형 컴포넌트는 함수 전체가 재실행)\\r\\n- React가 변경 전/후 가상 DOM을 비교(diff)하여 차이(reconciliation) 계산합니다.\\r\\n- 실제로 바뀐 부분만 실제 DOM에 반영합니다.(DOM diff + patch)\\r\\n\\r\\nReconciliation(리컨실리에이션)이란?\\r\\n\\r\\n- 리액트에서 Reconciliation은 \\"이전 가상 DOM과 새 가상 DOM을 비교해서 실제로 바뀐 부분만 찾아내는 과정\\"을 의미합니다.\\r\\n- 컴포넌트의 상태(state)나 props가 변경되면, 리액트는 전체 UI를 다시 렌더링하는 대신 \\r\\n\\r\\n  -  변경 전 가상 DOM과 변경 후 가상 DOM을 빠르게 비교(diff)합니다.\\r\\n  -  바뀐 부분만 실제 DOM에 최소한으로 반영(patch)합니다.\\r\\n\\r\\n- Reconciliation의 핵심은 \\"최소한의 DOM 변경\\"과 \\"빠른 비교 알고리즘(주로 key, 타입, props 등)\\"입니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n메모이제이션은 불필요한 계산이나 함수 재생성을 막아 렌더링 성능을 개선하는 기법이라는 것은 알지만, 실제로 언제, 어디에 적용해야 하는지 명확히 판단하기가 쉽지 않았습니다. 특히, 무분별하게 메모이제이션을 남발하면 오히려 성능에 악영향을 줄 수 있다는 점에서 신중함이 필요하다는 것을 깨달았습니다.\\r\\n\\r\\n- 의존성 배열 관리의 중요성\\r\\n useMemo와 useCallback의 의존성 배열을 정확히 관리하지 않으면 원하는 시점에 값이 갱신되지 않거나, 반대로 불필요하게 다시 계산 되어 효과가 없을 수 있습니다. 그래서 항상 의존성 배열을 꼼꼼히 점검하고, 필요한 값들을 빠뜨리지 않아야 합니다.\\r\\n\\r\\n- 컴포넌트 리렌더링과 메모이제이션의 관계\\r\\n 메모이제이션을 쓰더라도 컴포넌트가 자주 리렌더링되면 무용지물일 수 있다는 점도 깨달았습니다. 그래서 상태 관리 방법을 함께 고민하   며, 메모이제이션은 성능 최적화의 한 부분일 뿐 전체 구조를 함께 고려해야 한다는 점을 배워야 한다고 생각합니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n- 저는 처음에는 Context가 상태를 저장하고 관리하는 역할이라고 오해했습니다.\\r\\n하지만 학습을 통해 Context는 상태 자체를 관리하는 것이 아니라, useState, useReducer, 혹은 상태 관리 라이브러리에서 정의한 상태를 여러 컴포넌트에 전달해주는 역할이라는 것을 이해하게 되었습니다. 이러한 점에서 Context는 \\"상태 관리\\"보다는 \\"상태 전달\\"이라는 표현이 더 적절하다고 느꼈습니다.\\r\\n\\r\\n- Context API는 상태가 변경될 경우, 해당 Context의 Provider 내부에 있는 모든 하위 컴포넌트가 리렌더링된다는 특성이 있습니다. 이로 인해 성능 최적화가 어려워질 수 있으며, 특히 상태 변경이 빈번하거나 규모가 큰 애플리케이션에서는 리렌더링으로 인한 성능 저하가 발생할 수 있습니다.\\r\\n\\r\\n- 반면, 상태 관리 라이브러리는 상태의 부분 구독, 비동기 처리, 미들웨어 적용 등 다양한 고급 기능을 제공하며, 복잡한 상태 로직을 더 체계적으로 분리하고 관리할 수 있도록 돕습니다.\\r\\n따라서 규모가 큰 프로젝트나 여러 개발자가 협업하는 환경에서는 Context API보다는 전용 상태 관리 라이브러리를 사용하는 것이 성능과 유지보수 측면에서 더 적합하다고 판단하게 되었습니다.\\r\\n\\r\\n\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n- Context 대신 createStore를 사용해 전역 상태를 분리했는데, 기존 Context 기반 상태 관리에서 발생하던 불필요한 리렌더링 문제를 효과적으로 줄일 수 있었습니다. 다만, createStore의 구독 범위를 어떻게 최적화해야 하는지, 상태 접근 시 필요한 최소한의 구독만 유지하는 좋은 패턴이 무엇인지 아직 명확하지 않습니다. 이와 관련해 권장하는 설계 방식에 대해 조언 받고 싶습니다.\\r\\n\\r\\n- 저는 지금까지 React 프로젝트에서 Context보다는 주로 Zustand 같은 전역 상태 관리 라이브러리를 활용해 왔습니다. 실무에서도 큰 문제 없이 상태 관리가 잘 되었고, 성능 이슈도 거의 경험하지 못해 Context에 대해서는 상대적으로 크게 신경 쓰지 않았던 것 같습니다.\\r\\n이번에 Context에 대해서도 배우고 이해했지만, 앞으로도 단순한 전역 상태에서도 Zustand 같은 상태 관리 라이브러리를 사용해도 크게 문제가 없을 것 같다는 생각이 듭니다.\\r\\n코치님께서는 실무에서 꼭 Context를 사용해야 했던 특별한 상황이나 이유가 있으셨는지 궁금합니다.\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-20T11:24:31Z","updated_at":"2025-07-26T05:16:50Z","closed_at":null,"merged_at":null,"merge_commit_sha":"651e3844cf23426fae14415aaf1442274b538d68","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/27/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/27/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/27/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/7f71889cc1466499b99d8f77e36f8a3af7080255","head":{"label":"JHeeJinDev:main","ref":"main","sha":"7f71889cc1466499b99d8f77e36f8a3af7080255","user":{"login":"JHeeJinDev","id":106803730,"node_id":"U_kgDOBl2yEg","avatar_url":"https://avatars.githubusercontent.com/u/106803730?v=4","gravatar_id":"","url":"https://api.github.com/users/JHeeJinDev","html_url":"https://github.com/JHeeJinDev","followers_url":"https://api.github.com/users/JHeeJinDev/followers","following_url":"https://api.github.com/users/JHeeJinDev/following{/other_user}","gists_url":"https://api.github.com/users/JHeeJinDev/gists{/gist_id}","starred_url":"https://api.github.com/users/JHeeJinDev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JHeeJinDev/subscriptions","organizations_url":"https://api.github.com/users/JHeeJinDev/orgs","repos_url":"https://api.github.com/users/JHeeJinDev/repos","events_url":"https://api.github.com/users/JHeeJinDev/events{/privacy}","received_events_url":"https://api.github.com/users/JHeeJinDev/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023025555,"node_id":"R_kgDOPPohkw","name":"front_6th_chapter1-3","full_name":"JHeeJinDev/front_6th_chapter1-3","private":false,"owner":{"login":"JHeeJinDev","id":106803730,"node_id":"U_kgDOBl2yEg","avatar_url":"https://avatars.githubusercontent.com/u/106803730?v=4","gravatar_id":"","url":"https://api.github.com/users/JHeeJinDev","html_url":"https://github.com/JHeeJinDev","followers_url":"https://api.github.com/users/JHeeJinDev/followers","following_url":"https://api.github.com/users/JHeeJinDev/following{/other_user}","gists_url":"https://api.github.com/users/JHeeJinDev/gists{/gist_id}","starred_url":"https://api.github.com/users/JHeeJinDev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JHeeJinDev/subscriptions","organizations_url":"https://api.github.com/users/JHeeJinDev/orgs","repos_url":"https://api.github.com/users/JHeeJinDev/repos","events_url":"https://api.github.com/users/JHeeJinDev/events{/privacy}","received_events_url":"https://api.github.com/users/JHeeJinDev/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/JHeeJinDev/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/JHeeJinDev/front_6th_chapter1-3/deployments","created_at":"2025-07-20T11:17:49Z","updated_at":"2025-07-24T05:48:30Z","pushed_at":"2025-07-24T05:48:26Z","git_url":"git://github.com/JHeeJinDev/front_6th_chapter1-3.git","ssh_url":"git@github.com:JHeeJinDev/front_6th_chapter1-3.git","clone_url":"https://github.com/JHeeJinDev/front_6th_chapter1-3.git","svn_url":"https://github.com/JHeeJinDev/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":304,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/27"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/27"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/27"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/27/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/27/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/27/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/7f71889cc1466499b99d8f77e36f8a3af7080255"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/28","id":2679856910,"node_id":"PR_kwDOPMCTuc6fu18O","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/28","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/28.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/28.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/28","number":28,"state":"open","locked":false,"title":"[1팀 신희원] Chapter 1-3. React, Beyond the Basics","user":{"login":"Amelia-Shin","id":80433754,"node_id":"MDQ6VXNlcjgwNDMzNzU0","avatar_url":"https://avatars.githubusercontent.com/u/80433754?v=4","gravatar_id":"","url":"https://api.github.com/users/Amelia-Shin","html_url":"https://github.com/Amelia-Shin","followers_url":"https://api.github.com/users/Amelia-Shin/followers","following_url":"https://api.github.com/users/Amelia-Shin/following{/other_user}","gists_url":"https://api.github.com/users/Amelia-Shin/gists{/gist_id}","starred_url":"https://api.github.com/users/Amelia-Shin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Amelia-Shin/subscriptions","organizations_url":"https://api.github.com/users/Amelia-Shin/orgs","repos_url":"https://api.github.com/users/Amelia-Shin/repos","events_url":"https://api.github.com/users/Amelia-Shin/events{/privacy}","received_events_url":"https://api.github.com/users/Amelia-Shin/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://amelia-shin.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n이번 과제에서는 2주차 과제를 진행하면서 `이지훈`님이 AI를 어떻게 사용하면 좋을지 추천해주신 방법으로 진행해보았다. \\r\\n(지훈님 덕분에 AI를 더 잘 활용할 수 있게 된?거같다. 감사합니다.)\\r\\n2주차 과제까지 나는 AI에게 `~~짜줘.` 형식으로 질문하여 코드를 복붙했었다.\\r\\n3주차 과제부터는 AI에게 ~~를 진행하려고 하는데, 필요한 개념이 무엇인지 알려줘. 형식으로 질문하여 개념 공부를 진행했다.\\r\\n물론, e2e과제를 진행할때는 너무 막막해서 어떻게 해야하지??? AI한테 정답을 알려줘. 할뻔했지만~\\r\\nAI를 사용하지 않고, 지훈님에게 도움을 요청했다. \\r\\n문제를 해결하기 위해 현재 코드에서 무슨 문제점이 있는지 알려주시고, 수정이 필요한 내용을 말해주셔서 수정해나갔다.\\r\\n혼자 진행하다가 에러가 나길래...다른 분 PR도 참고해보고 ^^..\\r\\n\\r\\n아, 그리고 memo , usecallback 개념 알려주신 `정유열`님 감사합니다. HOC 알려주신 `박지수` 학메님 감사합니다.\\r\\n\\r\\n아직 리액트에 대해 개념이 부족한 나는 다른 분들에게 질문하면서 배워나간다.\\r\\n이번 주차는 AI를 좀 더 잘 활용할 수 있었던 거 같고, 무작정 다른 분의 PR을 보며 베끼지 않고 스스로 해보면서 다른분들은 어떻게 했나 참고용으로 사용할 수 있었던 것 같다. \\r\\n*** 주의 : 과제 통과는 했지만 다시 코드를 보면서 공부 및 이해가 필요한 거 같다. 차근차근 함수 및 훅이 언제/왜 쓰이는지 공부해보자. ***\\r\\n\\r\\n앞으로 남은 과제를 진행하면서 더 배우면서 나아갈 수 있을 거 같아 자신감이 붙는다!!!!\\r\\n물론 개념 공부할꺼 짱 많음;;; 블로그도 열심히 쓰면서 개념정리도 해봐야지.\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n[useSyncExternalStore](https://velog.io/@hee0ne_2/React.js-useSyncExternalStore) 학습\\r\\n\\r\\nuseAutoCallback 에서 의존성 없이 최신값을 업데이트를 해줄 때 왜 args(파라미터)를 넣어줄까 생각했습니다. (없어도 기본/심화 통과)\\r\\n\\r\\ne2e 테스트 코드에서 실패하여 디버깅해서 확인해보니 장바구니를 담을 때 인자들이 들어가지 않았습니다. 그래서 데이터 값들을 넣어주기 위해 args를 사용했구나 하면서 깨달았습니다.\\r\\nuseAutoCallback.ts\\r\\n```tsx\\r\\nimport type { AnyFunction } from \\"../types\\";\\r\\nimport { useCallback } from \\"./useCallback\\";\\r\\nimport { useRef } from \\"./useRef\\";\\r\\n\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  const ref = useRef<T>(fn);\\r\\n\\r\\n  // 이후 렌더마다 최신값으로 업데이트\\r\\n  ref.current = fn; \\r\\n\\r\\n  return useCallback(((...args: Parameters<T>): ReturnType<T> => ref.current(...args)) as T, []);\\r\\n}\\r\\n```\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\nReact Hook에 대해서 어떻게 동작하는지 deepdive를 할 수 있어 좋았습니다.\\r\\n\\r\\n### 과제 피드백\\r\\n리액트 훅에 대해 구현하기 위해서 과제에 가이드라인이 있어서 좋았습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n#### 렌더링 과정\\r\\n리액트는 상태(state)나 props가 변경되면 컴포넌트를 리렌더링한다.\\r\\n내부적으로는 Virtual DOM을 새로 만들고, 이전 Virtual DOM과 비교(diffing)해 변경된 부분만 실제 DOM에 반영한다.\\r\\n\\r\\n#### 렌더링 최적화 방법\\r\\n- React.memo: 상태가 자주 바뀌는 상위 컴포넌트로 인해 자식 컴포넌트가 매번 리렌더링되던 문제를 memo로 막을 수 있다.\\r\\n- useCallback: 자식에게 함수를 props로 넘길 때, 매번 새로 생성되어 리렌더링이 발생했던 걸 막기 위해 사용.  > 의존성 배열을 제대로 관리하는 게 핵심이었다.\\r\\n- useMemo: 무거운 연산을 메모이제이션하거나, props로 객체를 넘기는 경우 참조 값이 계속 바뀌지 않도록 유지할 때 효과적이다.\\r\\n\\r\\n#### 렌더링 관련 주요 개념\\r\\nVirtual DOM: 실제 DOM보다 가볍게 구성된 JS 객체. 변경사항을 빠르게 계산 가능.\\r\\nReconciliation: 변경 전후의 Virtual DOM을 비교하여 최소 DOM 변경만 적용.\\r\\nBatched Updates: 여러 상태 업데이트를 하나로 묶어 렌더링 최적화.\\r\\n\\r\\n#### 렌더링 관련 라이프사이클\\r\\n클래스 컴포넌트: shouldComponentUpdate, componentDidUpdate 등으로 렌더링 제어 가능.\\r\\n함수형 컴포넌트: useEffect는 렌더링 이후 실행되므로, 렌더링 전에 조건 분기 필요.\\r\\n\\r\\n#### 렌더링에 도움 되는 주요 Hooks\\r\\nuseMemo | 무거운 연산 결과를 캐싱하여 재계산 방지\\r\\nuseCallback | 콜백 함수의 참조 유지 (props 최적화)\\r\\nuseRef | 렌더링과 관계없는 값 유지 및 이전값 비교\\r\\nuseSyncExternalStore | 외부 상태 구독 시 렌더링 타이밍 제어\\r\\n\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n메모이제이션의 장점은 값이 바뀌었는지 확인하여 불필요한 렌더링을 줄일 수 있는 거 같습니다.\\r\\n단점으로는 의존성에 어떤 값이 들어가냐에 따라 성능 최적이 될지 아닐지 갈릴 수 있을거같습니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n아직 컨텍스트 개념을 잘 모르겠습니다... 컨텍스트와 상태관리에 대해 더 알아가봐야할 것 같습니다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\nQ1. useCallback , useAutoCallback 은 각각 어떤 때에 쓰는게 좋은가요? (의존성 없이 항상 최신 값을 사용하여 콜백 함수를 반환하는데,  실제 어디서 활용되는지 궁금하기도 합니다.)\\r\\nQ2. 메모이제이션을 성능 이슈를 위해 사용할 때, 적절한 사용 방법같은게 있을까요? 메모이제이션을 정말로 필요할 때만 적절하게 사용해야 할 거같은데, 무조건 사용을 한다면 좋지 않을 것 같아서 질문드립니다.","created_at":"2025-07-20T11:48:06Z","updated_at":"2025-07-26T05:22:50Z","closed_at":null,"merged_at":null,"merge_commit_sha":"02eb404e6cea67aa4bc151db8f1ad9f5ce6eb184","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/28/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/28/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/28/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/efd191d16de543cacbfcee8fe4ffbec4fe2bf86d","head":{"label":"Amelia-Shin:main","ref":"main","sha":"efd191d16de543cacbfcee8fe4ffbec4fe2bf86d","user":{"login":"Amelia-Shin","id":80433754,"node_id":"MDQ6VXNlcjgwNDMzNzU0","avatar_url":"https://avatars.githubusercontent.com/u/80433754?v=4","gravatar_id":"","url":"https://api.github.com/users/Amelia-Shin","html_url":"https://github.com/Amelia-Shin","followers_url":"https://api.github.com/users/Amelia-Shin/followers","following_url":"https://api.github.com/users/Amelia-Shin/following{/other_user}","gists_url":"https://api.github.com/users/Amelia-Shin/gists{/gist_id}","starred_url":"https://api.github.com/users/Amelia-Shin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Amelia-Shin/subscriptions","organizations_url":"https://api.github.com/users/Amelia-Shin/orgs","repos_url":"https://api.github.com/users/Amelia-Shin/repos","events_url":"https://api.github.com/users/Amelia-Shin/events{/privacy}","received_events_url":"https://api.github.com/users/Amelia-Shin/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022899514,"node_id":"R_kgDOPPg1Og","name":"front_6th_chapter1-3","full_name":"Amelia-Shin/front_6th_chapter1-3","private":false,"owner":{"login":"Amelia-Shin","id":80433754,"node_id":"MDQ6VXNlcjgwNDMzNzU0","avatar_url":"https://avatars.githubusercontent.com/u/80433754?v=4","gravatar_id":"","url":"https://api.github.com/users/Amelia-Shin","html_url":"https://github.com/Amelia-Shin","followers_url":"https://api.github.com/users/Amelia-Shin/followers","following_url":"https://api.github.com/users/Amelia-Shin/following{/other_user}","gists_url":"https://api.github.com/users/Amelia-Shin/gists{/gist_id}","starred_url":"https://api.github.com/users/Amelia-Shin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Amelia-Shin/subscriptions","organizations_url":"https://api.github.com/users/Amelia-Shin/orgs","repos_url":"https://api.github.com/users/Amelia-Shin/repos","events_url":"https://api.github.com/users/Amelia-Shin/events{/privacy}","received_events_url":"https://api.github.com/users/Amelia-Shin/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/Amelia-Shin/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/Amelia-Shin/front_6th_chapter1-3/deployments","created_at":"2025-07-20T04:56:22Z","updated_at":"2025-07-22T18:20:44Z","pushed_at":"2025-07-23T13:48:59Z","git_url":"git://github.com/Amelia-Shin/front_6th_chapter1-3.git","ssh_url":"git@github.com:Amelia-Shin/front_6th_chapter1-3.git","clone_url":"https://github.com/Amelia-Shin/front_6th_chapter1-3.git","svn_url":"https://github.com/Amelia-Shin/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":297,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/28"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/28"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/28"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/28/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/28/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/28/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/efd191d16de543cacbfcee8fe4ffbec4fe2bf86d"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/29","id":2679951075,"node_id":"PR_kwDOPMCTuc6fvM7j","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/29","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/29.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/29.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/29","number":29,"state":"open","locked":false,"title":"[3팀 여진석] Chapter 1-3. 프레임워크 없이 SPA 만들기","user":{"login":"realstone2","id":79455437,"node_id":"MDQ6VXNlcjc5NDU1NDM3","avatar_url":"https://avatars.githubusercontent.com/u/79455437?v=4","gravatar_id":"","url":"https://api.github.com/users/realstone2","html_url":"https://github.com/realstone2","followers_url":"https://api.github.com/users/realstone2/followers","following_url":"https://api.github.com/users/realstone2/following{/other_user}","gists_url":"https://api.github.com/users/realstone2/gists{/gist_id}","starred_url":"https://api.github.com/users/realstone2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/realstone2/subscriptions","organizations_url":"https://api.github.com/users/realstone2/orgs","repos_url":"https://api.github.com/users/realstone2/repos","events_url":"https://api.github.com/users/realstone2/events{/privacy}","received_events_url":"https://api.github.com/users/realstone2/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"# React 렌더링 최적화 과제 PR\\r\\n\\r\\n## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://realstone2.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n#### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n이번 과제는 스스로 어느정도 이해하고 있는 파트여서 어렵지 않았다고 느꼈다.\\r\\n그래서 그 안에서 세부 키워드들의 지식을 다듬고 정리해서 글을 잘 작성해보자라는 목표를 갖고 과제를 시작했다.\\r\\n\\r\\nuseSyncExternalStore과 context 등의 과제가 나왔을 때 환호했다.\\r\\n\\r\\n늘 정리하고 싶었던 머리속 내용이 있었고, 해당 개념을 글도 작성해보고 스스로 정리할 수 있는 기회라고 느꼈다.\\r\\n\\r\\n하지만 머리속에 있는 내용을 정리해서 글을 작성하는건 쉬운일이 아니었고,\\r\\n내가 알고있는 개념에다가 살이 붙기 시작하면서 간단하게 작성하려고 했던 내용이 거대한 내용이 되기도 했다.\\r\\n\\r\\n그러다보니 내가 원하는 만큼의 회고를 전부 작성하지 못해서 아쉽다.\\r\\n\\r\\n과제를 끝낼때마다 항상 아쉽다. 더 잘할 수 있을거같은데...\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\nuseSyncExternalStore 기반의 상태관리 라이브러리와 useEffect 기반의 상태관리 라이브러리들의 트레이드오프 부분을 이해하고 사용할 수 있게 되었습니다.\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\nPR을 자랑하고 싶습니다..\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n이번엔 어느정도 정답이 정해져있던 코드인 것 같아서, 주제에 대한 생각을 pr에 담아놨습니다!\\r\\n제가 알고 있는 내용들이 올바르게 알고있는게 맞는지 점검 받고 싶습니다.\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n리액트가 외부 스토어와 연결될 때 발생하는 문제들과 여러 외부 스토어들이 선택한 각각의 트레이드 오프에 대해서 명확히 이해할 수 있게 되었습니다.\\r\\n\\r\\n리액트 Fiber에 대해서는 추가학습이 더 필요할 것 같다고 생각합니다.\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n이번 과제는 과제 자체는 비교적 간단한 내용이었다고 생각합니다.\\r\\n그치만 PR에서 정리하는 내용 자체가 스스로의 깊게 생각해볼 수 있는 시간이었고, 팀원들과 피드백도 받으며 얘기해볼 수 있는 과정이라 좋았던 것 같습니다.\\r\\n\\r\\n## 심화 학습 고찰\\r\\n\\r\\n### useSyncExternalStore 고찰\\r\\n\\r\\n이번에 외부 스토어를 직접 구현해보면서 useSyncExternalStore를 사용해보았다.\\r\\nuseSyncExternalStore 자체는 아주 간단하고 가벼운 내용이지만 왜 등장했는지부터, 어떤 문제를 해결하고자 했는지를 어떤 부작용이 있는지 깊게 학습해볼 수 있었다.\\r\\n\\r\\n#### 왜 등장했는지\\r\\n\\r\\nreact 18의 동시성 기능(Suspense, startTransition, streaming SSR)이 도입되면서, 렌더링 중에 일시 중지 하고 나중에 이어서 렌더링하는 기능이 생겨났다.\\r\\n\\r\\n하지만 이 때 외부 상태관리와 함께 사용하면 tearing라고 말하는 렌더링 상태 불일치가 발생한다.\\r\\n\\r\\n```\\r\\n// 컴포넌트 A와 B가 같은 외부 store를 읽음\\r\\n// React가 A만 먼저 렌더하다가 중간에 멈춤(yield)\\r\\n// 그 사이 외부 store 값이 변경됨\\r\\n// B는 최신값으로 렌더되지만 A는 이전값 → 불일치 발생\\r\\n```\\r\\n\\r\\n이 문제를 해결하기 위해 useSyncExternalStore 가 도입되었다.\\r\\n\\r\\n#### 문제\\r\\n\\r\\ntearing문제는 해결되었지만 useSyncExternalStore는 동시성 렌더링과 올바르게 동작하지 않는다.\\r\\n\\r\\nzustand는 useSyncExternalStore기반으로 구성되어있다.\\r\\n\\r\\nzustand를 예시로 들어서 코드를 살펴보았다.\\r\\nhttps://codesandbox.io/p/sandbox/zustand-suspense-demo-forked-psqczj?file=%2Fsrc%2FApp.js%3A41%2C38\\r\\n\\r\\n해당 코드를 보면 suspense 대기까지 isPending으로 동작했어야했지만 isPending이 노출되지 않는다.\\r\\n\\r\\nuseSyncExternalStore로부터 업데이트된 상태변경이 즉각반응하고 startTransition을 통해 업데이트 되었는지 알 수 없기 때문이다.\\r\\n\\r\\n#### 대안? 트레이드 오프?\\r\\n\\r\\n반면에 jotai는 store를 useEffect로 구독하는 형태로 구성되어있다.\\r\\nuseSyncExternalStore를 사용하지 않고 React 상태에 의존성을 두었다.\\r\\n\\r\\nzustand때와 거의 동일한 흐름의 코드이지만 isPending이 아주 잘 동작한다.\\r\\nhttps://codesandbox.io/p/sandbox/zustand-suspense-demo-forked-t2pqlr\\r\\n\\r\\njotai는 react 상태 기반으로 state가 관리되기 때문에 startTransition을 통해서 의도된 렌더링 흐름이 흘러간다.\\r\\n\\r\\n그러나 당연히 그러면 그냥 외부스토어를 구독한 상태가 되니 처음에 발생했던 tearing 문제가 다시 발생한다.\\r\\nhttps://codesandbox.io/p/sandbox/react-tearing-jotai-wqwwqt?file=%2Fsrc%2FCounter.js%3A10%2C1\\r\\n\\r\\nhttps://blog.axlight.com/posts/why-use-sync-external-store-is-not-used-in-jotai/\\r\\njotai 개발자 블로그글에 자세히 설명이 되어있다.\\r\\njotai에서는 tearing 현상이 발생하더라도 동시성 기능과 의도대로 동작하는 것을 선택한 것이다.\\r\\n\\r\\n즉 useSyncExternalStore hook이 외부스토어와 리액트간의 모든 문제를 해결해주는 만능 hook이 아니고 트레이드오프의 선택지인 것이다.\\r\\n\\r\\n모든 라이브러리마다 해결하고자 하는 방향이 있는거고 zustand와 jotai 모두 각각의 의도가 있는 것이다.\\r\\n\\r\\n### shallow compare 고찰\\r\\n\\r\\n어쩌다보니 깃허브 이슈에 올리게 돼서 링크로 대체합니다!\\r\\nhttps://github.com/hanghae-plus/front_6th_chapter1-3/issues/47\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n#### 리액트 렌더링\\r\\n\\r\\n리액트에서의 렌더링 과정을 간단하게 설명해보자면 4가지 단계로 설명할 수 있다.\\r\\n\\r\\n```\\r\\nTrigger => Render => Commit => Paint\\r\\n```\\r\\n\\r\\n위에 흐름을 좀 더 살을 붙여서 정리하면\\r\\n\\r\\n- Trigger\\r\\n  리액트에서 props, state 가 변경될 때 Trigger가 발생\\r\\n\\r\\n- Render\\r\\n  트리거가 발생하게 되면 Render 과정이 발생하게 된다.\\r\\n  Render 과정에서는 재귀적으로 prev VDom에 있는 내용과 새로 렌더링된 VDom을 비교하는 과정을 거친다.\\r\\n\\r\\n- Commit\\r\\n  변경된 사항이 있다면 Dom에 커밋\\r\\n\\r\\n- Paint\\r\\n  commit된 내용을 브라우저가 렌더링\\r\\n\\r\\n#### 렌더링은 문제인가?\\r\\n\\r\\nhttps://kentcdodds.com/blog/fix-the-slow-render-before-you-fix-the-re-render\\r\\n\\r\\n렌더링은 문제일 수도 있고 문제가 아닐 수도 있다.\\r\\n렌더링이 발생하더라도 Reconciliation 과정에서 변동된 사항이 없다면 commit은 발생하지 않는다.\\r\\ncommit이 발생하고 브라우저에서 repaint가 발생할 때가 잦아지는 경우가 문제이다.\\r\\n\\r\\n물론 렌더링중 느린 렌더링이 발생할 경우는 문제이다.\\r\\n\\r\\n이런 경우에는 렌더링을 최적화하는 방법들의 도입이 필요하다\\r\\n\\r\\n\\r\\n#### 렌더링 최적화\\r\\n\\r\\n리액트에서 제공하는 렌더링 최적화 도구들은 React.useCallback React.useMemo React.memo 들이 있다.\\r\\n각각 props, deps 들이 변경될 때 얕은비교 과정을 거쳐서 변경되었을 경우 재호출을 하는 방식이다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n#### 메모이제이션?\\r\\n\\r\\n리액트에서는 state, props, context가 변경되면 해당 컴포넌트에서 리렌더링이 발생하고 컴포넌트 안에 있는 모든 값들은 다시 재계산 된다.\\r\\n\\r\\n이 때 실제로 재계산이 필요한 경우에만 재계산하도록 하는 의도로 메모이제이션을 한다.\\r\\n\\r\\n#### 사용하지 않았을 때 발생할 수 있는 문제\\r\\n\\r\\n만약에 props로 넘기는 변수가 object라면 리렌더링이 될 때 마다 재할당이 되고 당연히 메모리주소가 바뀌며 props가 변경되었다고 인식한다.\\r\\n\\r\\n만약 성능이 좋지 않은 list 아이템 컴포넌트에 props를 넘겼다면, 렌더링이 발생할 때 마다 list 아이템 컴포넌트를 재계산하는데 아주 큰 성능이슈가 발생하게 될 것이다.\\r\\n\\r\\n이 때 React.memo와 React.useMemo를 사용해서 불필요한 렌더링을 막을 수 있을 것이다.\\r\\n\\r\\n#### 메모이제이션에 대한 장점, 단점, 나의 생각\\r\\n\\r\\n리액트에서 메모이제이션에 대한 논쟁은 핫하다.\\r\\n\\r\\n회사에서만해도 우리는 의견이 갈리고 있다.\\r\\n리드 개발자분의 의견은 어떤곳에는 쓰고 안쓰고 생각하는 고민 비용도 비싸고, 굳이 그럴 이유도 없다는 의견이다.\\r\\n그 반대의 의견은 비싼 계산을 하는 곳도 없고 문제도 없는 코드들이라는게 뻔히 보이는데 왜 넣어야하는지 모르겠다는 의견이다.\\r\\n\\r\\n양쪽 다 어떤 맥락인지는 이해가 된다. 아무리 고민해도 어려운 것 같다.\\r\\n\\r\\n- 극단적으로 예시를 든 코드\\r\\n\\r\\n```jsx\\r\\n//메모를 해도 안해도 렌더링이 발생하는 곳에서 왜 항상 얕은 비교 코드를 불필요하게 실행시키는가!\\r\\nconst [state, setState] = React.useState(0);\\r\\n\\r\\nconst memoizedValue = useMemo(() => {\\r\\n  return state * 2; // 예시로 상태의 두 배를 계산\\r\\n}, [state]);\\r\\nreturn (\\r\\n  <div>\\r\\n    {memoizedValue}\\r\\n    <button onClick={() => setState(state + 1)}>Increment</button>\\r\\n  </div>\\r\\n);\\r\\n```\\r\\n\\r\\n그래도 내가 생각하는 이상적인 메모이제이션은 느린 리렌더링이 발생하는 경우의 문제를 해결할 때 사용하면 된다고 생각한다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n#### 전역상태관리 왜 필요할까\\r\\n\\r\\n최근에는 전역상태관리의 필요성 자체가 많이 줄어들고 있다.\\r\\n\\r\\ntanstack-query 같은 서버 상태 관리 라이브러리가 없을 때는 서버 데이터 요청을 과도하게 하지 않기 위해서 전역적으로 데이터 저장소를 두어 관리하기도 하였다.\\r\\n최근에는 서버 상태 관리 라이브러리가 이런 부분을 채워주고 있고, 전역상태라는게 필요한 경우가 없다라고 말할 정도로 필요성이 줄어들었다.\\r\\n\\r\\n나의 생각도 비슷하다.\\r\\n전역상태관리는 특수한 경우를 제외하고 앱 기능을 만들 때는 거의 불필요하다. ex) global snackbar?\\r\\n게다가 웹에서는 searchParams라는 UI 정보를 보여주는 아주 좋은 요소도 있다.(심지어 지라에서는 모달을 띄워주는 요소로도 사용하고 있다)\\r\\n\\r\\n하지만 전역상태관리는 필요없다해도 scope 단위의 상태관리는 매우 유용하다.\\r\\n개발자의 의도를 담고 클린하게 코드를 관리하기 아주 좋은 방법이라 생각한다.\\r\\n\\r\\n정리해보자면, 전역상태라이브러리라고 칭하고 있긴 하지만, 필요성이 줄었고 지금은 스코프 단위의 상태관리로써 접근하는게 좋다고 생각한다.\\r\\n(앱 전역에서 사용해야된다면 앱 전체의 스코프 상태관리라고 접근한다)\\r\\n\\r\\n#### Context Hook\\r\\n\\r\\n[Context Hook](https://ko.react.dev/reference/react/useContext)은 Context를 Provider 내부에 있는 자식 컴포넌트들에게 제공해주는 Hook이다. (Provider 내부가 스코프가 된다.)\\r\\n\\r\\n동작 방식은 Provider에 제공된 context 값을 공유하게 되고 Object.is를 통해 변경되었는지 감지하여 리렌더링한다.\\r\\n이 때 useContext를 통해 사용하는 자식 컴포넌트들은 모두 함께 리렌더링이 되는 흐름이다.\\r\\n\\r\\n외부 라이브러리를 사용할필요 없이 React만 사용한다면 바로 사용할 수 있다.\\r\\n\\r\\n그러나 단순히 그냥 상태관리로써 사용하기에는 렌더링 최적화하는 일련의 과정이 간편하지 않다.\\r\\n\\r\\n그런데 여기서 하나 더 짚고가야될 점이 있다.\\r\\n렌더링이 정말 문제인가도 생각해보자.\\r\\n\\r\\n#### 렌더링\\r\\n\\r\\n렌더링은 문제일 수도 있는거지, 무조건 문제라고 말하기는 어렵다.\\r\\n\\r\\n렌더링 과정을 간략하게 보면 아래와 비슷하다.\\r\\n\\r\\n```\\r\\nrender → reconciliation → commit\\r\\n      ↖                   ↙\\r\\n           state change\\r\\n```\\r\\n\\r\\n기본적으로 렌더링이 발생해도 reconciliation과정에서 VDom과 Dom과 비교했을 때 변화가 없다면, 커밋이 일어나지 않는다.\\r\\nContext Hook으로 상태관리할 때를 예로 들자면, 불필요하게 리렌더링이 발생하는 컴포넌트라고해도 실제로는 어차피 commit이 일어나지 않는다.\\r\\n커밋이 없는 경우에는 dom이 바뀌지 않고, 사용자에게 영향을 주지 않을 것이다.\\r\\n\\r\\n물론 렌더링 과정만으로 영향을 주는 경우도 있다.\\r\\n렌더링중에 느린 렌더링이 발생하면 연산과정이 많아지면서 의도치 않게 버벅이는 현상을 마주하게 된다.\\r\\n\\r\\n전달하고자 하는 말은 느린 렌더링만 발생하지 않는다면, 즉 앱을 내가 효율적으로 잘 관리하고만 있다면,\\r\\nuseContext는 간편하고 좋은 상태관리 수단이 될 수 있다는 말을 하고 싶다.\\r\\n\\r\\n> - 내가 생각하는 효율적인 관리\\r\\n>   useMemo, useCallback, memo 등의 memoization hook을 사용해서 느린 렌더링을 관리해서 효율적으로 관리하는 것을 얘기함\\r\\n\\r\\n#### context hook에 대한 나의 생각\\r\\n\\r\\n위에서 말한거처럼 효율적으로 앱을 관리하고 있다면 context hook은 리액트 내부코드이기때문에 tearing 현상을 걱정할 필요도 없고, 쉽고 예측가능한 코드를 작성할 수 있다. 상태관리 수단으로도 괜찮은 방법일 수 있다.\\r\\n\\r\\n하지만 이런 과정을 고민하고 적용하는 것 자체가 상당히 귀찮다고 생각한다.(애초에 상태관리하도록 제공해주는 메서드가 없으니..)\\r\\n그리고 리액트 개발자는 리렌더링을 극도로 거부감 느끼도록 가스라이팅을 당했기 때문에 나도 거부감이 강하기도 하다.\\r\\n\\r\\n그래서 context hook은 기본적으로 상태를 주입하는 용도로 사용할 때 좋다고 생각한다.(애초에 그러라고 만들어진 API)\\r\\n데이터를 주입하는 용도로만 사용할 때 불필요한 렌더링 발생 걱정도 없고, 작성자의 의도를 명확히 파악할 수 있기도 하다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n### 1. Context, 외부 상태관리 라이브러리 선택 기준\\r\\n\\r\\n제가 정리한 Context Hook에 대한 관점이 실무적으로 적절한지 피드백을 받고 싶습니다\\r\\n\\r\\n- \\"효율적으로 앱을 관리하고 있다면 context hook도 좋은 상태관리 수단\\"이라는 관점에 대해서 어떻게 생각하시나요?\\r\\n- 저번 Q&A 시간에는 전부다 memo를 사용한다고 하셨는데, tool쪽이라 렌더링에 민감한 부분이 영향이 크실까요? 그냥 단순한 웹, 앱 등에서도 전부다 memo하는게 효율적일까요?\\r\\n- 코치님이 선호하시는 상태관리는 어떤 것인가요?\\r\\n- 저는 서버상태관리 라이브러리들이 생겨나면서 flux 패턴으로 관리하는 패턴자체의 필요성이 많이 줄었다고 생각하여습니다. 그러다보니 jotai를 선호하게 되었는데, 이런 관점에서 코치님이 바라보시는 생각이 궁금합니다.\\r\\n\\r\\n### 2. useSyncExternalStore vs useEffect 기반 구독의 트레이드오프\\r\\n\\r\\n제가 분석한 zustand(useSyncExternalStore) vs jotai(useEffect) 방식의 트레이드오프가 정확한지 확인하고 싶습니다\\r\\n\\r\\n- tearing 방지 vs 동시성 기능 호환성\\r\\n- 실제 프로덕션 환경에서 이런 트레이드오프가 의미있는 차이를 만드는지\\r\\n- 라이브러리 선택 시 이런 요소들을 어느 정도 가중치로 고려해야 하는지\\r\\n","created_at":"2025-07-20T14:23:54Z","updated_at":"2025-07-25T13:02:41Z","closed_at":null,"merged_at":null,"merge_commit_sha":"0f574ae934e905f72408e682b53f7bdd01c0944c","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/29/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/29/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/29/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/e46e1cee4f40783f43ec214ff8aa23aadb00fce0","head":{"label":"realstone2:main","ref":"main","sha":"e46e1cee4f40783f43ec214ff8aa23aadb00fce0","user":{"login":"realstone2","id":79455437,"node_id":"MDQ6VXNlcjc5NDU1NDM3","avatar_url":"https://avatars.githubusercontent.com/u/79455437?v=4","gravatar_id":"","url":"https://api.github.com/users/realstone2","html_url":"https://github.com/realstone2","followers_url":"https://api.github.com/users/realstone2/followers","following_url":"https://api.github.com/users/realstone2/following{/other_user}","gists_url":"https://api.github.com/users/realstone2/gists{/gist_id}","starred_url":"https://api.github.com/users/realstone2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/realstone2/subscriptions","organizations_url":"https://api.github.com/users/realstone2/orgs","repos_url":"https://api.github.com/users/realstone2/repos","events_url":"https://api.github.com/users/realstone2/events{/privacy}","received_events_url":"https://api.github.com/users/realstone2/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022929315,"node_id":"R_kgDOPPipow","name":"front_6th_chapter1-3","full_name":"realstone2/front_6th_chapter1-3","private":false,"owner":{"login":"realstone2","id":79455437,"node_id":"MDQ6VXNlcjc5NDU1NDM3","avatar_url":"https://avatars.githubusercontent.com/u/79455437?v=4","gravatar_id":"","url":"https://api.github.com/users/realstone2","html_url":"https://github.com/realstone2","followers_url":"https://api.github.com/users/realstone2/followers","following_url":"https://api.github.com/users/realstone2/following{/other_user}","gists_url":"https://api.github.com/users/realstone2/gists{/gist_id}","starred_url":"https://api.github.com/users/realstone2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/realstone2/subscriptions","organizations_url":"https://api.github.com/users/realstone2/orgs","repos_url":"https://api.github.com/users/realstone2/repos","events_url":"https://api.github.com/users/realstone2/events{/privacy}","received_events_url":"https://api.github.com/users/realstone2/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/realstone2/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/realstone2/front_6th_chapter1-3/deployments","created_at":"2025-07-20T06:40:23Z","updated_at":"2025-07-24T16:47:04Z","pushed_at":"2025-07-24T16:47:22Z","git_url":"git://github.com/realstone2/front_6th_chapter1-3.git","ssh_url":"git@github.com:realstone2/front_6th_chapter1-3.git","clone_url":"https://github.com/realstone2/front_6th_chapter1-3.git","svn_url":"https://github.com/realstone2/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":316,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/29"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/29"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/29"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/29/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/29/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/29/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/e46e1cee4f40783f43ec214ff8aa23aadb00fce0"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/30","id":2679953767,"node_id":"PR_kwDOPMCTuc6fvNln","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/30","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/30.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/30.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/30","number":30,"state":"open","locked":false,"title":"[3팀 김효진] Chapter 1-3. React, Beyond the Basics","user":{"login":"hyojin-k","id":50295043,"node_id":"MDQ6VXNlcjUwMjk1MDQz","avatar_url":"https://avatars.githubusercontent.com/u/50295043?v=4","gravatar_id":"","url":"https://api.github.com/users/hyojin-k","html_url":"https://github.com/hyojin-k","followers_url":"https://api.github.com/users/hyojin-k/followers","following_url":"https://api.github.com/users/hyojin-k/following{/other_user}","gists_url":"https://api.github.com/users/hyojin-k/gists{/gist_id}","starred_url":"https://api.github.com/users/hyojin-k/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hyojin-k/subscriptions","organizations_url":"https://api.github.com/users/hyojin-k/orgs","repos_url":"https://api.github.com/users/hyojin-k/repos","events_url":"https://api.github.com/users/hyojin-k/events{/privacy}","received_events_url":"https://api.github.com/users/hyojin-k/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://hyojin-k.github.io/front_6th_chapter1-3/\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n- Object.is()\\r\\n    - 초기 코드에 사용해보진 않았으나, 다른 사람들의 코드를 보면서 많이 발견되었던 Object.is()\\r\\n    - === 와 비슷한 결과를 보여주긴 하지만 하단의 경우처럼 특수한 케이스에서는 결과 값이 다름\\r\\n    \\r\\n    ```jsx\\r\\n    -0 === +0 // true\\r\\n    Object.is(-0, +0) // false\\r\\n    \\r\\n    NaN === NaN // false\\r\\n    Object.is(NaN, NaN) // true\\r\\n    ```\\r\\n\\r\\n- Record<string, unknown> 는 언제 사용해야하는가\\r\\n    - `shallowEquals.ts`에서 `const keysA = Object.keys(a)`로 했더니 타입 에러 발생\\r\\n    - `export const shallowEquals = (a: unknown, b: unknown)` 함수 매개변수가 unknown 타입으로 정의되어 있기 때문인데, 어떤 값이든 받을 수는 있지만 해당 값을 사용하기 전에 객체 프로퍼티 접근을 위해 타입을 명시적으로 확인하거나 캐스팅해야함\\r\\n    - 동일한 방식으로 `const objA = a as { [key:string] : unknown}` 가 있는데 생각해보니 이렇게는 사용해본 적이 있음\\r\\n    - 타입 지정을 함으로써 런타임 에러를 방지하고 객체 프로퍼티에 안전하게 접근할 수 있음\\r\\n\\r\\n- useRef\\r\\n    - 솔직히 처음에는 useState를 사용해서 useRef를 어떻게 만들라는건지 이해도 못하고 감도 안와서 다른 분들의 코드를 염탐했습니다. 정답을 알려조…! 근데 마치 짠 것 처럼 같은 코드를 작성한 것이 아닌가…?\\r\\n        \\r\\n        ```jsx\\r\\n        export function useRef<T>(initialValue: T): { current: T } {\\r\\n          const [ref] = useState(() => ({ current: initialValue }));\\r\\n        \\r\\n          return ref;\\r\\n        }\\r\\n        ```\\r\\n        \\r\\n    - `const [state] = useState(initialValue)` 이렇게 setter 함수를 사용하지 않게되면 해당 객체를 변경해도 리렌더링이 발생하지 않는다..!\\r\\n    \\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n딱히 자랑하고 싶은 코드는 없지만 그나마 꼽아보자면 shallowEquals/deepEquals를 간단하게 리팩토링을 해보았다…? 해당 코드는 하단 개선이 필요한 코드에서 동일하게 언급하고 있습니다. \\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n- shallowEquals / deepEquals 코드 개선 필요\\r\\n    \\r\\n    AS-IS\\r\\n    \\r\\n    - 조건문 중첩이 깊게 되어 있어서 가독성이 떨어짐\\r\\n    - 배열을 별도로 처리할 필요가 없음\\r\\n    \\r\\n    ```jsx\\r\\n    export const shallowEquals = (a: unknown, b: unknown) => {\\r\\n      if (a === b) return true;\\r\\n    \\r\\n      if (a !== null && b !== null) {\\r\\n        // 배열 비교\\r\\n        if (Array.isArray(a) && Array.isArray(b)) {\\r\\n          if (a.length === b.length && a.every((item, index) => item === b[index])) {\\r\\n            return true;\\r\\n          }\\r\\n          return false;\\r\\n        }\\r\\n    \\r\\n        // 객체 비교\\r\\n        if (typeof a === \\"object\\" && typeof b === \\"object\\") {\\r\\n          const objA = a as Record<string, unknown>;\\r\\n          const objB = b as Record<string, unknown>;\\r\\n    \\r\\n          const keysA = Object.keys(objA);\\r\\n          const keysB = Object.keys(objB);\\r\\n    \\r\\n          if (keysA.length !== keysB.length) {\\r\\n            return false;\\r\\n          }\\r\\n    \\r\\n          for (const key of keysA) {\\r\\n            if (objA[key] !== objB[key]) return false;\\r\\n          }\\r\\n    \\r\\n          return true;\\r\\n        }\\r\\n      }\\r\\n    \\r\\n      return false;\\r\\n    };\\r\\n    ```\\r\\n    \\r\\n\\r\\n    TO-BE\\r\\n    \\r\\n    - 조건문 중첩을 제거함으로써 가독성 향상\\r\\n    - 배열도 객체로 취급하여 Object.keys()를 통해 인덱스를 키로 비교하므로 배열 비교 조건을 제거\\r\\n    - === 대신 Object.is() 사용\\r\\n    \\r\\n    ```jsx\\r\\n    export const shallowEquals = (a: unknown, b: unknown) => {\\r\\n      if (Object.is(a, b)) return true;\\r\\n    \\r\\n      if (typeof a !== \\"object\\" || a === null || typeof b !== \\"object\\" || b === null) return false;\\r\\n    \\r\\n      // 객체 비교\\r\\n      const objA = a as Record<string, unknown>;\\r\\n      const objB = b as Record<string, unknown>;\\r\\n    \\r\\n      const keysA = Object.keys(objA);\\r\\n      const keysB = Object.keys(objB);\\r\\n    \\r\\n      if (keysA.length !== keysB.length) {\\r\\n        return false;\\r\\n      }\\r\\n    \\r\\n      for (const key of keysA) {\\r\\n        if (!Object.is(objA[key], objB[key])) return false;\\r\\n      }\\r\\n    \\r\\n      return true;\\r\\n    };\\r\\n    \\r\\n    ```\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n- 그동안 무의식적으로 사용하고 있던 hook들에 대해 좀 더 깊게 생각해볼 수 있었습니다. 당장 상단에서 언급했던 useRef 구현에서도 느꼈듯이 당연하게 쓰고있지만 놓치는 부분이 많다는걸 알게되었습니다. 앞으로 실무에서 hooks를 사용할 때 좀 더 신경쓰면서 효과적으로 사용할 수 있길…!! 추가적으로 사용해보지 않은 문법, hook에 대해서 알아볼 수 있는 기회였습니다.\\r\\n- 과제를 진행하면서 다른 분들이 정리해준 글, pr들을 많이 참고했는데 많은 도움을 받을 수 있어서 좋았습니다. 다만 제가 스스로 코드를 뜯어보거나 분석해보는 등의 경험이 덜 한 채로 다른 분들이 정리해둔 글을 읽다보니 ‘나도 저렇게 직접 탐구를 해보고싶다..!’라는 자극을 받게 되더라고요. 다음 과제에서는 한 번 도전해보겠습니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n- 어느정도 답이 정해져있는 과제라 지금까지의 과제에 비해서는 쉬운 듯 하면서도(일단 1,2주차보다 AI의 도움을 덜 받음) 지금껏 무의식적으로 사용하고 있던 hook들에 대해 조금 더 깊이 있게 알아볼 수 있는 과제였습니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n리액트의 렌더링 과정은 UI를 효율적으로 갱신하기 위해 최초 렌더 → 가상 DOM 생성 → Reconciliation(비교) → 실제 DOM 변경의 흐름으로 이루어집니다. \\r\\n\\r\\n- 최초 렌더 - createRoot().render()를 호출하면서 최초 렌더링 시작\\r\\n- 가상 DOM 생성 - 루트 컴포넌트부터 시작해서 모든 컴포넌트를 순회하며 가상 DOM 트리 생성\\r\\n- Reconciliation - 상태나 props 변경에 따라 이전 가상 DOM 트리와 새로운 가상 DOM 트리를 비교해서 변경사항 감지\\r\\n- 실제 DOM 변경 - 비교 결과 변경된 사항만 최소한으로 업데이트\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n한 때 회사에서 팀원들과 나눴던 얘기 중 메모이제이션에 관한 내용이 있었는데요, ‘useMemo와 useCallback을 많이 사용하는 것이 오히려 성능에 좋지 않다고 하더라.’라는 이야기였습니다. 실제로 저희는 쓸 수 있는 거의 모든 곳에 useMemo와 useCallback을 사용하고 있습니다. 이 때 당시에는 스쳐지나가는 주제라 제대로 된 결론이 나지는 않았었네요.\\r\\n그런데 이번 주에 다른 팀의 멘토링 주제에서도 비슷한 내용이 언급되었고, 코치님의 답변은 ‘적절한 순간에 메모이제이션을 쓰기로 하면서부터 오히려 개발하는데 병목이 생길 수 있고 생산성이 떨어질 수 있으니 이럴거면 다 적용하는게 좋은 것 같다’ 였습니다. 오? 그럼 오히려 제대로 쓰고 있었을지도?^^ㅎㅎ\\r\\n명쾌한 답변 인 듯 하면서도 그렇다면 메모이제이션을 적절하게 써보기 위해 노력해본 적은 있는가? 모든 코드에 메모이제이션을 쓰고 있는 지금 상황이 선택적 메모이제이션에 대해 불편함을 느끼고 난 후의 결론인가? 라고 생각했을 땐 ‘아니!’ 라는 생각까지 도달했습니다. 프로젝트를 진행하면서 필요한 곳에서만 메모이제이션을 하는 방식을 적용해 본 경험이 있었다면 현재의 상황에 대해 가지고 있던 의문점을 좀 더 빨리 해소할 수 있었을 것 같습니다.  \\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-20T14:28:39Z","updated_at":"2025-07-26T05:06:05Z","closed_at":null,"merged_at":null,"merge_commit_sha":"0ee4c223a7996478a368f55a591c852d8b8df9cc","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/30/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/30/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/30/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/255753d2b426fabf26eae4073dd5c1074b74b649","head":{"label":"hyojin-k:main","ref":"main","sha":"255753d2b426fabf26eae4073dd5c1074b74b649","user":{"login":"hyojin-k","id":50295043,"node_id":"MDQ6VXNlcjUwMjk1MDQz","avatar_url":"https://avatars.githubusercontent.com/u/50295043?v=4","gravatar_id":"","url":"https://api.github.com/users/hyojin-k","html_url":"https://github.com/hyojin-k","followers_url":"https://api.github.com/users/hyojin-k/followers","following_url":"https://api.github.com/users/hyojin-k/following{/other_user}","gists_url":"https://api.github.com/users/hyojin-k/gists{/gist_id}","starred_url":"https://api.github.com/users/hyojin-k/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hyojin-k/subscriptions","organizations_url":"https://api.github.com/users/hyojin-k/orgs","repos_url":"https://api.github.com/users/hyojin-k/repos","events_url":"https://api.github.com/users/hyojin-k/events{/privacy}","received_events_url":"https://api.github.com/users/hyojin-k/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022688316,"node_id":"R_kgDOPPT8PA","name":"front_6th_chapter1-3","full_name":"hyojin-k/front_6th_chapter1-3","private":false,"owner":{"login":"hyojin-k","id":50295043,"node_id":"MDQ6VXNlcjUwMjk1MDQz","avatar_url":"https://avatars.githubusercontent.com/u/50295043?v=4","gravatar_id":"","url":"https://api.github.com/users/hyojin-k","html_url":"https://github.com/hyojin-k","followers_url":"https://api.github.com/users/hyojin-k/followers","following_url":"https://api.github.com/users/hyojin-k/following{/other_user}","gists_url":"https://api.github.com/users/hyojin-k/gists{/gist_id}","starred_url":"https://api.github.com/users/hyojin-k/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hyojin-k/subscriptions","organizations_url":"https://api.github.com/users/hyojin-k/orgs","repos_url":"https://api.github.com/users/hyojin-k/repos","events_url":"https://api.github.com/users/hyojin-k/events{/privacy}","received_events_url":"https://api.github.com/users/hyojin-k/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hyojin-k/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hyojin-k/front_6th_chapter1-3/deployments","created_at":"2025-07-19T16:00:21Z","updated_at":"2025-07-24T17:26:10Z","pushed_at":"2025-07-24T17:26:23Z","git_url":"git://github.com/hyojin-k/front_6th_chapter1-3.git","ssh_url":"git@github.com:hyojin-k/front_6th_chapter1-3.git","clone_url":"https://github.com/hyojin-k/front_6th_chapter1-3.git","svn_url":"https://github.com/hyojin-k/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":470,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/30"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/30"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/30"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/30/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/30/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/30/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/255753d2b426fabf26eae4073dd5c1074b74b649"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/31","id":2679964847,"node_id":"PR_kwDOPMCTuc6fvQSv","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/31","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/31.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/31.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/31","number":31,"state":"open","locked":false,"title":"[3팀 이가은] Chapter 1-3. React, Beyond the Basics","user":{"login":"tooth-is-silver","id":35989487,"node_id":"MDQ6VXNlcjM1OTg5NDg3","avatar_url":"https://avatars.githubusercontent.com/u/35989487?v=4","gravatar_id":"","url":"https://api.github.com/users/tooth-is-silver","html_url":"https://github.com/tooth-is-silver","followers_url":"https://api.github.com/users/tooth-is-silver/followers","following_url":"https://api.github.com/users/tooth-is-silver/following{/other_user}","gists_url":"https://api.github.com/users/tooth-is-silver/gists{/gist_id}","starred_url":"https://api.github.com/users/tooth-is-silver/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tooth-is-silver/subscriptions","organizations_url":"https://api.github.com/users/tooth-is-silver/orgs","repos_url":"https://api.github.com/users/tooth-is-silver/repos","events_url":"https://api.github.com/users/tooth-is-silver/events{/privacy}","received_events_url":"https://api.github.com/users/tooth-is-silver/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://tooth-is-silver.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n- 옵저버 패턴과 메모리 관리 `createObserver`\\r\\n  - 옵저버 패턴의 1:N 의존성 구조와 발행-구독 모델에 대해 코드로 풀어보며 이해하는 시간을 가졌습니다.\\r\\n  - 메모리 누수 방지를 위한 이벤트 리스너 정리를 이해할 수 있었습니다.\\r\\n\\r\\n- React 내부 구현 탐구 `useStore`\\r\\n  - `useSyncExternalStoreWithSelector`의 내부 구현 로직을 파악하고 과제에 적용할 수 있는 고민과 이해의 시간을 가졌습니다.\\r\\n  - 당연하게 사용하던 React hooks의 의존성 배열과 메모이제이션의 관계성을 명확히 알게 되었습니다.\\r\\n\\r\\n- 고차 컴포넌트 패턴 `memo`, `deepMemo`\\r\\n  - useRef를 이용한 이전 props 참조를 유지하고 어떻게 리렌더링이 트리거 되는지 이해하는 시간을 가졌습니다.\\r\\n\\r\\n- 얕은 비교와 깊은 비교의 차이점 `shallowEquals`, `deepEquals`\\r\\n  - 프로토타입, 생성자, Date/RegExp/function 타입의 예외처리를 추가하고 테스트 코드로 오버엔지니어링도 해보는 유익한 시간이었습니다.\\r\\n  - 깊은 비교에서 재귀로 동작시 `WeakSet`을 활용하여 순환 참조에 대해 고려해보는 시간을 가졌습니다.\\r\\n\\r\\n- Symbol.iterator의 동작 원리 이해 `shallowEquals`\\r\\n  - Zustand의 shallow 함수를 확인하였고 for ...of와의 비교를 통해 Symbol.iterator의 성능과 구현 목적에 대해 확인해보는 시간이었습니다.\\r\\n\\r\\n- useCallback과 useAutoCallback 비교 `useAutoCallback`\\r\\n  - useAuthCallback의 존재 이유(성능 최적화, 의존성 관리 불필요, 항상 최신 함수 참조)에 대해 분석해보는 시간이었습니다.\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n- shallowEquals.ts\\r\\n  - zustand의 shallow 함수에서 감명을 받아 오버엔지니어링을 시도한 부분입니다.\\r\\n  - 테스트 코드를 항플 들어와서 처음 접했는데 테스트코드를 추가해보고 테스트 통과까지 진행해본 부분도 얼마 안되는 코드이지만 적용해보길 잘 했다고 생각합니다.\\r\\n  ```ts\\r\\n  // 동일한 함수인가요?\\r\\n  if (typeof a === \\"function\\" && typeof b === \\"function\\") {\\r\\n    return a.toString() === b.toString();\\r\\n  }\\r\\n\\r\\n  // object가 아닌가요?\\r\\n  if (typeof a !== \\"object\\" || typeof b !== \\"object\\") {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  // 생성자가 같은가요?\\r\\n  if (a.constructor !== b.constructor) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  // 동일한 Date 값인가요?\\r\\n  if (a instanceof Date && b instanceof Date) {\\r\\n    // .getTime()으로 비교하면 값이 같음으로 true로 반환 할 수 있다.\\r\\n    return a === b;\\r\\n  }\\r\\n\\r\\n  // 동일한 RegExp 값인가요?\\r\\n  if (a instanceof RegExp && b instanceof RegExp) {\\r\\n    return a.source === b.source && a.flags === b.flags;\\r\\n  }\\r\\n\\r\\n  // basic.test.tsx\\r\\n  const date = new Date(\\"2023-01-01\\");\\r\\n  const obj = { getTime: () => new Date(\\"2023-01-01\\").getTime() };\\r\\n  expect(shallowEquals(date, obj)).toBe(false); // 생성자 비교\\r\\n\\r\\n  const dateA = new Date(\\"2023-01-01T00:00:00Z\\");\\r\\n  const dateB = new Date(\\"2023-01-01T00:00:00Z\\");\\r\\n  expect(shallowEquals(dateA, dateB)).toBe(false); // 다른 Date 참조\\r\\n\\r\\n  const regexA = /abc/gi;\\r\\n  const regexB = new RegExp(\\"abc\\", \\"gi\\");\\r\\n  expect(shallowEquals(regexA, regexB)).toBe(true); // 정규식 내용이 같음\\r\\n\\r\\n  const functionA = () => {\\r\\n    console.log(\\"펑션A입니다.\\");\\r\\n  };\\r\\n  const functionB = () => {\\r\\n    alert(\\"알럿 발생\\");\\r\\n  };\\r\\n  expect(shallowEquals(functionA, functionB)).toBe(false); // 내부 동작이 다름\\r\\n   ```\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n- useShallowState.ts\\r\\n  - ESLint exhaustive-deps 규칙 위반으로 워닝이 뜨고 있으나 기능은 정상 동작중입니다. 동일한 기능을 하면서도 의존성 배열을 사용하지 않는 방법으로 개선하고 싶은데 useAutoCallback을 사용하면 의존성 배열을 사용하지 않아도 되지만 차선책일 뿐 최선은 아니라고 생각되었습니다.\\r\\n  - 내부 return문에서 아래와 같이 의존성 배열을 제거하는 방식으로 사용하고 싶은데 newValue가 function으로 들어올 수 있는 부분때문에 initialValue의 타입 지정이 어려웠습니다.\\r\\n  ```ts\\r\\n  const setShallowValue = useCallback((newValue: SetStateAction<T>) => {\\r\\n    setValue((prev) => {\\r\\n      const resolved =\\r\\n        typeof newValue === \\"function\\"\\r\\n          ? newValue(prev) // newValue 타입 지정이 복잡함\\r\\n          : newValue;\\r\\n      return shallowEquals(prev, resolved) ? prev : resolved;\\r\\n    });\\r\\n  }, []);\\r\\n  ```\\r\\n### 학습 효과 분석\\r\\n\\r\\n- React 생태계의 내부 동작 원리를 자세히 알게되었습니다. 특히 useSyncExternalStore는 학습 전에는 전혀 모르던 개념이었는데 학습하고나니 React가 외부 라이브러리와의 상태 동기화를 위해 만들어졌으며, 동일한 스냅샷을 기억하기 위해 내부에선 어떤 방식을 채택하게 되었는지 알게된 아주 뜻 깊은 시간이었습니다. 게다가 서버 렌더링도 지원하는 부분도 인상깊었습니다.\\r\\n- Zustand의 shallow 함수를 보면서 edge case처리에 대한 고민을 할 수 있었으며, 테스트 코드도 작성하며 어떻게 테스트 코드를 작성해야 확실하게 검증을 할 수 있을지 고민하는 방법을 배웠습니다.\\r\\n- useAutoCallback은 나중에 적극적으로 도입해보고 싶어요. ESLint exhaustive-deps 규칙 위반으로 의존성 배열에 eslint-disable 주석 처리하던 부분을 사용하지 않고 의존성 배열을 신경쓰지 않아도 되서 실무에서 사용해도 너무 좋을 것 같다는 생각이 들었습니다.\\r\\n- 테스트 코드에 대한 학습이 필요하다고 느꼈습니다. 테스트 주도 개발에 대해 익숙하지 않다보니 아직도 테스트 코드 기반으로 내부 로직을 이해하는데 시간이 오래걸립니다. (물론 발제 자료가 훌륭해서 많은 도움이 됩니다!) 하지만 주차별 과제를 진행하면서 계속 나아질 수 있는 부분이라고 생각하고 열심히 진행해보려고합니다 ☀️\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n- 발제 자료가 너무 많아서 배터질 것 같아요. 아직 다 못먹었는데 소화 시키면서 열심히 보고 있습니다. 감사합니다. 🙇‍♂️🙇‍♂️🙇‍♂️\\r\\n- Zustand, React, Preact를 통해서 코드를 분석하고 의도를 파악하고 과제를 완성하는 플로우의 경험이 너무 좋았습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n- 리액트는 렌더링이 일어나는 동안 최상위 루트에서부터 쭈욱 마지막 차일드 엘리먼트까지 훑어 내려가면서 플래그가 지정되어있는 컴포넌트들을 기억합니다. 그리고 수집이 끝나면 잘 알고있는 가상 돔 `VirtualDom`을 만들어 놓고 실제 돔과 비교하며(diff 알고리즘 사용) 변경되는 사항들을 체크하는데 이 과정을 재조정 `Reconcilation`이라고 합니다.\\r\\n- 리액트는 컴포넌트 생성시 트리에 컴포넌트가 삽입된 직후에 componentDidMount를 호출한다. 컴포넌트의 상태가 변경이 되면 componentDidUpdate가 호출됩니다. 컴포넌트가 언마운트 되며 제거되기 바로 직전에 componentWillUnmount가 호출됩니다. 타이머를 제거하거나 구독 해제와 같은 동작을 합니다.\\r\\n- `useState`는 컴포넌트 내부의 정보를 기억하며 업데이트합니다. `useContext`는 props드릴링 없이 부모 컴포넌트에서 전달받은 상태를 구독하여 정보를 업데이트할 수 있습니다. `useRef`는 렌더링을 트리거 하지 않는 DOM의 정보들을 담을 수 있습니다. `useEffect`는 외부 시스템, 네트워크, 다른 라이브러리를 연결할 때 사용합니다. 흔히 API를 렌더 전 fetching할 때 사용하지만 리액트에서는 지양하는 방법입니다. `useMemo`는 연산 후 기억해야할 값이 있을때 사용합니다. 기억해야할 값은 객체, 함수, 원시 값을 포함합니다. `useCallback`은 정의된 함수를 기억해야할 때 사용합니다. 매번 새로운 함수를 생성하지 않고 동일한 이전 함수를 참조합니다. \\r\\n- 리액트에서 렌더링을 최적화 하려면 상태나 함수를 구독하고 있는 컴포넌트를 관심사별로 쪼개거나 useMemo, useCallback을 적절히 사용하며 메모제이션하고 이전 상태를 기억하여 성능 이슈가 발생되지 않도록 합니다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n- 메모이제이션은 큰 프로젝트에서는 성능 최적화를 적용하는 모든 단계를 찾는데 드는 리소스 비용이 훨씬 크기 때문에 필수적으로 적용하는게 좋다고 생각합니다. 코치님도 QnA시간에 그렇게 말씀하셨고요!\\r\\n- 메모이제이션을 사용하면 성능 최적화를 해결할 수 있으나 메모이제이션에 의존하게 되는 코드가 많아지게 되어 다른 코드들도 동일하게 메모이제이션을 적용해야하는 리소스가 생깁니다.\\r\\n- 메모이제이션을 쓰지않고 성능 최적화를 하려면 설계적인 부분에 좀 더 신경써야 할 것 같아요. 컴포넌트를 세부적으로 독립적인 컴포넌트로 분리하거나 children props를 사용하여 부모 상태와는 무관한 렌더링 상태를 유지하도록 고려해야 합니다. 또한 Ref를 적극적으로 사용하며 상태를 사용할때 객체 형태가 아닌 useState로 독립적으로 사용해야합니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n- 컨텍스트는 컴포넌트에서 사용하는 작은 단위의 데이터를 연관된 컴포넌트와 공유하고자 할때 사용합니다. 하지만 컨텍스트도 관리해야할 데이터가 많아지면 분리해야하며 이로인해 컨텍스트 관리 포인트가 증가합니다.\\r\\n- 상태관리 라이브러리는 컨텍스트보다 큰 단위의 데이터를 여러 컴포넌트에서 나눠서 사용할 수 있도록 최적화되어있습니다. 우리가 과제에서 만든 useStore처럼 상태 저장소와 컴포넌트를 연결하여 성능을 최적화하는 방법이 핵심 요소입니다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n- **useStore**\\r\\n```ts\\r\\nconst defaultSelector = <T, S = T>(state: T) => state as unknown as S;\\r\\n\\r\\nexport const useStore = <T, S = T>(store: Store<T>, selector: (state: T) => S = defaultSelector<T, S>) => {\\r\\n  // useSyncExternalStore와 useShallowSelector를 사용해서 store의 상태를 구독하고 가져오는 훅을 구현해보세요.\\r\\n  const shallowSelector = useShallowSelector(selector);\\r\\n  const { getState, subscribe } = store;\\r\\n\\r\\n  const value = useSyncExternalStore(\\r\\n    subscribe,\\r\\n    () => shallowSelector(getState()),\\r\\n    () => shallowSelector(getState()),\\r\\n  );\\r\\n  return value;\\r\\n};\\r\\n```\\r\\n현재 기능상에 문제는 없지만 useSyncExternalStore에 전달하고 있는 세번째 인자를 다음과 같이 사용해도 되는건지 궁금합니다.\\r\\nuseStore에 serverSnapshot을 받는 경우를 생각하고 다음과 같은 코드로 사용해도 괜찮을까요?\\r\\n\\r\\n```ts\\r\\nexport const useStore = <T, S = T>(\\r\\n  store: Store<T>, \\r\\n  selector: (state: T) => S = defaultSelector<T, S>,\\r\\n  serverSnapshot?: S // 서버사이드 스냅샷 옵셔널로 명시\\r\\n) => {\\r\\n  const shallowSelector = useShallowSelector(selector);\\r\\n  const { getState, subscribe } = store;\\r\\n  const value = useSyncExternalStore(\\r\\n    subscribe,\\r\\n    () => shallowSelector(getState()),\\r\\n    () => serverSnapshot ?? shallowSelector(getState())\\r\\n  );\\r\\n  return value;\\r\\n};\\r\\n```\\r\\n\\r\\n- **ToastProvider**\\r\\n```ts\\r\\n// useState\\r\\n  const [value] = useState(() => ({\\r\\n    show: showWithHide,\\r\\n    hide,\\r\\n  }));\\r\\n\\r\\n// useMemo\\r\\n  const value = useMemo(\\r\\n    () => ({\\r\\n      show: showWithHide,\\r\\n      hide,\\r\\n    }),\\r\\n    [showWithHide, hide],\\r\\n  );\\r\\n```\\r\\n\\r\\nToastProvider에서 show와 hide 엑션을 최적화 하기 위해 코치님께서 언급해주신 최적화 방법중에 하나인 useState를 사용했습니다. useMemo를 사용하여 최적화 하신 분들도 많이 보였는데 기능상의 문제는 없으나 useState를 사용할 떄와 useMemo를 사용할때의 차이점이 궁금합니다. 분명 차이가 있을 것 같은데 어떤 점을 고려하고 선택해야할지 고민이에요.\\r\\n","created_at":"2025-07-20T14:48:49Z","updated_at":"2025-07-26T04:15:40Z","closed_at":null,"merged_at":null,"merge_commit_sha":"0dbfd2145c8e15c7117325e03777e933dbd2ac4d","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/31/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/31/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/31/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/76785c48988c1b3d6653a39168cb62abe81ba29c","head":{"label":"tooth-is-silver:main","ref":"main","sha":"76785c48988c1b3d6653a39168cb62abe81ba29c","user":{"login":"tooth-is-silver","id":35989487,"node_id":"MDQ6VXNlcjM1OTg5NDg3","avatar_url":"https://avatars.githubusercontent.com/u/35989487?v=4","gravatar_id":"","url":"https://api.github.com/users/tooth-is-silver","html_url":"https://github.com/tooth-is-silver","followers_url":"https://api.github.com/users/tooth-is-silver/followers","following_url":"https://api.github.com/users/tooth-is-silver/following{/other_user}","gists_url":"https://api.github.com/users/tooth-is-silver/gists{/gist_id}","starred_url":"https://api.github.com/users/tooth-is-silver/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tooth-is-silver/subscriptions","organizations_url":"https://api.github.com/users/tooth-is-silver/orgs","repos_url":"https://api.github.com/users/tooth-is-silver/repos","events_url":"https://api.github.com/users/tooth-is-silver/events{/privacy}","received_events_url":"https://api.github.com/users/tooth-is-silver/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1021794723,"node_id":"R_kgDOPOdZow","name":"front_6th_chapter1-3","full_name":"tooth-is-silver/front_6th_chapter1-3","private":false,"owner":{"login":"tooth-is-silver","id":35989487,"node_id":"MDQ6VXNlcjM1OTg5NDg3","avatar_url":"https://avatars.githubusercontent.com/u/35989487?v=4","gravatar_id":"","url":"https://api.github.com/users/tooth-is-silver","html_url":"https://github.com/tooth-is-silver","followers_url":"https://api.github.com/users/tooth-is-silver/followers","following_url":"https://api.github.com/users/tooth-is-silver/following{/other_user}","gists_url":"https://api.github.com/users/tooth-is-silver/gists{/gist_id}","starred_url":"https://api.github.com/users/tooth-is-silver/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tooth-is-silver/subscriptions","organizations_url":"https://api.github.com/users/tooth-is-silver/orgs","repos_url":"https://api.github.com/users/tooth-is-silver/repos","events_url":"https://api.github.com/users/tooth-is-silver/events{/privacy}","received_events_url":"https://api.github.com/users/tooth-is-silver/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/tooth-is-silver/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/tooth-is-silver/front_6th_chapter1-3/deployments","created_at":"2025-07-18T01:05:18Z","updated_at":"2025-07-26T04:15:43Z","pushed_at":"2025-07-26T04:15:39Z","git_url":"git://github.com/tooth-is-silver/front_6th_chapter1-3.git","ssh_url":"git@github.com:tooth-is-silver/front_6th_chapter1-3.git","clone_url":"https://github.com/tooth-is-silver/front_6th_chapter1-3.git","svn_url":"https://github.com/tooth-is-silver/front_6th_chapter1-3","homepage":null,"size":133,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/31"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/31"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/31"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/31/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/31/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/31/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/76785c48988c1b3d6653a39168cb62abe81ba29c"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/32","id":2680244234,"node_id":"PR_kwDOPMCTuc6fwUgK","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/32","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/32.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/32.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/32","number":32,"state":"open","locked":false,"title":"[4팀 이유진] Chapter 1-3. React, Beyond the Basics","user":{"login":"Elli-Lee","id":159514073,"node_id":"U_kgDOCYH92Q","avatar_url":"https://avatars.githubusercontent.com/u/159514073?v=4","gravatar_id":"","url":"https://api.github.com/users/Elli-Lee","html_url":"https://github.com/Elli-Lee","followers_url":"https://api.github.com/users/Elli-Lee/followers","following_url":"https://api.github.com/users/Elli-Lee/following{/other_user}","gists_url":"https://api.github.com/users/Elli-Lee/gists{/gist_id}","starred_url":"https://api.github.com/users/Elli-Lee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Elli-Lee/subscriptions","organizations_url":"https://api.github.com/users/Elli-Lee/orgs","repos_url":"https://api.github.com/users/Elli-Lee/repos","events_url":"https://api.github.com/users/Elli-Lee/events{/privacy}","received_events_url":"https://api.github.com/users/Elli-Lee/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://elli-lee.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n 이번 과제가 1주차 세번의 과제 중 정답과 방향이 가장 명확해서 비교적 수월했기 때문에, 왜 이렇게 동작하도록 함수를 작성해야 하는지를 명확히 이해하고자 노력했고, 각 함수에서 처리해야할 로직들을 AI 도움을 최소화해서 구현하려고 노력했습니다 .리액트의 여러 훅들을 직접 구현하면서 훅들의 동작 원리를 알 수 있었고, 리액트가 무엇을 해결하고자 했는지가 조금씩 느껴졌습니다.\\r\\n3주간 프레임워크 없이 SPA 만들기를 진행하면서 SPA 프레임워크의 동작 원리를 어느정도 알고있다고 생각했는데 알고있기는 커녕 저는 여태껏 궁금해 한 적 조차 없었다는 사실을 깨달았고, 자바스크립트 실력이 많이 부족하다는 것도 느꼈습니다. \\r\\n저의 부족함을 많이 알게된 3주였고, 제 과제의 결과물이 제 스스로도 만족할 만큼의 수준은 아니지만(특히 1주차 과제..시간되는대로 꼭 다시 도전해보고 싶어요..), 3주간의 몰입이 돌아보니 정말 재밌었고, 개인적으로는 많이 성장했다고 생각합니다!\\r\\n\\r\\n### 기술적 성장\\r\\n** Equalities 구현 과정에서 **\\r\\n어떤 타입을 먼저 처리해야 하는지, 각 분기 처리를 거칠 때마다 어떤 타입으로 좁혀지는지, 잘못 처리된 타입은 없는지 신경쓰며 구현했습니다.\\r\\n이 과정에서 typeof null은 object라는 사실을 처음 알게 되어 object 타입을 처리하기 전 null을 먼저 처리해주었습니다.\\r\\n\\r\\n** useRef 구현 과정에서 **\\r\\n어떻게 내부적으로 useState를 사용하는데 리렌더링을 발생시키지 않을 수 있을지 이해하는데 시간이 걸렸습니다.\\r\\n\\r\\nuseState는 초기화 시에만 객체를 생성하고 이후 리렌더링에서는 동일한 객체 참조를 반환하고, useState의 setter를 호출하지 않는 한 리렌더링이 발생하지 않는다.\\r\\nReact는 객체 내부 프로퍼티 변화(current의 변화)를 감지하지 못한다 (얕은 비교!)\\r\\n는 점을 알게 되었습니다.\\r\\n\\r\\nuseState의 구조분해 할당으로 state만 받고 setter 함수는 아예 안받는 이유가 궁금했는데, setter가 리렌더링을 유발하기 때문에 useRef에서는 필요없어서 안 받았다는 아주아주 당연한 사실도 새삼 알게 되었습니다..\\r\\n또한, 테스트 코드를 통해 useRef가 수행해야하는 결과를 이해하고자 노력했는데, 중복을 걸러주는 Set 자료구조를 사용해서 Set의 size를 통해 리렌더링 시 참조가 변했는지를 체크하는 점이 인상깊었습니다.\\r\\n\\r\\n** useMemo 구현 과정에서 **\\r\\nuseMemo를 구현하면서 궁금했던 부분은 왜 deps를 깊은비교가 아닌 얕은 비교로 수행하는지 였습니다.\\r\\n찾아본 결과, \\r\\n깊은 비교는 비용이 너무 크다!\\r\\n만약 deps를 깊은 비교(deep equality)로 검사하려면:\\r\\n배열의 각 요소가 객체일 경우 그 안의 속성까지 전부 비교해야 하는데, 이건 성능 비용이 크고, 특히 렌더링마다 비교하게 되면 전체 앱의 성능이 떨어질 수 있기 때문임을 알게 되었습니다.\\r\\n\\r\\n** useCallback 구현 과정에서 **\\r\\n리액트를 제대로 사용해본 적이 없는 저는... React.memo로도 충분할것 같은데 왜 useCallback이 필요한지 궁금했습니다.\\r\\n핵심은 함수도 결국 객체이기 때문에 그 함수를 가지고 있는 부모컴포넌트가 리렌더 될 때마다 다시 생성된 새 함수가 되어 참조값이 달라지기 때문이었습니다.\\r\\n자식 컴포넌트에 memo가 적용되어 있어도, 부모 컴포넌트가 자식 컴포넌트에게 함수를 전달하고 있는 경우, 부모컴포넌트가 리렌더링 될 때마다 함수의 참조값이 바뀌므로 자식컴포넌트는 props가 바뀌었다고 판단하기 때문에 memo와 관계없이 리렌더링되기 때문임을 알게 되었습니다.\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n자랑할 만한 코드를 찾는것... 정말 어려운 일입니다..🥹\\r\\n그나마 찾아보자면..\\r\\n코드적으로 자랑하고 싶다기 보다는.. \\r\\nuseMemo의 동작을 이해하기 위해 오래 고민하고 공부하고 스스로 구현했다는 점에서 당첨되었습니다.\\r\\n\\r\\n```\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n\\r\\n  // 1. 이전 의존성과 결과를 저장할 ref 생성\\r\\n  // undefined는 첫 렌더\\r\\n  // resultRef는 factory()의 실행결과 저장\\r\\n  const depsRef = useRef<DependencyList | undefined>(undefined);\\r\\n  const resultRef = useRef<T | undefined>(undefined);\\r\\n\\r\\n  // 2. 현재 의존성과 이전 의존성 비교\\r\\n  // 초기 렌더링이거나, 이전 의존성과 현재 의존성이 다르면 새로 메모이제이션 -> factory() 실행\\r\\n  // 3. 의존성이 변경된 경우 factory 함수 실행 및 결과 저장\\r\\n  if (depsRef.current === undefined || !_equals(depsRef.current, _deps)) {\\r\\n    depsRef.current = _deps;\\r\\n    resultRef.current = factory();\\r\\n  }\\r\\n\\r\\n  // 4. 메모이제이션된 값 반환\\r\\n  return resultRef.current as T;\\r\\n}\\r\\n\\r\\n```\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\ndeepEquals에서\\r\\n```\\r\\n  // 둘다 객체인 경우\\r\\n  // 배열인지 확인\\r\\n  if (Array.isArray(objA) && Array.isArray(objB)) {\\r\\n    if (objA.length !== objB.length) return false;\\r\\n    for (let i = 0; i < objA.length; i++) {\\r\\n      if (!deepEquals(objA[i], objB[i])) return false;\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n```\\r\\n객체 처리할 때 배열을 먼저 별도로 처리했는데요,\\r\\n구현할 때는 배열을 별도로 분기처리 안했더니 테스트코드를 통과하지 못해서 분기처리를 했었는데,,\\r\\n과연 정말 필요한 분기 처리였을까, 분기처리의 문제가 아니라 기존 로직 자체에 문제가 있었을 수도 있겠다하는 생각이 듭니다.\\r\\n\\r\\n### 학습 효과 분석\\r\\n** 가장 큰 배움이 있었던 부분 **\\r\\nReact의 렌더링 최적화 메커니즘을 이해하게 되었습니다. 특히 의존성 배열의 비교 방식과 메모이제이션의 실제 동작 원리를 알 수 있었습니다.\\r\\n\\r\\n** 추가 학습이 필요한 영역 **\\r\\n복잡한 타입스크립트 이슈가 발생하면 타입 단언으로 처리하거나 타입 오류를 해결해달라고 AI에게 요청..해서 해결했는데, 이에 대한 추가적인 학습이 필요할 것 같습니다. \\r\\n개인적으로는 과제를 다 진행하고 나니, 실무에서 사용하고 있는 Vue의 동작 원리와 내부 구현도 궁금해졌습니다.  \\r\\n\\r\\n### 과제 피드백\\r\\n앞에서 구현한 함수를 그 다음 함수를 구현하는데 사용하도록 설계되어 왜 이렇게 동작해야 하는지를 명확히 이해할 수 있어서 좋았습니다. 또한 실제 React 내부 구현과 유사한 방식으로 설계되어 리액트 deep dive 경험을 할 수 있어서 좋았습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n리액트의 렌더링 과정: \\r\\n리액트는 상태(state)나 props가 변경되었을 때 컴포넌트를 다시 렌더링합니다.\\r\\n- 트리거 > setState 혹은 부모 컴포넌트로부터 전달받은 props가 변경되면 해당 컴포넌트가 다시 렌더링됩니다.\\r\\n- 렌더 > JSX를 기반으로 새로운 Virtual DOM을 생성합니다.이 과정은 순수 함수처럼 작동하며, 화면에 아무것도 그리지 않습니다.\\r\\n- 조정 (Reconciliation) > diff 알고리즘을 사용해서 이전 Virtual DOM과 새로운 Virtual DOM을 비교하여 변경점을 찾습니다.\\r\\n- 커밋 > 변경된 부분만 실제 브라우저 DOM에 적용합니다.\\r\\n\\r\\n리액트의 렌더링 최적화 방법:\\r\\n- useMemo > 무거운 연산 결과를 캐싱해서, 의존성이 변경되지 않으면 다시 계산하지 않습니다.\\r\\n- useCallback > 함수를 메모이제이션하여, 불필요하게 새로운 함수 인스턴스를 생성하지 않도록 합니다. 자식 컴포넌트에 함수를 props로 넘길 때 유용합니다.\\r\\n- React.memo > 컴포넌트를 메모이제이션하여, props가 바뀌지 않으면 리렌더링하지 않도록 합니다.\\r\\n\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n메모이제이션이 필요한 경우:\\r\\n- 비용이 큰 계산이 반복될 때 > 예를 들어, 무거운 연산을 수행하는 함수가 렌더링마다 실행된다면 useMemo를 사용해 계산을 캐싱할 수 있습니다.\\r\\n- 자식 컴포넌트의 불필요한 리렌더링을 방지할 때 > React.memo를 통해 props가 변경되지 않았을 때 자식 컴포넌트의 리렌더링을 막을 수 있습니다.\\r\\n\\r\\n장점: \\r\\n- 성능 최적화 > 불필요한 계산, 불필요한 컴포넌트 렌더링을 방지할 수 있습니다.\\r\\n- 예측 가능한 렌더링 > 의존성 배열을 명시함으로써, 어떤 조건에서 계산이 다시 수행되는지 명확해집니다.\\r\\n \\r\\n단점: \\r\\n- 메모리 사용량 증가 > 캐시된 값을 메모리에 보관하므로, 리소스를 추가로 사용하게 됩니다.\\r\\n- 복잡성 증가 > 로직을 분석할 때 메모이제이션된 값을 따로 추적해야 하는 경우가 생깁니다.\\r\\n\\r\\n제가 생각하는 사용법:\\r\\n- 성능 문제가 실제로 발생했을 때 적용하기...? \\r\\n   useMemo는 언제 사용하면 좋을지 조금 감이 오는 것 같은데, React.memo는 언제 적용해야 할지 판단이 어렵습니다...\\r\\n- 만약 메모이제이션을 사용한다면 의존성 배열을 정확히 관리할 것\\r\\n\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n컨텍스트와 상태관리가 필요한 이유:\\r\\n- React는 기본적으로 단방향 데이터 흐름을 갖기 때문에, 상위 컴포넌트에서 하위 컴포넌트로 props를 계속 전달해야 합니다. 여러 컴포넌트에서 공통으로 사용하는 전역 상태가 생겼을 때 Context API나 상태 관리 라이브러리를 통해 상태를 전역으로 공유할 수 있습니다.\\r\\n\\r\\n컨텍스트와 상태관리를 사용하지 않으면 발생하는 문제:\\r\\n- Prop drilling: 중간에 쓰지도 않는 컴포넌트들이 props를 전달만 하게 됩니다\\r\\n- 상태의 일관성 문제: 여러 컴포넌트가 동일한 데이터를 따로따로 관리하면 서로 동기화가 되지 않아 UI가 일관되지 않게 됩니다.\\r\\n\\r\\n사용했을 때의 장점:\\r\\n- 전역적으로 상태를 공유할 수 있음: 여러 컴포넌트에서 동일한 상태를 쉽게 참조하고 수정할 수 있습니다.\\r\\n- 구조가 간결해짐: 중간 단계 컴포넌트에서 props를 전달할 필요가 없어지고, 로직이 분리되어 코드가 더 깔끔해집니다.\\r\\n\\r\\n사용했을 때의 단점:\\r\\n- 렌더링 성능 이슈: Context의 값이 바뀌면 해당 컨텍스트를 구독하고 있는 모든 컴포넌트가 리렌더링됩니다.\\r\\n- 남용 시: 모든 상태를 Context로 관리하면, 흐름 추적이 어려워지고 디버깅이 힘들 수 있습니다.\\r\\n\\r\\n사용 시 주의할 점:\\r\\n- 진짜 전역 상태만 Context로 관리할 것: 예를 들어 다크모드 설정이나 로그인 정보처럼 앱 전반에 영향을 주는 상태만 Context로 사용하는 것이 좋습니다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n1. 동작에는 아무런 차이가 없겠지만, useMemo에서 의존성 배열에 대한 depsRef와 factory 실행 결과를 저장하는 resultRef를 하나의 객체로 두는게 더 좋은 구조일지에 대한 고민을 했습니다.\\r\\n저는 \\r\\n```\\r\\n  const depsRef = useRef<DependencyList | undefined>(undefined);\\r\\n  const resultRef = useRef<T | undefined>(undefined);\\r\\n```\\r\\n이렇게 별도로 두긴 했는데요, (이유는.. 객체로 다루는 것이 비교 등등에서 신경 쓸 포인트가 늘어날 수도 있겠다...는 생각이었습니다)\\r\\n\\r\\n``` \\r\\n\\tconst memoRef =  useRef<{ deps: DependencyList | undefined; result: T | undefined }>({\\r\\n    deps: undefined, // 이전 의존성\\r\\n    result: undefined, // 결과\\r\\n  });\\r\\n```\\r\\n이렇게 하나의 객체로 두는 것이 더 나은 구조인지, 코치님께서는 어떤 방식을 선호하시는지 궁금합니다.\\r\\n\\r\\n2. 타입스크립트가 최대한 알아서 추론하게 두고, 타입 단언은 지양해라! 라는 내용을 늘 생각하면서 개발하고자 하는데요,\\r\\n과제 구현 과정에서 타입 이슈 해결을 위해서 타입 단언을 사용한 부분이 꽤 있습니다.\\r\\n이 중에서 특히 useMemo의 return 에서 한 타입 단언이 안전한지 궁금합니다.","created_at":"2025-07-20T23:20:11Z","updated_at":"2025-07-26T05:15:30Z","closed_at":null,"merged_at":null,"merge_commit_sha":"85d9ce0d29109ce28785f623f566cab2d77917a8","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/32/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/32/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/32/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/84e475d84ea6e02dccd61f95053954cd969a3d01","head":{"label":"Elli-Lee:main","ref":"main","sha":"84e475d84ea6e02dccd61f95053954cd969a3d01","user":{"login":"Elli-Lee","id":159514073,"node_id":"U_kgDOCYH92Q","avatar_url":"https://avatars.githubusercontent.com/u/159514073?v=4","gravatar_id":"","url":"https://api.github.com/users/Elli-Lee","html_url":"https://github.com/Elli-Lee","followers_url":"https://api.github.com/users/Elli-Lee/followers","following_url":"https://api.github.com/users/Elli-Lee/following{/other_user}","gists_url":"https://api.github.com/users/Elli-Lee/gists{/gist_id}","starred_url":"https://api.github.com/users/Elli-Lee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Elli-Lee/subscriptions","organizations_url":"https://api.github.com/users/Elli-Lee/orgs","repos_url":"https://api.github.com/users/Elli-Lee/repos","events_url":"https://api.github.com/users/Elli-Lee/events{/privacy}","received_events_url":"https://api.github.com/users/Elli-Lee/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022628988,"node_id":"R_kgDOPPQUfA","name":"front_6th_chapter1-3","full_name":"Elli-Lee/front_6th_chapter1-3","private":false,"owner":{"login":"Elli-Lee","id":159514073,"node_id":"U_kgDOCYH92Q","avatar_url":"https://avatars.githubusercontent.com/u/159514073?v=4","gravatar_id":"","url":"https://api.github.com/users/Elli-Lee","html_url":"https://github.com/Elli-Lee","followers_url":"https://api.github.com/users/Elli-Lee/followers","following_url":"https://api.github.com/users/Elli-Lee/following{/other_user}","gists_url":"https://api.github.com/users/Elli-Lee/gists{/gist_id}","starred_url":"https://api.github.com/users/Elli-Lee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Elli-Lee/subscriptions","organizations_url":"https://api.github.com/users/Elli-Lee/orgs","repos_url":"https://api.github.com/users/Elli-Lee/repos","events_url":"https://api.github.com/users/Elli-Lee/events{/privacy}","received_events_url":"https://api.github.com/users/Elli-Lee/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/Elli-Lee/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/Elli-Lee/front_6th_chapter1-3/deployments","created_at":"2025-07-19T13:39:43Z","updated_at":"2025-07-24T13:41:56Z","pushed_at":"2025-07-24T13:41:52Z","git_url":"git://github.com/Elli-Lee/front_6th_chapter1-3.git","ssh_url":"git@github.com:Elli-Lee/front_6th_chapter1-3.git","clone_url":"https://github.com/Elli-Lee/front_6th_chapter1-3.git","svn_url":"https://github.com/Elli-Lee/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":298,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/32"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/32"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/32"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/32/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/32/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/32/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/84e475d84ea6e02dccd61f95053954cd969a3d01"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/33","id":2680331588,"node_id":"PR_kwDOPMCTuc6fwp1E","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/33","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/33.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/33.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/33","number":33,"state":"open","locked":false,"title":"[1팀 주산들] Chapter 1-3. React, Beyond the Basics","user":{"login":"DEV4N4","id":94872442,"node_id":"U_kgDOBaejeg","avatar_url":"https://avatars.githubusercontent.com/u/94872442?v=4","gravatar_id":"","url":"https://api.github.com/users/DEV4N4","html_url":"https://github.com/DEV4N4","followers_url":"https://api.github.com/users/DEV4N4/followers","following_url":"https://api.github.com/users/DEV4N4/following{/other_user}","gists_url":"https://api.github.com/users/DEV4N4/gists{/gist_id}","starred_url":"https://api.github.com/users/DEV4N4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DEV4N4/subscriptions","organizations_url":"https://api.github.com/users/DEV4N4/orgs","repos_url":"https://api.github.com/users/DEV4N4/repos","events_url":"https://api.github.com/users/DEV4N4/events{/privacy}","received_events_url":"https://api.github.com/users/DEV4N4/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://dev4n4.github.io/front_6th_chapter1-3/\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n### equalities\\r\\n\\r\\n- [x]  shallowEquals 구현 완료\\r\\n- [x]  deepEquals 구현 완료\\r\\n\\r\\n### hooks\\r\\n\\r\\n- [x]  useRef 구현 완료\\r\\n- [x]  useMemo 구현 완료\\r\\n- [x]  useCallback 구현 완료\\r\\n- [x]  useDeepMemo 구현 완료\\r\\n- [x]  useShallowState 구현 완료\\r\\n- [x]  useAutoCallback 구현 완료\\r\\n\\r\\n### High Order Components\\r\\n\\r\\n- [x]  memo 구현 완료\\r\\n- [x]  deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n### hooks\\r\\n\\r\\n- [x]  createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x]  useShallowSelector 구현\\r\\n- [x]  useStore 구현\\r\\n- [x]  useRouter 구현\\r\\n- [x]  useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x]  ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\nReact의 Hook들에 대해 deepdive 해보는 계기가 되어서 좋았다.\\r\\nHook들은 당연히 JS로 구현이 되어 있었겠지만… Hook을 직접! JS로 작성해 볼 수도 있다는 생각은 안해봤는데 이렇게 과제로 제시받아 직접 해보니까 이해도가 올라가고 Hook의 내부 구조에 대해 고민해보고 알 수 있게 되어서 정말 좋았다..\\r\\n\\r\\n나는 기초가 부족한 편이었다고 스스로 생각하고 있었기도 해서 이번 기회에 보완하는 데 많은 도움을 받았던 것 같다.\\r\\n\\r\\n## 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 👍 새로 학습한 개념 \\r\\n\\r\\n### [Object.is](http://object.is/)\\r\\n\\r\\nhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/is\\r\\n\\r\\n이번 과제에서 많이 사용했던 메서드이고 == 연산자, === 연산자와 어떤 점이 다른지에 대해 잘 아는 계기가 되었던 것 같다.\\r\\n\\r\\n- == 연산자와의 차이점\\r\\n    - `==`\xA0연산자는 같음을 테스트하기 전에 양 쪽(이 같은 형이 아니라면)에 다양한 강제(coercion)를 적용하지만(`\\"\\" == false`가\xA0`true`가 되는 것과 같은 행동을 초래),\xA0`Object.is`는 어느 값도 강제하지 않습니다.\\r\\n- === 연산자와의 차이점\\r\\n    - `Object.is()`는\xA0[===](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Strict_equality)\xA0연산자와도 같지 않습니다.\xA0`Object.is()`와\xA0`===`의 유일한 차이는 부호 있는 0과\xA0[NaN](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/NaN)\xA0값들의 처리입니다.\xA0`===`\xA0연산자(및\xA0`==`\xA0연산자)는 숫자값\xA0`-0`과\xA0`+0`을 같게 처리하지만,\xA0[NaN](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/NaN)은 서로 같지 않게 처리합니다.\\r\\n\\r\\n### Object.prototype.hasOwnProperty() 대신 Object.**hasOwn() 사용하기**\\r\\n\\r\\nhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\\r\\n\\r\\n지금까지 Object.prototype.hasOwnProperty()를 사용해 왔었는데, hasOwn을 사용하는게 권장된다는 걸 이번에 첨 알았다!\\r\\n\\r\\n> [Object.hasOwn()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn)\xA0가 권장됩니다.\xA0[hasOwnProperty()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)\xA0는 이를 지원하는 브라우저에서만 사용됩니다.\\r\\n> \\r\\n\\r\\n\\r\\n### 💪 기존 지식의 재발견/심화\\r\\n\\r\\n### useRef\\r\\n\\r\\nuseState를 활용해 useRef를 만들 수 있다는 것을 이번에 알았다!\\r\\n\\r\\n두 Hook에 대해 다 알고는 있었는데… 이렇게 구현될 수 있다는 것이 신기했고\\r\\n생각해보면 그렇지 싶은데 왜 지금까지는 별 생각이 없었을까… 사실 잘 몰랐던 게 아닐까 싶었다.\\r\\n\\r\\n**`const [value] = useState(...)`로 Setter 함수를 무시하면, 해당 객체를 변경해도 리렌더링이 발생하지 않는다.**\\r\\n\\r\\n- 일반적으로 `useState`를 사용하면 상태를 업데이트할 때 `setState`를 호출해 리렌더링을 유발하지만, 여기서는 **setter를 전혀 사용하지 않기** 때문에 `.current`만 변경해도 화면 갱신이 일어나지 않는다.\\r\\n즉, `value.current = 새로운값`처럼 직접 할당해도 React는 이 변경을 인지하지 않으므로 리렌더링을 하지 않는다.\\r\\n\\r\\n**위 방식은 공식 `useRef` 훅의 동작 원리와 같다.**\\r\\n\\r\\n- `useRef`는 **한 번만 생성된 객체**를 기억해 두었다가, 렌더링마다 동일한 객체를 반환한다. 그 객체의 `.current` 프로퍼티를 바꿔도 React가 다시 렌더링하지 않는다.\\r\\n- `useState`의 “초기 상태 유지” 특성을 활용해 **저장소**(ref)를 만든 것이다.\\r\\n\\r\\n### useMemo\\r\\n\\r\\nuseMemo가 이렇게 의존성들을 직접 비교 하면서 메모이제이션을 해주는 것이 신기했다. (생각해보면 비교가 당연히 들어갈텐데 그동안은 왜 이렇게 마법같이 막연하게 느껴졌었는지..?)\\r\\n\\r\\n```jsx\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n  // 직접 작성한 useRef를 통해서 만들어보세요.\\r\\n\\r\\n  // 1. 이전 의존성과 결과를 저장할 ref 생성\\r\\n  const ref = useRef<{\\r\\n    deps?: DependencyList;\\r\\n    result?: T;\\r\\n  }>({});\\r\\n\\r\\n  // 2. 현재 의존성과 이전 의존성 비교\\r\\n  // 3. 의존성이 변경된 경우 factory 함수 실행 및 결과 저장\\r\\n  if (!ref.current.deps || !_equals(ref.current.deps, _deps)) {\\r\\n    ref.current.deps = _deps;\\r\\n    ref.current.result = factory();\\r\\n  }\\r\\n\\r\\n  // 4. 메모이제이션된 값 반환\\r\\n  return ref.current.result as T;\\r\\n}\\r\\n```\\r\\n\\r\\n## 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n대체로 정답이 있는 코드들 같아서 자랑하고 싶은 코드가 크게 생각나지는 않는다.\\r\\n\\r\\n그래도 굳이 자랑할 코드를 생각해보자면 equal 함수들을 AI를 사용하지 않고 직접 생각하면서 구현했다는거..? 리팩토링도 한번 했다는거!?\\r\\n\\r\\n```tsx\\r\\n// shallowEquals 함수는 두 값의 얕은 비교를 수행합니다.\\r\\nexport const shallowEquals = (objA: unknown, objB: unknown) => {\\r\\n  // 1. 두 값이 정확히 같은지 확인 (참조가 같은 경우)\\r\\n  if (Object.is(objA, objB)) return true;\\r\\n\\r\\n  // 2. 둘 중 하나라도 객체가 아닌 경우 처리\\r\\n  if (objA === null || objB === null) return false;\\r\\n\\r\\n  if (Array.isArray(objA) && Array.isArray(objB)) {\\r\\n    if (objA.length !== objB.length) return false;\\r\\n\\r\\n    for (let i = 0; i < objA.length; i++) {\\r\\n      if (!Object.is(objA[i], objB[i])) return false;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  if (typeof objA === \\"object\\" && typeof objB === \\"object\\") {\\r\\n    // 3. 객체의 키 개수가 다른 경우 처리\\r\\n    const objAKeys = Object.keys(objA);\\r\\n    const objBKeys = Object.keys(objB);\\r\\n\\r\\n    if (objAKeys.length !== objBKeys.length) return false;\\r\\n\\r\\n    // 4. 모든 키에 대해 얕은 비교 수행\\r\\n    for (const key of objAKeys) {\\r\\n      if (!Object.is((objA as Record<string, unknown>)[key], (objB as Record<string, unknown>)[key])) return false;\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // 이 부분을 적절히 수정하세요.\\r\\n  return false;\\r\\n};\\r\\n```\\r\\n\\r\\n## 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n으음… 이것도 대체로 정답이 있는 코드를 정답의 원인을 찾아가면서 적어나갔던 거라 크게 생각이 나지 않는다.\\r\\n\\r\\n그래도 전반적으로 자잘하게 (변수명이라던가) 리팩토링을 해서 가독성을 좋게 만들면 더 좋지 않을까 하는 생각이 든다.\\r\\n\\r\\n## 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\nReact의 Hook들에 대해 deepdive 해 볼 수 있었던 시간이었던 것 같아서 좋았다.\\r\\n\\r\\n공식 문서를 정독하고, Hook들을 해부해 보면서 막연하게만 생각했던 구조가 현실적으로 다가와 이해도가 깊어졌던 것 같다.\\r\\n\\r\\n이전에는 뭐랄까 JS와 React를 따로 생각했었는데 지금은 React가 JS 코드로 어떻게 만들어졌는지를 보니까\\r\\n기초가 탄탄해서 라이브러리에 구애받지 않고 개발을 잘 하는 것에 대해서도 생각을 해보게 되는 것 같고…\\r\\n\\r\\n기초가 중요하다, JS에 대해서 깊게 이해하는 것이 중요하다 라고 말로만 듣고 실제로 체감해본 적은 없는데\\r\\n이번 과제들을 수행하며 왜 기초를 탄탄히 해야하는지 직접 체감하고(다 JS로 이루어져있구나 하고 실감이 가서), 앞으로 어떻게 공부를 해야 할 지에 대해서도 감을 잡을 수 있었던 것 같다.\\r\\n\\r\\n나중에 React나 기타 라이브러리들의 repo를 뜯어보고 싶다는 생각도 들었다!\\r\\n\\r\\n## 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n기초 과제가 너무 좋았어요! Hook에 대해서 깊은 이해를 할 수 있어서 정말 유익하고 진행하면서 배운 것도 많았어요. 이전 주차들과 연계되는 느낌이 들어서 이해도 빨랐어요!!\\r\\n\\r\\n심화 과제는 조금 어려웠어요.. AI의 도움을 받으면서 진행을 했고 잘 해결되긴 했으나 아직도 약간 헷갈리는 것 같아요.\\r\\n\\r\\nToast에서 좀 헤맸어요! “Context를 분리해야겠다!” 까지는 생각이 금방 도달했는데 useCallback을 쓸 지, useAutoCallback을 쓸 지, useMemo를 쓸 지 고민하고 이것저것 삽질을 했던 것 같아요.\\r\\n\\r\\n근데 삽질하면서 이전에 구현했던 부분들을 다시 읽어보면서 복습도 되고 좋았어요!\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n**리액트의 랜더링 과정**\\r\\n\\r\\n- 리액트는 상태(state)나 props가 변경되면 렌더링이 발생합니다.\\r\\n- 변경이 감지되면 Virtual DOM에서 새로운 트리(가상 노드)를 생성하고, 이전 Virtual DOM과 비교하는 Reconciliation 과정을 거칩니다.\\r\\n- 이때 실제 DOM에는 변경된 부분만 최소한으로 반영하여 브라우저의 성능을 최적화합니다.\\r\\n\\r\\n**리액트의 렌더링 최적화 방법**\\r\\n\\r\\n- `React.memo`, `useMemo`, `useCallback`을 활용해 불필요한 리렌더링을 방지할 수 있습니다.\\r\\n- 상태를 분리하거나, 컴포넌트를 나눠서 렌더링 범위를 줄이는 방식도 많이 사용됩니다.\\r\\n- `key` 값을 적절히 부여하거나 `shouldComponentUpdate`, `PureComponent`를 사용하는 것도 최적화 방법 중 하나입니다.\\r\\n\\r\\n**리액트의 렌더링과 관련된 개념**\\r\\n\\r\\n- **Virtual DOM**: 실제 DOM보다 가벼운 JavaScript 객체로, 변경 사항을 빠르게 계산할 수 있도록 도와줍니다.\\r\\n- **Reconciliation**: 이전 Virtual DOM과 새 Virtual DOM을 비교(diffing)하여 최소한의 변경만 실제 DOM에 반영하는 과정입니다.\\r\\n- **Batching**: 여러 상태 업데이트를 하나로 묶어 한 번에 처리함으로써 렌더링 횟수를 줄이는 기법입니다.\\r\\n\\r\\n**렌더링과 관련된 라이프사이클 & Hook**\\r\\n\\r\\n- 클래스 컴포넌트: `componentDidMount`, `shouldComponentUpdate`, `componentDidUpdate` 등\\r\\n- 함수형 컴포넌트: `useEffect`, `useMemo`, `useCallback`, `useLayoutEffect`, `useSyncExternalStore` 등\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n**메모이제이션**\\r\\n\\r\\n- 메모이제이션은 계산 비용이 높은 연산 결과를 재사용하기 위해 사용합니다.\\r\\n- `useMemo`, `useCallback`, `React.memo` 등으로 값이나 함수의 재생성을 방지할 수 있습니다.\\r\\n\\r\\n**메모이제이션이 언제 필요할까?**\\r\\n\\r\\n- 렌더링 시 무거운 계산이 자주 발생하는 경우\\r\\n- 동일한 props로 자식 컴포넌트가 자주 리렌더링 되는 경우\\r\\n- 콜백 함수가 자식 컴포넌트에 props로 전달될 때, 참조가 매번 바뀌는 걸 방지하고 싶을 때\\r\\n\\r\\n**메모이제이션을 사용하지 않으면?**\\r\\n\\r\\n- 렌더링이 자주 발생하고, 불필요한 연산으로 인해 성능 저하가 생길 수 있습니다.\\r\\n\\r\\n**장점**\\r\\n\\r\\n- 불필요한 연산/렌더링을 줄여 성능을 높일 수 있음\\r\\n- 렌더링 결과의 일관성을 유지할 수 있음\\r\\n\\r\\n**단점**\\r\\n\\r\\n- 코드 복잡도가 증가함\\r\\n- 의존성 배열 관리가 까다로울 수 있음\\r\\n- 너무 남용하면 오히려 성능이 저하될 수 있음\\r\\n\\r\\n**메모이제이션을 사용하지 않고도 해결할 수 있는 방법**\\r\\n\\r\\n- 렌더링 자체를 줄일 수 있는 구조로 컴포넌트를 쪼개거나 상태를 최적화하는 방향으로 설계하기\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n**컨텍스트와 상태관리가 필요한 이유**\\r\\n\\r\\n- 전역적으로 공유되는 값(예: 사용자 정보, 테마, 언어 등)을 여러 컴포넌트에서 편리하게 사용할 수 있게 해줍니다.\\r\\n- 깊은 컴포넌트 트리를 props drilling 없이 상태를 전달할 수 있게 해줍니다.\\r\\n\\r\\n**컨텍스트와 상태관리를 사용하지 않으면?**\\r\\n\\r\\n- props를 계속 전달하게 되면서 코드가 지저분해지고 유지보수가 어려워짐\\r\\n- 중첩된 컴포넌트에서 상태 접근이 비효율적임\\r\\n\\r\\n**장점**\\r\\n\\r\\n- 전역 상태 공유가 쉬워짐\\r\\n- 특정 도메인 상태를 분리하여 관리할 수 있음 (예: 로그인, UI, 토스트 등)\\r\\n\\r\\n**단점**\\r\\n\\r\\n- 남용하면 모든 컴포넌트가 렌더링되며 성능 저하 발생\\r\\n- 컨텍스트가 바뀔 때마다 해당 컨텍스트를 구독 중인 모든 컴포넌트가 리렌더링됨\\r\\n\\r\\n**컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법**\\r\\n\\r\\n- 컴포넌트 단위에서 상태를 관리하고, 필요한 경우에만 컨텍스트 사용하기\\r\\n- 전역 상태 관리 도구(Zustand, Redux 등)를 도입해 더 정교한 상태 관리 가능\\r\\n\\r\\n**사용할 때 주의할 점**\\r\\n\\r\\n- 실제로 전역으로 공유할 필요가 있는 데이터만 컨텍스트로 관리하기\\r\\n- 값 변경이 자주 발생하는 상태는 컨텍스트보다는 로컬 상태나 store 기반 접근이 더 유리함\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요.\\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n\\r\\n1. useMemo, useCallback, useAutoCallback을 구현할 때 마지막으로 값을 리턴할 때 타입 단언을 사용하여 “as T” 형식으로 리턴하였는데 이보다 나은 방법이 있을 지 궁금합니다. 약간 “any” 처럼 TS의 검사를 소홀히 하는 방식으로 빠져나간게 아닌가 싶어서요. 근데 보기에는 깔끔해 보이니 괜찮은가 싶기도 한데 TS의 의도대로 사용하지 못한 것 같기도 해서 자주 쓰면 안좋은 문법인가 하는 생각이 들기도 합니다. 코치님께서는 타입 단언을 사용하여 구현하는 것에 대해 어떻게 생각하시나요? 해당 케이스들에서는 어떻게 구현하는 것을 추천하시나요?\\r\\n\\r\\n2. ToastProvider 구현에 관한 질문입니다. 지금은 Context를 나누고, useMemo를 사용해서 최적화를 진행하였습니다. 그런데 이게 최선일지… 의도하신 대로 제가 문제를 잘 푼건지 궁금합니다. 뭔가 비슷한 형태의 코드가 반복되는 것도 같은데 반복되는 부분이 Context 선언하는 부분이니까 어쩔수 없나 싶기도 하면서도 여기서 조금 더 코드를 개선할 수도 있지 않을까 생각이 들기도 하네요. 여기서 조금 더 깔끔하고 예쁘게 코드를 고치려면 어떻게 나아가야 할까요?","created_at":"2025-07-21T01:02:22Z","updated_at":"2025-07-26T05:20:07Z","closed_at":null,"merged_at":null,"merge_commit_sha":"2564863e0889794ac06f19803f274a6062471c1e","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/33/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/33/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/33/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/f3847ec290c8f33b9b91e0f752806a87785e8f30","head":{"label":"DEV4N4:main","ref":"main","sha":"f3847ec290c8f33b9b91e0f752806a87785e8f30","user":{"login":"DEV4N4","id":94872442,"node_id":"U_kgDOBaejeg","avatar_url":"https://avatars.githubusercontent.com/u/94872442?v=4","gravatar_id":"","url":"https://api.github.com/users/DEV4N4","html_url":"https://github.com/DEV4N4","followers_url":"https://api.github.com/users/DEV4N4/followers","following_url":"https://api.github.com/users/DEV4N4/following{/other_user}","gists_url":"https://api.github.com/users/DEV4N4/gists{/gist_id}","starred_url":"https://api.github.com/users/DEV4N4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DEV4N4/subscriptions","organizations_url":"https://api.github.com/users/DEV4N4/orgs","repos_url":"https://api.github.com/users/DEV4N4/repos","events_url":"https://api.github.com/users/DEV4N4/events{/privacy}","received_events_url":"https://api.github.com/users/DEV4N4/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023306875,"node_id":"R_kgDOPP5sew","name":"front_6th_chapter1-3","full_name":"DEV4N4/front_6th_chapter1-3","private":false,"owner":{"login":"DEV4N4","id":94872442,"node_id":"U_kgDOBaejeg","avatar_url":"https://avatars.githubusercontent.com/u/94872442?v=4","gravatar_id":"","url":"https://api.github.com/users/DEV4N4","html_url":"https://github.com/DEV4N4","followers_url":"https://api.github.com/users/DEV4N4/followers","following_url":"https://api.github.com/users/DEV4N4/following{/other_user}","gists_url":"https://api.github.com/users/DEV4N4/gists{/gist_id}","starred_url":"https://api.github.com/users/DEV4N4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DEV4N4/subscriptions","organizations_url":"https://api.github.com/users/DEV4N4/orgs","repos_url":"https://api.github.com/users/DEV4N4/repos","events_url":"https://api.github.com/users/DEV4N4/events{/privacy}","received_events_url":"https://api.github.com/users/DEV4N4/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/DEV4N4/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/DEV4N4/front_6th_chapter1-3/deployments","created_at":"2025-07-21T00:46:02Z","updated_at":"2025-07-24T16:44:21Z","pushed_at":"2025-07-24T16:45:48Z","git_url":"git://github.com/DEV4N4/front_6th_chapter1-3.git","ssh_url":"git@github.com:DEV4N4/front_6th_chapter1-3.git","clone_url":"https://github.com/DEV4N4/front_6th_chapter1-3.git","svn_url":"https://github.com/DEV4N4/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":117,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/33"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/33"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/33"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/33/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/33/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/33/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/f3847ec290c8f33b9b91e0f752806a87785e8f30"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/34","id":2680579745,"node_id":"PR_kwDOPMCTuc6fxmah","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/34","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/34.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/34.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/34","number":34,"state":"open","locked":false,"title":"[8팀 김상수] Chapter 1-3. React, Beyond the Basics","user":{"login":"k-sang-soo","id":67569730,"node_id":"MDQ6VXNlcjY3NTY5NzMw","avatar_url":"https://avatars.githubusercontent.com/u/67569730?v=4","gravatar_id":"","url":"https://api.github.com/users/k-sang-soo","html_url":"https://github.com/k-sang-soo","followers_url":"https://api.github.com/users/k-sang-soo/followers","following_url":"https://api.github.com/users/k-sang-soo/following{/other_user}","gists_url":"https://api.github.com/users/k-sang-soo/gists{/gist_id}","starred_url":"https://api.github.com/users/k-sang-soo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/k-sang-soo/subscriptions","organizations_url":"https://api.github.com/users/k-sang-soo/orgs","repos_url":"https://api.github.com/users/k-sang-soo/repos","events_url":"https://api.github.com/users/k-sang-soo/events{/privacy}","received_events_url":"https://api.github.com/users/k-sang-soo/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://k-sang-soo.github.io/front_6th_chapter1-3\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n이번에도 최대한 AI를 사용하지 않고 풀려고 노력했고, 고민하는 시간을 갖고 해결 방법이 떠오르지 않는다면 그 때 AI에게 힌트를 받는 식으로 진행해서 뇌를 최대한 고통스럽게 괴롭혔다.. 괴롭지만 이렇게 뇌를 괴롭혀야 뇌가 발전한다고 어떤 뇌학자의 말씀! 기본과제에서는  막히는 부분이 많았지만 그래도 이해를 하려고 노력한 보람이 있는지 심화과제에서는 AI 도움 없이도 빨리 풀었다. 너무 짜릿했다 도파민 폭발! 그리고 이번에는 최대한 모든 문제해결의 모든 과정들을 문서화하려고 노력했다 향해 3주차에 이제서야 어떻게 공부를 해야될지 사아알짝 감이 잡힌것 같다.\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n- **useState, useRef**\\r\\n`useState` 를 그냥 아무 생각 없이 상태를 반응형으로 만들려고 사용했고 더 깊이 생각해보질 않았는데, useRef를 구현할 때 useState가 사용된다는 걸 보고, `useState`를 통해 몰랐던 리액트의 동작 원리들을 알게 돼서 너무 좋았습니다. lazy initialization 에 대해서도 알게 되고 어떻게 사용되는지 lazy initialization를 적용하지 않았을 때는 어떤 차이점이 있는지 알게 됐습니다.\\r\\n\\r\\n- **useMemo, useCallback**\\r\\n`useMemo`를 구현할 땐 `useRef`를 사용하고, `useCallback`을 구현할 땐 `useMemo`를 사용한다는 걸 알게 됐습니다. 리액트는 `useState` 와 `useRef`가 굉장히 중요한 hook 이였구나 깨달았습니다.  그리고 `useMemo`로 상태를 비교할 때 깊은 비교를 하지 않는 이이유와 리액트가 참조 비교를 원칙으로 하고 왜 그런지 깨닫게 됐습니다.\\r\\n\\r\\n- **useShallowState, useAutoCallback**\\r\\n참조 비교가 아닌 얕은 비교, 깊은 비교를 사용한다면 참조 비교와는 다르게 불필요한 리렌더링을 줄일 수 있구나 알게 됐습니다.\\r\\n\\r\\n\\r\\n- **useSyncExternalStore**\\r\\n리액트 18에서 새롭게 생긴 `useSyncExternalStore`를 사용해서 외부 상태를 구독해서 사용하는 방법을 깨달았다. 단순히 브라우저 API를 사용할 때 쓰면 좋다 라고만 인지하고 있었는데 실제로 써보고 어떤 문제를 해결하려고 나왔는지 찾아보니 유용하게 쓸 수 있는 hook 이라는 걸 깨달았습니다.\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n자랑하고 싶은 \\"코드\\"보다는 이번 과제를 제대로 습득하기 위해서 **어떤 고민과 생각을 하면서 문제를 해결했는지** 열심히 문서화하려고 노력했던 점이 스스로 자랑스럽다고 생각합니다! 정리를 잘했다고 보기는 어렵지만 **어떻게 공부해야 될지** 조금 깨달은 것 같고 향해를 하면서 공부하는 방법을 더욱 더 깨닫길 기원하면서 열심히 써봤습니다!\\r\\n\\r\\n여기에 제 모든 정수를 담았습니다!!!!\\r\\n[이번 과제 총 정리](https://github.com/k-sang-soo/front_6th_chapter1-3/issues)\\r\\n\\r\\n### 칭찬해주고 싶은 동료\\r\\n\\r\\n- **5팀의 이지훈**\\r\\n제가 useMemo로 한참 고민하고 있을 때 비록 다른 팀이지만 지훈님께서 \\"교수님\\"이라는 타이틀을 얻을 정도로 잘 설명해준다고 해서 여쭤보러가니 아주 흔쾌하게 시간을 내주시고 과제에 대한 핵심 개념과 힌트를 주셔서 풀 수 있게 됐습니다!!\\r\\n\\r\\n- **2팀의 유운우**\\r\\n사전 스터디 때 말씀을 나눠보니 윤우님께서 아는 게 많고, 실력도 뛰어나다는 인상을 받았습니다. 그래서 비록 다른 팀이지만 도움을 요청했고 흔쾌하게 시간을 내주셨습니다. 덕분에 `useShallowState` 와 심화 과제의 마지막 문제 `ToastProvider` 최적화를 할 수 있게 됐습니다!\\r\\n\\r\\n저도 이 두분에게 받은 좋은 시너지를 저희 팀에게 전달하고 싶어 제가 문서화한걸 공유해보기도 했습니다! 함께 성장하는 향해!!\\r\\n\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n개선이 필요하거나 코드 관련 고민은 리뷰 받고 싶은 내용 쪽에 적은 것과 동일합니다!\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n- **가장 큰 배움이 있었던 부분**\\r\\n리액트의 근간이 되는 `useState`에 대해 깊게 이해할 수 있었고, 단순히 상태를 반응형으로 만드는 도구로만 생각했었는데, 지금 생각하면 왜 이런 생각을 못했을까 라고 생각했던 리렌더링 사이에서도 값을 유지하는 원리를 알게된게 큰 수확이었습니다. 이 개념을 통해서 모든 hook들이 파생되는 것 같아 가장 큰 배움이었습니다.\\r\\n\\r\\n- **추가 학습이 필요한 영역**\\r\\n`useState`도 직접 구현해볼 수 있었으면 좋았을 것 같습니다. 물론 과제하면서 시간 남으면 해봐야지 라고 생각했지만 시간이 없었습니다ㅠㅠ\\r\\n나중에 꼭 직접 구현해보겠습니다.\\r\\n\\r\\n- **실무 적용 가능성**\\r\\n코드들에 대한 실무 적용 가능성보다 리액트의 동작 원리들을 이해했고 이런 동작 원리들을 바탕으로 설계할 때나 디버깅할 떄 매우 유용할 것 같습니다!\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n- 정답이 어느정도 정해져 있고 그 안에서만 고민할 수 있어서 집중하기 좋았습니다!\\r\\n- `useState` 를 직접 구현하는 것도 포함 되어있었더라면 좋았겠다 라고 생각했습니다. `useRef`를 만들기 위해서는 `useState` 가 필요하니 순서대로 생각하면 있는게 좋지 않았을까 생각이 듭니다. 아마도 코치님들께서도 분묭 생각 하셨을 것 같은데 어떤 이유 때문에 빠졌을 지 궁금합니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n리액트는 jsx 라는 특별한 문법을 통해 UI 구조를 선언하고, 이를 트랜스파일러가 `React.createElement` 호출로 `ReactElement` 객체를 만드는데, 이 때 객체를 가상 DOM이라고 불리는 내부 구조로 사용된다. \\r\\n최초 렌더링 시에는 이 Virtual DOM을 기반으로 실제 DOM을 생성하고, 이 후 props 나 state 가 변경되면 리렌더링이 일어나고, 변경된 Virtual DOM과 이전 Virtual DOM을  **diffing 알고리즘**을 통해 달라진 걸 비교해서 달라진 부분만 DOM에 반영한다. 이 과정을 **Reconciliation** 이라 부른다.\\r\\n\\r\\n리액트는 최적화하기 위해서는 **왜 리렌더링이 일어나는지**를 먼저 알아야 한다. 리렌더링이 일어나는 경우는 props, state, 부모 컴포넌트가 리렌더링되면  일어난다. 이 때 변**수나 함수를 참조 비교를 하게 되는데 이전과 동일하지 않는다면 변경이 일어난다**. 변경이 일어나지 않게 하기 위해서는 변수나 함수를 `useMemo`, `useCallback`, `memo`와 같은 **메모이제이션 도구를 활용해 참조를 유지**해주고, 의존성 값이 변했을 때만 새로 생성하게 해야된다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n메모이제이션에 대해서 항상 코드를 짤 때 적용해줘야 되나? 많은 고민들이 있었지만 리액트 공식문서나 여러 개발자들의 의견을 봤을 때 정말 필요하다고 느껴졌을 때 적용하라는 의견을 참고하여 **꼭 필요하다고 느껴질 때만 적용**하는 걸로 결정했다. 불필요한 리렌더링이 되는 것 처럼 보이지만 문제가 일어나지 않은 상황에서 이를 막기 위해 메모이제이션을 사용한다면  그것 또한 리소스를 잡아 먹기 때문에 정말 문제가 있을 때만 도입하자!\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n컨텍스트를 사용하면 **깊은 하위 컴포넌트까지 데이터를 전달**해주고, **여러 컴포넌트들 간의 상태를 공유**할 수 있어서 좋다. 하지만 컨텍스트를 사용하면 코드의 구조가 복잡해져서 읽기가 어려워지고, **상태가 변경되면 구독하고 있는 모든 컴포넌트가 리렌더링 되는 구조** 때문에 최적화가 필요하다면 최적화를 진행하기 까다롭다. Zustand, Jotai 같은 최적화도 잘 되어있고 사용하기도 쉬운 전역 상태 라이브러리들이 나와있어 컨텍스트를 사용할 일이 있을까 싶기도 하다. 물론 외부 라이브러리의 의존성이 없고 리액트의 api를 사용한다는게 장점이 될 수도 있지만!\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n1. **`useShallowState` 의 타입 부분 질문 드립니다!**\\r\\n\\r\\n처음에는 타입을 원래 구현 되어있던 `<T>(initialValue: Parameters<typeof useState<T>>[0])` 을 유지한 채 구현을 시도했습니다.\\r\\n\\r\\n```tsx\\r\\nexport const useShallowState = <T>(initialValue: Parameters<typeof useState<T>>[0]) => {\\r\\n  const [state, setState] = useState(initialValue);\\r\\n  const setValueShallow = useCallback((newValue: T) => {\\r\\n    setState((prevValue: T) => {\\r\\n      return shallowEquals(prevValue, newValue) ? prevValue : newValue;\\r\\n    });\\r\\n  }, []);\\r\\n\\r\\n  return [state, setValueShallow] as const;\\r\\n};\\r\\n\\r\\n```\\r\\n\\r\\n그런데 `setState((prevValue: T) => {`  부분에서 아래와 같은 **타입 에러**가 발생했습니다.\\r\\n\\r\\n```tsx\\r\\nTS2345: Argument of type (prevValue: T) => T is not assignable to parameter of type SetStateAction<undefined>\\r\\nType \'undefined\' is not assignable to type \'T\'\\r\\n```\\r\\n\\r\\n제가 이해한 바로는, **`T`에 `undefined`가 들어올 가능성을 타입스크립트가 열어두면서** `undefined`로 추론하게 되는 케이스까지 포함된 것 같습니다.\\r\\n\\r\\n그래서 결국 `initialValue`가 들어오는 순간 `T` 타입을 확정 하는 `<T>(initialValue: T | (() => T))` 으로 해결하긴 했습니다.\\r\\n\\r\\n```tsx\\r\\nexport const useShallowState = <T>(initialValue: T | (() => T)) => {\\r\\n  const [state, setState] = useState(initialValue);\\r\\n  const setValueShallow = useCallback((newValue: T) => {\\r\\n    setState((prevValue) => {\\r\\n      return shallowEquals(prevValue, newValue) ? prevValue : newValue;\\r\\n    });\\r\\n  }, []);\\r\\n\\r\\n  return [state, setValueShallow] as const;\\r\\n};\\r\\n```\\r\\n\\r\\n`<T>(initialValue: Parameters<typeof useState<T>>[0])` 을 사용하더라도 **안전하게 타입 추론을 맞추는 방법**이 있는지 여쭤보고 싶습니다!\\r\\n\\r\\n2. **`useAutoCallback` 의 타입 부분 질문 드립니다!**\\r\\n예를 들어 `fn`이 `(name: string, age: number) ⇒ string` 형태일 때 `useCallback` 안 의 args 타입을 맞추기 위해 `(...args: Parameters<T>): ReturnType<T>` 이렇게 타입을 지정했습니다.\\r\\n이런 식으로 작성하면 **타입이 정확한 매칭이 되지 않아 에러가 발생**해서, 결국 마지막에 `as T`로 **타입 단언**을 해야지만 에러가 사라졌습니다. \\r\\n근데 이렇게 **타입 단언 선언을 하는 것이 괜찮은 방법인지** 의문이 듭니다. 강제로 맞춘 느낌이 들고 any를 사용한것 같은 느낌이 들어 찝찝합니다. **더 안전하게 타입을 맞추는 방법**이 있을지 궁금합니다!\\r\\n\\r\\n```tsx\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  const fnRef = useRef(fn);\\r\\n  fnRef.current = fn;\\r\\n\\r\\n  return useCallback((args: Parameters<T>): ReturnType<T> => {\\r\\n    return fnRef.current(...args);\\r\\n  }, []) as T;\\r\\n};\\r\\n```\\r\\n\\r\\n3. `useShallowState` 나 `useAutoCallback` 같은 훅들의 목적은 괜찮다고 생각은 들지만, 리액트는 기본적으로 **참조 비교로 리렌더링 여부를 판단**하고, 이런 동작은 성능을 위한 최적화이기도 하지만, **예측 가능한 동작과 불변성을 유지**하기 위한 철학이라고 알고 있습니다. \\r\\n그래서 `useShallowState` 나 `useAutoCallback` 처럼 **동작을 바꾸는 훅을 그냥 써도 될까?** 라는 고민이 들었고 리액트 철학과 어긋나는 건 아닐까 싶은 생각이 들었습니다.\\r\\n혹시 실무에서 자주 사용하시거나 특정 상황에서만 제한적으로 사용하는 편이신가요? 예를 들어 어떤 상황에서 사용할 수 있을까요? 사용하신다면 사이드 이펙트가 생긴 적은 없나요? 깊은 지식이 부족해서 이게 써도 괜찮은 도구인지 판단이 잘 안서서 여쭤봅니다!\\r\\n\\r\\n4. 고차 컴포넌트나 고차 함수는 잘 활용하면 **코드의 유연성과 재사용성 측면에서 굉장히 유익**하다고 생각합니다. 하지만 막상 이런 방식으로 작성된 코드를 읽을 때는 **한 번에 이해하기가 어려운 경우**가 많습니다.\\r\\n개인적으로 **좋은 코드는 읽기 쉬운 코드도 중요한 요소**라고 생각하는데, 그런 점에서 고차 컴포넌트나 고차 함수가 반드시 좋은 코드라고 말할 수 있을 지 고민됩니다. 그냥 **제가 익숙하지 않아서 그렇게 느끼는 걸까요?**\\r\\n실무에서도 이런 고차 컴포넌트나 고차 함수를 자주 사용하시는지, 만약 신입 개발자가 새로 들어온다면 이런 구조를 바로 이해하기는 어려울 것 같은데 이런 경우에는 어떻게 도와주거나 가이드하시는 지 궁금합니다!","created_at":"2025-07-21T04:35:31Z","updated_at":"2025-07-28T07:37:46Z","closed_at":null,"merged_at":null,"merge_commit_sha":"442d22dea742fad562b3731511fc100601ef411f","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/34/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/34/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/34/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/c9b688c840dfcc71f3d594b077a56233abb880e7","head":{"label":"k-sang-soo:main","ref":"main","sha":"c9b688c840dfcc71f3d594b077a56233abb880e7","user":{"login":"k-sang-soo","id":67569730,"node_id":"MDQ6VXNlcjY3NTY5NzMw","avatar_url":"https://avatars.githubusercontent.com/u/67569730?v=4","gravatar_id":"","url":"https://api.github.com/users/k-sang-soo","html_url":"https://github.com/k-sang-soo","followers_url":"https://api.github.com/users/k-sang-soo/followers","following_url":"https://api.github.com/users/k-sang-soo/following{/other_user}","gists_url":"https://api.github.com/users/k-sang-soo/gists{/gist_id}","starred_url":"https://api.github.com/users/k-sang-soo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/k-sang-soo/subscriptions","organizations_url":"https://api.github.com/users/k-sang-soo/orgs","repos_url":"https://api.github.com/users/k-sang-soo/repos","events_url":"https://api.github.com/users/k-sang-soo/events{/privacy}","received_events_url":"https://api.github.com/users/k-sang-soo/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023308441,"node_id":"R_kgDOPP5ymQ","name":"front_6th_chapter1-3","full_name":"k-sang-soo/front_6th_chapter1-3","private":false,"owner":{"login":"k-sang-soo","id":67569730,"node_id":"MDQ6VXNlcjY3NTY5NzMw","avatar_url":"https://avatars.githubusercontent.com/u/67569730?v=4","gravatar_id":"","url":"https://api.github.com/users/k-sang-soo","html_url":"https://github.com/k-sang-soo","followers_url":"https://api.github.com/users/k-sang-soo/followers","following_url":"https://api.github.com/users/k-sang-soo/following{/other_user}","gists_url":"https://api.github.com/users/k-sang-soo/gists{/gist_id}","starred_url":"https://api.github.com/users/k-sang-soo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/k-sang-soo/subscriptions","organizations_url":"https://api.github.com/users/k-sang-soo/orgs","repos_url":"https://api.github.com/users/k-sang-soo/repos","events_url":"https://api.github.com/users/k-sang-soo/events{/privacy}","received_events_url":"https://api.github.com/users/k-sang-soo/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/k-sang-soo/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/k-sang-soo/front_6th_chapter1-3/deployments","created_at":"2025-07-21T00:52:03Z","updated_at":"2025-07-24T11:58:24Z","pushed_at":"2025-07-24T11:57:05Z","git_url":"git://github.com/k-sang-soo/front_6th_chapter1-3.git","ssh_url":"git@github.com:k-sang-soo/front_6th_chapter1-3.git","clone_url":"https://github.com/k-sang-soo/front_6th_chapter1-3.git","svn_url":"https://github.com/k-sang-soo/front_6th_chapter1-3","homepage":"https://k-sang-soo.github.io/front_6th_chapter1-3","size":296,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":11,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":11,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/34"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/34"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/34"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/34/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/34/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/34/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/c9b688c840dfcc71f3d594b077a56233abb880e7"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/35","id":2680598709,"node_id":"PR_kwDOPMCTuc6fxrC1","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/35","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/35.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/35.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/35","number":35,"state":"open","locked":false,"title":"[6팀 김수현] Chapter 1-3. React, Beyond the Basics","user":{"login":"suhyeon57","id":104812227,"node_id":"U_kgDOBj9Oww","avatar_url":"https://avatars.githubusercontent.com/u/104812227?v=4","gravatar_id":"","url":"https://api.github.com/users/suhyeon57","html_url":"https://github.com/suhyeon57","followers_url":"https://api.github.com/users/suhyeon57/followers","following_url":"https://api.github.com/users/suhyeon57/following{/other_user}","gists_url":"https://api.github.com/users/suhyeon57/gists{/gist_id}","starred_url":"https://api.github.com/users/suhyeon57/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/suhyeon57/subscriptions","organizations_url":"https://api.github.com/users/suhyeon57/orgs","repos_url":"https://api.github.com/users/suhyeon57/repos","events_url":"https://api.github.com/users/suhyeon57/events{/privacy}","received_events_url":"https://api.github.com/users/suhyeon57/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://suhyeon57.github.io/front_6th_chapter1-3/\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n```js\\r\\nconst ref = useRef<{ deps: DependencyList; value: T }>({\\r\\n  deps: _deps,\\r\\n  value: factory(), // 매 렌더마다 실행됨!\\r\\n});\\r\\n```\\r\\n\\r\\nuseMemo를 처음에는 이렇게 구현했는데, 매 렌더마다 실행되는 오류를 가지고 있었다. 의존성에 상관없이 실행되니 useMemo의 역할을 하지 못하는 상황이 발생\\r\\n\\r\\n다시 제대로 구현 \\r\\n```js\\r\\nconst ref = useRef<{ deps: DependencyList; value: T } | null>(null);\\r\\n  if (!ref.current || !_equals(ref.current.deps, _deps)) {\\r\\n    ref.current = {\\r\\n      deps: _deps,\\r\\n      value: factory(),\\r\\n    };\\r\\n  }\\r\\n```\\r\\n\\r\\nuseShallowState.js\\r\\n```js\\r\\nimport { useState, useCallback } from \\"react\\";\\r\\nimport { shallowEquals } from \\"../equals\\";\\r\\n\\r\\nexport const useShallowState = <T>(initialValue: Parameters<typeof useState<T>>[0]) => {\\r\\n  const [first, setFirst] = useState(initialValue);\\r\\n  const customSetState = useCallback((next: T) => {\\r\\n    setFirst((prev) => {\\r\\n      if (!shallowEquals(prev, next)) {\\r\\n        return next;\\r\\n      }\\r\\n      return prev;\\r\\n    });\\r\\n  }, []);\\r\\n  return [first, customSetState] as const;\\r\\n};\\r\\n```\\r\\n\\r\\n이 코드에서 타입을 명확하게 지정해서 타입스크립트 오류를 방지 위해 아래처럼 변경\\r\\n\\r\\n```js\\r\\nimport { useState, useCallback } from \\"react\\";\\r\\nimport { shallowEquals } from \\"../equals\\";\\r\\n//얕은 비교를 통해 상태를 관리 \\r\\nexport const useShallowState = <T>(initialValue: T) => {\\r\\n  const [first, setFirst] = useState<T>(initialValue);\\r\\n  const customSetState = useCallback((next: T) => {\\r\\n    setFirst((prev) => {\\r\\n      if (!shallowEquals(prev, next)) {\\r\\n        return next;\\r\\n      }\\r\\n      return prev;\\r\\n    });\\r\\n  }, []);\\r\\n  return [first, customSetState] as const;\\r\\n};\\r\\n```\\r\\n\\r\\n\\r\\nToastProvider.tsx\\r\\n\\r\\n```js\\r\\nexport const ToastProvider = memo(({ children }: PropsWithChildren) => {\\r\\n  const [state, dispatch] = useReducer(toastReducer, initialState);\\r\\n  const { show, hide } = createActions(dispatch);\\r\\n  const visible = state.message !== \\"\\";\\r\\n\\r\\n  const hideAfter = debounce(hide, DEFAULT_DELAY);\\r\\n\\r\\n  const showWithHide: ShowToast = useCallback((...args) => {\\r\\n    show(...args);\\r\\n    hideAfter();\\r\\n  }, []);\\r\\n\\r\\n  const contextValue = useMemo(() => ({ ...state, show: showWithHide, hide }), [state, showWithHide, hide]);\\r\\n\\r\\n  return (\\r\\n    <ToastContext value={contextValue}>\\r\\n      {children}\\r\\n      {visible && createPortal(<Toast />, document.body)}\\r\\n    </ToastContext>\\r\\n  );\\r\\n});\\r\\n```\\r\\n\\r\\n처음 시도한 코드는  useCallback과 useMemo를 설정해줬다. 하지만, Context value 객체가 바뀌면 하위 컴포넌트가 리렌더링 되는 현상이 발생했다.\\r\\n두 번째 방법으로 useRef로 show/hide를 고정해도, state가 바뀌면 Context value가 바뀌어 리렌더링 되는 문제점을 발견했다.\\r\\n그래서 action과 state Context를 분리해야 하며,\\r\\n하위 컴포넌트가 action만 구독하면 show/hide가 변하지 않는 한 리렌더링되지 않는 것을 알게 되었다.\\r\\nstate는 토스트 메시지 변화에만 영향을 주도록 분리하고, (state는 메세지가 바뀔 때를 위해 분리를 해주어야 한다.)\\r\\n하위 컴포넌트들은 action 요소만 구독을 하기 때문에 show와 hide가 변하지 않으면 다시 렌더링이 되지 않는다.\\r\\n\\r\\n수정 코드\\r\\n```js\\r\\n//action context 설정\\r\\nconst ToastActionsContext = createContext<{\\r\\n  show: ShowToast;\\r\\n  hide: Hide;\\r\\n}>({\\r\\n  show: () => null,\\r\\n  hide: () => null,\\r\\n});\\r\\n\\r\\n//state context 설정\\r\\nconst ToastStateContext = createContext<{\\r\\n  message: string;\\r\\n  type: ToastType;\\r\\n}>({\\r\\n  ...initialState,\\r\\n});\\r\\n```\\r\\n```js\\r\\n  const { show, hide } = useRef(createActions(dispatch)).current; //useRef를 사용하였기 때문에 리렌더링과 무관하게 고정된 값 유지\\r\\n```\\r\\n```js\\r\\n  return (\\r\\n    <ToastActionsContext value={context}>\\r\\n      <ToastStateContext value={state}>\\r\\n        {children}\\r\\n        {visible && createPortal(<Toast />, document.body)}\\r\\n      </ToastStateContext>\\r\\n    </ToastActionsContext>\\r\\n  );\\r\\n```\\r\\n### 자랑하고 싶은 코드\\r\\n아직은 없는 것 같습니다. 리팩토링을 통해 제 코드로 다시 만들 생각입니다. \\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n이번 과제를 통해 실무에서 성능 최적화를 위한 훅 사용법을 더 명확히 이해할 수 있었습니다. 특히, 어떤 상황에서 어떤 훅을 사용해야 하는지를 고민해보는 계기가 되어 좋았습니다.\\r\\n하지만 아직도 훅들이 언제, 어디서 적절하게 사용되는지에 대한 감각은 부족하다고 느꼈습니다.\\r\\n이를 보완하기 위해 벨로그에 직접 정리하며 복습할 예정입니다. 이러한 과정을 통해 실무에 더 효과적으로 적용할 수 있을 것이라 기대하고 있습니다.\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n**ToastProvider.tsx**\\r\\n(useContext에 대해)\\r\\n\\r\\ncontext는 props drilling 없이 컴포넌트 트리 전체에 데이터를 제공 \\r\\n\\r\\n\\r\\n```js\\r\\n//state context 설정\\r\\nconst ToastStateContext = createContext<{\\r\\n  message: string;\\r\\n  type: ToastType;\\r\\n}>({\\r\\n  ...initialState,\\r\\n});\\r\\n\\r\\n//action context 설정\\r\\nconst ToastActionsContext = createContext<{\\r\\n  show: ShowToast;\\r\\n  hide: Hide;\\r\\n}>({\\r\\n  show: () => null,\\r\\n  hide: () => null,\\r\\n});\\r\\n```\\r\\n--> 초기값 설정 시 provider 없이 사용할 수 있다. \\r\\n초기값 없이 사용할 시 provider 컴포넌트를 생성하고, 커스텀 훅에서 예외 처리를 해줘야 한다.\\r\\n\\r\\n```js\\r\\n<ToastActionsContext value={context}>\\r\\n  <ToastStateContext value={state}>\\r\\n    {children}\\r\\n    {visible && createPortal(<Toast />, document.body)}\\r\\n  </ToastStateContext>\\r\\n</ToastActionsContext>\\r\\n```\\r\\n현재 코드에서 provider 컴포넌트가 없는 이유는 초기값을 설정해주었기 때문이다.\\r\\n\\r\\n커스텀 훅 \\r\\n```js\\r\\nexport const useToastCommand = () => {\\r\\n  const { show, hide } = useContext(ToastActionsContext);\\r\\n  return { show, hide };\\r\\n};\\r\\n\\r\\nexport const useToastState = () => {\\r\\n  const { message, type } = useContext(ToastStateContext);\\r\\n  return { message, type };\\r\\n};\\r\\n```\\r\\n--> 자주 사용하는 로직을 커스텀 훅으로 묶어서 사용한다. 외부에서도 사용할 수 있다.\\r\\n커스텀 훅으로 사용했기 때문에 외부에서도 아래처럼 사용이 가능하다. \\r\\n```js\\r\\nconst toast = useToastCommand();\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\nReact Hook을 실무에서 사용할 때에는 제대로 알지 못하고 쓰는 기분이 들었는데, 어떤 부분에서 렌더링이 최적화 되는지 깊게 파악할 수 있어서 좋았습니다. \\r\\n그리고, 과제에서 다룬 내용을 실무에도 바로 적용해 보았습니다.\\r\\n기존 윈도우 크기 추적 로직을 useSyncExternalStore를 활용해 리팩토링했고, 보다 안정적이고 예측 가능한 방식으로 개선할 수 있었습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요. \\r\\nReact의 렌더링은 Virtual DOM(가상 DOM) 을 기반으로 동작합니다. 컴포넌트의 상태(state)나 props가 변경되면, React는 변경된 값을 기반으로 새로운 Virtual DOM을 생성합니다.\\r\\n\\r\\n이후 이전 Virtual DOM과 새 Virtual DOM을 비교(diff 알고리즘)하여 변경된 부분만 찾아 실제 DOM에 최소한으로 반영합니다. 이 과정을 통해 DOM 조작의 비용을 줄이고 성능을 최적화합니다.\\r\\n\\r\\n또한 React에서는 useMemo, useCallback, React.memo 등과 같은 메모이제이션 기법을 통해 불필요한 렌더링을 줄일 수 있습니다.\\r\\n\\r\\n그리고 useEffect 등의 Hook을 통해 렌더링 이후의 사이드 이펙트 처리를 제어할 수 있으며, 이 역시 렌더링 흐름에서 중요한 역할을 합니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n### 메모제이션에 대한 나의 생각을 적어주세요.\\r\\n메모이제이션은 동일한 연산이 반복될 때 성능을 최적화할 수 있는 중요한 기법이라고 생각합니다. 이를 사용하지 않으면 불필요한 렌더링이나 계산이 발생할 수 있고, 결과적으로 앱 성능에 영향을 줄 수 있습니다.\\r\\n\\r\\n특히 useMemo는 계산 비용이 큰 연산 결과를 캐싱하는 데 유리해서, 단순히 값을 보존하는 useRef보다 성능 측면에서 더 적절할 수 있습니다.\\r\\n\\r\\n실제로 ToastProvider 과제를 진행하면서 메모이제이션을 통해 리렌더링을 줄이고 성능을 향상시킬 수 있다는 점을 체감했습니다.\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\nContext는 props drilling 없이 컴포넌트 트리 전체에 데이터를 전달할 수 있게 해주는 기능입니다. 이를 통해 상위 컴포넌트에서 하위 컴포넌트로 일일이 props를 전달하지 않아도 되므로 코드가 간결해지고 유지보수가 쉬워집니다.\\r\\n\\r\\n또한 Context와 상태관리 도구를 함께 사용하면 전역 상태를 효과적으로 관리할 수 있습니다. 적절하게 분리하지 않으면, 하위 컴포넌트가 불필요하게 자주 리렌더링되는 문제가 발생할 수 있습니다.\\r\\n\\r\\n따라서 Context는 단순히 데이터를 공유하는 역할을 넘어, 상태관리 전략과 함께 사용함으로써 리렌더링을 최소화하고, 더 효율적인 앱 구조를 만드는 데 큰 도움이 된다고 생각합니다.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n```js\\r\\nexport const ToastProvider = memo(({ children }: PropsWithChildren) => {\\r\\n  const [state, dispatch] = useReducer(toastReducer, initialState);\\r\\n  const { show, hide } = useRef(createActions(dispatch)).current; //useRef를 사용하였기 때문에 리렌더링과 무관하게 고정된 값 유지\\r\\n  const visible = state.message !== \\"\\";\\r\\n\\r\\n  const hideAfter = debounce(hide, DEFAULT_DELAY);\\r\\n\\r\\n  const showWithHide: ShowToast = useCallback((...args) => {\\r\\n    show(...args);\\r\\n    hideAfter();\\r\\n  }, []); //의존성 배열을 빈 배열로 설정하여 최초 렌더링 시에만 실행되도록 함\\r\\n\\r\\n  const context = useMemo(() => ({ show: showWithHide, hide }), [showWithHide, hide]); //showWithHide와 hide가 변하지 않으므로 변하지 않음\\r\\n\\r\\n  return (\\r\\n    <ToastActionsContext value={context}>\\r\\n      <ToastStateContext value={state}>\\r\\n        {children}\\r\\n        {visible && createPortal(<Toast />, document.body)}\\r\\n      </ToastStateContext>\\r\\n    </ToastActionsContext>\\r\\n  );\\r\\n});\\r\\n```\\r\\n\\r\\n1. \\r\\n저는 아래 코드에서 createActions(dispatch)로 만든 show, hide 함수를 useRef로 감싸서 리렌더링과 무관하게 고정된 값으로 유지하고, 이후 useCallback 안에서 사용하고 있습니다. 이런 방법을 통해 useCallback에서 의존성 배열을 빈 배열로 두어도 lint 경고가 생기지 않는데, 이 방법을 사용해도 되는지 궁금합니다.\\r\\n(현재는 팀원들의 도움으로, useMemo, useCallback 방법으로 변경하였습니다.)\\r\\n\\r\\n2.\\r\\n이번 과제를 통해 React Hook이 어떤 역할을 하고, 어떻게 사용되는지에 대해 감을 잡을 수 있었습니다. 하지만 아직도 어떤 상황에서 어떤 Hook을 써야 하는지, 그리고 성능 최적화를 위해 어떤 판단 기준을 가져야 할지는 여전히 모호하게 느껴집니다.\\r\\n혹시 Hook을 더 잘 이해하고 적재적소에 활용하기 위해 추천하시는 학습 방법이나 연습 방식이 있다면 알려주시면 감사하겠습니다!\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-21T04:48:04Z","updated_at":"2025-07-26T05:36:38Z","closed_at":null,"merged_at":null,"merge_commit_sha":"6ba5f45b447d03849365f646a55287d05f4e3742","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/35/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/35/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/35/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/a25582e90dba20f68b49a0a1c33e0fb0d83f61c5","head":{"label":"suhyeon57:main","ref":"main","sha":"a25582e90dba20f68b49a0a1c33e0fb0d83f61c5","user":{"login":"suhyeon57","id":104812227,"node_id":"U_kgDOBj9Oww","avatar_url":"https://avatars.githubusercontent.com/u/104812227?v=4","gravatar_id":"","url":"https://api.github.com/users/suhyeon57","html_url":"https://github.com/suhyeon57","followers_url":"https://api.github.com/users/suhyeon57/followers","following_url":"https://api.github.com/users/suhyeon57/following{/other_user}","gists_url":"https://api.github.com/users/suhyeon57/gists{/gist_id}","starred_url":"https://api.github.com/users/suhyeon57/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/suhyeon57/subscriptions","organizations_url":"https://api.github.com/users/suhyeon57/orgs","repos_url":"https://api.github.com/users/suhyeon57/repos","events_url":"https://api.github.com/users/suhyeon57/events{/privacy}","received_events_url":"https://api.github.com/users/suhyeon57/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023377307,"node_id":"R_kgDOPP9_mw","name":"front_6th_chapter1-3","full_name":"suhyeon57/front_6th_chapter1-3","private":false,"owner":{"login":"suhyeon57","id":104812227,"node_id":"U_kgDOBj9Oww","avatar_url":"https://avatars.githubusercontent.com/u/104812227?v=4","gravatar_id":"","url":"https://api.github.com/users/suhyeon57","html_url":"https://github.com/suhyeon57","followers_url":"https://api.github.com/users/suhyeon57/followers","following_url":"https://api.github.com/users/suhyeon57/following{/other_user}","gists_url":"https://api.github.com/users/suhyeon57/gists{/gist_id}","starred_url":"https://api.github.com/users/suhyeon57/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/suhyeon57/subscriptions","organizations_url":"https://api.github.com/users/suhyeon57/orgs","repos_url":"https://api.github.com/users/suhyeon57/repos","events_url":"https://api.github.com/users/suhyeon57/events{/privacy}","received_events_url":"https://api.github.com/users/suhyeon57/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/suhyeon57/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/suhyeon57/front_6th_chapter1-3/deployments","created_at":"2025-07-21T04:41:44Z","updated_at":"2025-07-25T05:00:58Z","pushed_at":"2025-07-25T05:01:13Z","git_url":"git://github.com/suhyeon57/front_6th_chapter1-3.git","ssh_url":"git@github.com:suhyeon57/front_6th_chapter1-3.git","clone_url":"https://github.com/suhyeon57/front_6th_chapter1-3.git","svn_url":"https://github.com/suhyeon57/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":291,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/35"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/35"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/35"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/35/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/35/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/35/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/a25582e90dba20f68b49a0a1c33e0fb0d83f61c5"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/36","id":2680837255,"node_id":"PR_kwDOPMCTuc6fylSH","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/36","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/36.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/36.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/36","number":36,"state":"open","locked":false,"title":"[1팀 이의찬] Chapter 1-3. React, Beyond the Basics","user":{"login":"Legitgoons","id":101088491,"node_id":"U_kgDOBgZ86w","avatar_url":"https://avatars.githubusercontent.com/u/101088491?v=4","gravatar_id":"","url":"https://api.github.com/users/Legitgoons","html_url":"https://github.com/Legitgoons","followers_url":"https://api.github.com/users/Legitgoons/followers","following_url":"https://api.github.com/users/Legitgoons/following{/other_user}","gists_url":"https://api.github.com/users/Legitgoons/gists{/gist_id}","starred_url":"https://api.github.com/users/Legitgoons/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Legitgoons/subscriptions","organizations_url":"https://api.github.com/users/Legitgoons/orgs","repos_url":"https://api.github.com/users/Legitgoons/repos","events_url":"https://api.github.com/users/Legitgoons/events{/privacy}","received_events_url":"https://api.github.com/users/Legitgoons/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://legitgoons.github.io/front_6th_chapter1-3\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n- 지난 과제들에서는 ai 사용을 지양하고, 가능한 직접 코드를 작성하려고 해왔습니다\\r\\n  - 하지만 잘 되진 않았고 막판에 그냥 막 쓰긴 했습니다.\\r\\n- 그래서 이번에는 ai를 처음부터 적극적으로 사용해서 구현해보았습니다. \\r\\n  - 당연히 구현 속도가 매우 빨랐지만 스스로 코드를 제대로 이해한지는 확신하기 어려웠고, 지금도 코드를 복기하면서 학습중입니다.\\r\\n  - 그래도 전반적으로는 코드 전체를 훑어보면서 학습할 수 있다는 부분에서 지난 과제들보다는 스스로 만족도가 높았습니다.\\r\\n  - 산들님이 `~~~를 구현해보려고 하는데 가이드를 해줘. 처음부터 정답을 알려주지 말고 내가 충분히 학습하면서 정답에 가까워질 수 있도록 질문을 하면서 정답까지 이끌어줘.`라는 방식의 프롬프트를 사용해보라고 조언해주셔서 다음 과제부터는 이렇게 해보려고 합니다.\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n- 리액트가 얕은 비교를 주로 사용하는 이유\\r\\n- 실제 Hook의 구현 원리들\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n#### 커밋 링크\\r\\n[feat: 타입 가드를 사용해 isObject 구현](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/36/commits/a0c12622f7d053d06260c1b7781e53ea4adb5557)\\r\\n[refactor: equals/util에 helper함수 compareObject 구현](https://github.com/hanghae-plus/front_6th_chapter1-3/pull/36/commits/e88d6f9adc9b2f4965423eb658d269819b264183)\\r\\n\\r\\n- equals를 구현하면서 하나의 함수에 많은 로직들이 얽혀있다는 것을 느꼈고, 헬퍼함수들을 사용해서 선언적으로 구현해보았습니다.\\r\\n - 주요 고민 : ` return keysA.every((key) => compareFn(a[key], b[key]));` 부분에서 로직이 달라 어떻게 해야할지 고민했습니다.\\r\\n 1. compareObjectDeep / compareObjectShallow를 분리하는 것\\r\\n 2. 비교함수를 매개변수로 추가하는 것\\r\\n 3. 비교 수행 로직을 compareObject에 넣어두고, `deepEquals` / `shallowEquals` 를 매개변수로 받아서 이에 따라 적용\\r\\n - 위 세 가지 방안을 생각해보았는데, 우선 3번의 경우에는 순환 의존성 문제가 있어서 배제하였고, 1번의 경우에는 명시적으로 분리해주는 것은 좋지만 중복되는 코드량이 많아 2번을 선택하였습니다.\\r\\n```js\\r\\nexport function isObject(value?: unknown): value is Record<string, unknown> {\\r\\n  return value !== null && typeof value === \\"object\\";\\r\\n}\\r\\n\\r\\nexport function compareObject(\\r\\n  a: Record<string, unknown>,\\r\\n  b: Record<string, unknown>,\\r\\n  compareFn: (a: unknown, b: unknown) => boolean = (a, b) => a === b,\\r\\n): boolean {\\r\\n  // 객체의 키 개수가 다른 경우 처리\\r\\n  const keysA = Object.keys(a);\\r\\n  const keysB = Object.keys(b);\\r\\n  if (keysA.length !== keysB.length) return false;\\r\\n\\r\\n  // 모든 키에 대해 비교 수행\\r\\n  return keysA.every((key) => compareFn(a[key], b[key]));\\r\\n}\\r\\n\\r\\n```\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n- 메모이제이션에 대해서 충분히 학습하지 못하고 넘어가서 아쉽습니다.\\r\\n- Toast Provider 부분도 깊게 고민하지 못하고, 우선 동작하는대로 ai에게 맡기고 넘겼는데 이 부분도 추가적으로 학습하고 싶습니다.\\r\\n  - 위 두 부분을 학습해서 기술적 성장으로 옮기고 싶습니다...!!\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n- React의 랜더링 과정\\r\\n<img width=\\"6516\\" height=\\"2948\\" alt=\\"KakaoTalk_Photo_2025-07-16-16-03-34\\" src=\\"https://github.com/user-attachments/assets/5620d73c-51b3-4a7d-997a-4cfb0d24b365\\" />\\r\\n- 이미지 출처 : 7팀의 병준님\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n- 아직 학습이 모자란 부분이라, 추후 정리해서 작성하겠습니다\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n    - 장점\\r\\n        - 깊은 컴포넌트 구조에서 상태 공유가 용이해진다.\\r\\n        - 선언적으로 컴포넌트를 명시함으로써 가독성을 높일 수 있음\\r\\n    - 단점\\r\\n        - Context 값이 변경되면 해당 Context를 구독하는 모든 컴포넌트가 리렌더링\\r\\n        - Context가 많아지게 된다면 Provider hell에 빠지게 됨\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-21T06:47:39Z","updated_at":"2025-07-26T05:06:49Z","closed_at":null,"merged_at":null,"merge_commit_sha":"9c0084d3d2cf016ba43d19eeb470593194159d4e","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/36/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/36/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/36/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/e88d6f9adc9b2f4965423eb658d269819b264183","head":{"label":"Legitgoons:main","ref":"main","sha":"e88d6f9adc9b2f4965423eb658d269819b264183","user":{"login":"Legitgoons","id":101088491,"node_id":"U_kgDOBgZ86w","avatar_url":"https://avatars.githubusercontent.com/u/101088491?v=4","gravatar_id":"","url":"https://api.github.com/users/Legitgoons","html_url":"https://github.com/Legitgoons","followers_url":"https://api.github.com/users/Legitgoons/followers","following_url":"https://api.github.com/users/Legitgoons/following{/other_user}","gists_url":"https://api.github.com/users/Legitgoons/gists{/gist_id}","starred_url":"https://api.github.com/users/Legitgoons/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Legitgoons/subscriptions","organizations_url":"https://api.github.com/users/Legitgoons/orgs","repos_url":"https://api.github.com/users/Legitgoons/repos","events_url":"https://api.github.com/users/Legitgoons/events{/privacy}","received_events_url":"https://api.github.com/users/Legitgoons/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023429143,"node_id":"R_kgDOPQBKFw","name":"front_6th_chapter1-3","full_name":"Legitgoons/front_6th_chapter1-3","private":false,"owner":{"login":"Legitgoons","id":101088491,"node_id":"U_kgDOBgZ86w","avatar_url":"https://avatars.githubusercontent.com/u/101088491?v=4","gravatar_id":"","url":"https://api.github.com/users/Legitgoons","html_url":"https://github.com/Legitgoons","followers_url":"https://api.github.com/users/Legitgoons/followers","following_url":"https://api.github.com/users/Legitgoons/following{/other_user}","gists_url":"https://api.github.com/users/Legitgoons/gists{/gist_id}","starred_url":"https://api.github.com/users/Legitgoons/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Legitgoons/subscriptions","organizations_url":"https://api.github.com/users/Legitgoons/orgs","repos_url":"https://api.github.com/users/Legitgoons/repos","events_url":"https://api.github.com/users/Legitgoons/events{/privacy}","received_events_url":"https://api.github.com/users/Legitgoons/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/Legitgoons/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/Legitgoons/front_6th_chapter1-3/deployments","created_at":"2025-07-21T06:42:32Z","updated_at":"2025-07-25T02:43:46Z","pushed_at":"2025-07-25T02:43:42Z","git_url":"git://github.com/Legitgoons/front_6th_chapter1-3.git","ssh_url":"git@github.com:Legitgoons/front_6th_chapter1-3.git","clone_url":"https://github.com/Legitgoons/front_6th_chapter1-3.git","svn_url":"https://github.com/Legitgoons/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":118,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":1,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":1,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/36"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/36"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/36"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/36/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/36/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/36/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/e88d6f9adc9b2f4965423eb658d269819b264183"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/37","id":2681049163,"node_id":"PR_kwDOPMCTuc6fzZBL","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/37","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/37.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/37.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/37","number":37,"state":"open","locked":false,"title":"[5팀 여찬규] Chapter 1-3. React, Beyond the Basics","user":{"login":"chan9yu","id":80776262,"node_id":"MDQ6VXNlcjgwNzc2MjYy","avatar_url":"https://avatars.githubusercontent.com/u/80776262?v=4","gravatar_id":"","url":"https://api.github.com/users/chan9yu","html_url":"https://github.com/chan9yu","followers_url":"https://api.github.com/users/chan9yu/followers","following_url":"https://api.github.com/users/chan9yu/following{/other_user}","gists_url":"https://api.github.com/users/chan9yu/gists{/gist_id}","starred_url":"https://api.github.com/users/chan9yu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chan9yu/subscriptions","organizations_url":"https://api.github.com/users/chan9yu/orgs","repos_url":"https://api.github.com/users/chan9yu/repos","events_url":"https://api.github.com/users/chan9yu/events{/privacy}","received_events_url":"https://api.github.com/users/chan9yu/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://chan9yu.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n벌써 리액트 딥다이브 마지막 주차를 마무리하게 되었네요 \\r\\n1주차와 2주차에서 많은 것들을 배워둔 덕에 3주차 과제를 정말 재미있게 진행할 수 있었던 거 같습니다!\\r\\n이번 주차를 통해 리액트의 핵심 개념들을 깊이 이해할 수 있었어요.\\r\\n특히 리액트가 왜 얕은 비교를 사용하는지, 불변성을 권장하는 이유가 무엇인지,\\r\\n그리고 hook들이 실제로 어떤 방식으로 구현되어 있는지를 직접 체험해볼 수 있어서 정말 의미있는 시간이였습니다\\r\\n\\r\\n이번 주도 5팀은 각자 과제에 대해 구현하고 정리한 내용을 공유했었는데요,\\r\\n아쉽게도 저는외근과 야근 이슈가 겹치면서 하나밖에 정리하지 못했네요 🥲\\r\\n그래도 점심시간이나 자투리 시간을 최대한 활용해서 틈틈이 과제를 진행했고,\\r\\n다행이 모든 과제를 완료할 수 있었습니다. 정말 힘들었던 한 주 였지만, 무사히 마무리해서 뿌듯?합니다 ㅎㅎ\\r\\n이렇게 바쁜 상황에서도 과제를 이어나갈 수 있었던 것은 팀원분들의 도움과 응원? 그리고 자극 덕분이였던 것 같습니다.\\r\\n\\r\\n<img width=\\"1253\\" height=\\"565\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/b3a06da7-30e4-4a84-b114-ffa83cc04ffb\\" />\\r\\n<img width=\\"1266\\" height=\\"652\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/67fc3abc-793e-4372-ade9-d02e43964949\\" />\\r\\n\\r\\n(과제에 대해 항상 적극적이고 서로 정보를 공유해 주는 팀원분들 보기 좋아요)\\r\\n\\r\\n현재까지 정리한 내용들:\\r\\n\\r\\n- https://github.com/chan9yu/front_6th_chapter1-3/issues/2\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n실제 리액트 내부에서 구현된 훅들을 직접 구현해보면서 동작 원리를 깊이 이해할 수 있어서 정말 좋았습니다!\\r\\n예를 들어 useRef는 생각보다 단순하게 구현할 수 있었는데요\\r\\n\\r\\n```typescript\\r\\nexport function useRef<T>(initialValue: T) {\\r\\n  const [refObject] = useState<RefObject<T>>({ current: initialValue });\\r\\n  return refObject;\\r\\n}\\r\\n```\\r\\n\\r\\nuseState를 이용해서 참조를 유지하는 객체를 생성하는 방식으로도 구현할 수 있다는 것을 배웠습니다.\\r\\n\\r\\n하지만 나중에 위 코드에서 문제를 발견했는데요,\\r\\nuseState를 사용하면 initialValue가 변경될 때 마다 새로운 객체가 생성될 수 있는데 이를 방지하기 위해\\r\\nlazy initialization을 사용해서 초기값을 한 번만 설정하고 이후 변경되지 않게 개선했습니다.\\r\\n\\r\\n```typescript\\r\\nexport function useRef<T>(initialValue: T) {\\r\\n  const [refObject] = useState<RefObject<T>>(() => ({ current: initialValue })); // lazy initialization\\r\\n  return refObject;\\r\\n}\\r\\n```\\r\\n\\r\\n그리고 useMemo와 useCallback도 구현하면서 내부 로직에 대해 파악할 수 있었습니다\\r\\n\\r\\n```typescript\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals) {\\r\\n  // useRef로 메모이제이션 상태 저장\\r\\n  const memoRef = useRef<MemoRef<T> | null>(null);\\r\\n\\r\\n  // 의존성 배열이 없거나, 이전과 다르면 새로 계산\\r\\n  if (!memoRef.current || !_equals(memoRef.current.deps, _deps)) {\\r\\n    const value = factory();\\r\\n    memoRef.current = { deps: _deps, value };\\r\\n  }\\r\\n\\r\\n  return memoRef.current.value;\\r\\n}\\r\\n\\r\\nexport function useCallback<T extends AnyFunction>(factory: T, _deps: DependencyList) {\\r\\n  return _useMemo(() => factory, _deps);\\r\\n}\\r\\n```\\r\\n\\r\\n이렇게 내부적으로 얕은 비교를 통한 메모이제이션이 다양한 곳에서 활용되고 있구나 하고 깨달았습니다.\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n`shallowEquals` 함수 구현부입니다.\\r\\n\\r\\n항상 하던 것처럼 하나의 함수에 로직을 때려 넣어서 구현했는데,\\r\\n\\"하나의 함수에 너무 많은 일을 하고 있지 않을까? 또 가독성이 안 좋아 보이는데 다른 사람들이 읽을 때 이해할 수 있을까?\\"라는 고민이었습니다.\\r\\n이 고민은 2주 차까지 했었던 것 같아요 그래서 2주차 과제 제출할 때도 클린 코드 측면에서도 리뷰를 부탁드렸던 거 같습니다\\r\\n\\r\\n<img width=\\"883\\" height=\\"177\\" alt=\\"image\\" src=\\"https://github.com/user-attachments/assets/2f9aad1c-2c44-42d2-ac99-3910a5a36ab1\\" />\\r\\n(받았던 리뷰 내용도 참고가 많이 되었습니다 감사합니다 오프 코치님 😉)\\r\\n\\r\\n다행히도 이번 과제 발제 때 준일 코치님이 제 고민을 시원하게 긁어주셨는데, 바로 선언적으로 코드를 리팩토링 해주시고 설명해주셨습니다\\r\\n그때를 참고해서 `shallowEquals`를 선언적 구조로 리팩토링을 진행해 봤어요.\\r\\n\\r\\n커밋 기록\\r\\n- 헬퍼함수 분리: https://github.com/chan9yu/front_6th_chapter1-3/commit/3e8210378454ee6db200f64b764ccad6984f75c7\\r\\n- dispatchWithCondition 적용: https://github.com/chan9yu/front_6th_chapter1-3/commit/9418a647c797d4fdde4c4b46f7ff4f66d47700f4\\r\\n\\r\\n#### AS-IS 하나의 함수 내부에 여러 로직이 결합됨\\r\\n\\r\\n```javascript\\r\\nexport const shallowEquals = (a: unknown, b: unknown) => {\\r\\n  // 두 값이 정확히 같은지 확인 (참조가 같은 경우)\\r\\n  if (Object.is(a, b)) return true;\\r\\n\\r\\n  // 둘 다 객체가 아니면 false\\r\\n  if (typeof a !== \\"object\\" || typeof b !== \\"object\\" || a === null || b === null) return false;\\r\\n\\r\\n  const isArrayA = Array.isArray(a);\\r\\n  const isArrayB = Array.isArray(b);\\r\\n\\r\\n  // 서로다른 타입을 받을 경우 false (ex: a: [], b: {} 인 경우 false)\\r\\n  if (isArrayA !== isArrayB) return false;\\r\\n\\r\\n  // 둘 다 배열이면 배열 비교\\r\\n  if (isArrayA && isArrayB) {\\r\\n    if (a.length !== b.length) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    for (let i = 0; i < a.length; i++) {\\r\\n      if (!Object.is(a[i], b[i])) {\\r\\n        return false;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  // 둘 다 객체면 객체 비교\\r\\n  const aObj = a as Record<string, unknown>;\\r\\n  const bObj = b as Record<string, unknown>;\\r\\n\\r\\n  const aKeys = Object.keys(aObj);\\r\\n  const bKeys = Object.keys(bObj);\\r\\n\\r\\n  if (aKeys.length !== bKeys.length) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  for (const key of aKeys) {\\r\\n    if (!(key in bObj)) {\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    if (!Object.is(aObj[key], bObj[key])) {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n};\\r\\n```\\r\\n\\r\\n#### TO-BE 헬퍼 함수를 통해 선언적으로 리팩토링\\r\\n\\r\\n가독성과 간결함이 높아졌고, 함수의 결합도가 느슨해짐\\r\\n\\r\\n```javascript\\r\\nconst isArray = (value: unknown) => {\\r\\n  return Array.isArray(value);\\r\\n};\\r\\n\\r\\nconst isObject = (value: unknown) => {\\r\\n  return typeof value === \\"object\\" && value !== null;\\r\\n};\\r\\n\\r\\nconst compareArrays = (a: unknown[], b: unknown[]) => {\\r\\n  return a.length === b.length && a.every((item, index) => Object.is(item, b[index]));\\r\\n};\\r\\n\\r\\nconst compareObjects = (a: object, b: object) => {\\r\\n  const aObj = a as Record<string, unknown>;\\r\\n  const bObj = b as Record<string, unknown>;\\r\\n\\r\\n  const keysA = Object.keys(a);\\r\\n  const keysB = Object.keys(b);\\r\\n\\r\\n  return keysA.length === keysB.length && keysA.every((key) => key in bObj && Object.is(aObj[key], bObj[key]));\\r\\n};\\r\\n\\r\\nexport const shallowEquals = (a: unknown, b: unknown) => {\\r\\n  // 두 값이 정확히 같은지 확인 (참조가 같은 경우)\\r\\n  if (Object.is(a, b)) return true;\\r\\n\\r\\n  // 둘 다 객체가 아니면 false\\r\\n  if (!isObject(a) || !isObject(b)) return false;\\r\\n\\r\\n  // 서로다른 타입을 받을 경우 false (ex: a: [], b: {} 인 경우 false)\\r\\n  if (isArray(a) !== isArray(b)) return false;\\r\\n\\r\\n  // 둘 다 배열이면 배열 비교\\r\\n  if (isArray(a) && isArray(b)) return compareArrays(a, b);\\r\\n\\r\\n  // 둘 다 객체면 객체 비교\\r\\n  return compareObjects(a, b);\\r\\n};\\r\\n```\\r\\n\\r\\n이렇게 리팩토링 함으로서 가독성이 올라가고 함수를 이해하는데 더 쉬워졌습니다\\r\\n하지만 여기서 더 리팩토링을 해봤는데요\\r\\n준일코치님의 코드를 참고해서 여기서 한 단계 더 리팩토링을 진행했습니다.\\r\\n\\r\\n#### 최종 리팩토링 결과물\\r\\n\\r\\n```typescript\\r\\n// ... 헬퍼함수들\\r\\n\\r\\ntype Condition<T> = (param: T) => boolean;\\r\\ntype Handler<T, R> = (param: T) => R;\\r\\ntype ConditionHandlerPair<T, R> = [condition: Condition<T>, handler: Handler<T, R>];\\r\\n\\r\\n// dispatchWithCondition 함수 추가구현\\r\\nexport function dispatchWithCondition<T, R>(...args: [...ConditionHandlerPair<T, R>[], Handler<T, R>]) {\\r\\n  const pairs = args.slice(0, -1) as ConditionHandlerPair<T, R>[];\\r\\n  const defaultHandler = args[args.length - 1] as Handler<T, R>;\\r\\n\\r\\n  return (param: T) => {\\r\\n    for (const [condition, handler] of pairs) {\\r\\n      if (condition(param)) {\\r\\n        return handler(param);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return defaultHandler(param);\\r\\n  };\\r\\n}\\r\\n\\r\\nexport const shallowEquals = (a: unknown, b: unknown) => {\\r\\n  return dispatchWithCondition<[typeof a, typeof b], boolean>(\\r\\n    // 두 값이 정확히 같은지 확인 (참조가 같은 경우)\\r\\n    [([a, b]) => Object.is(a, b), () => true],\\r\\n    // 둘 다 객체가 아니면 false\\r\\n    [([a, b]) => !isObject(a) || !isObject(b), () => false],\\r\\n    // 서로 다른 타입을 받을 경우 false (ex: a: [], b: {} 인 경우 false)\\r\\n    [([a, b]) => isArray(a) !== isArray(b), () => false],\\r\\n    // 둘 다 배열이면 배열 비교\\r\\n    [([a, b]) => isArray(a) && isArray(b), ([a, b]) => compareArrays(a as unknown[], b as unknown[])],\\r\\n    // 둘 다 객체면 객체 비교\\r\\n    ([a, b]) => compareObjects(a as object, b as object),\\r\\n  )([a, b]);\\r\\n};\\r\\n\\r\\n```\\r\\n\\r\\n굉장히 직관적으로 코드가 리팩토링된 거 같아서 개인적으로 제일 마음에들고 자랑하고 싶은 코드입니다!\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n`useShallowSelector` 조금 아쉬운 부분이 있습니다\\r\\n\\r\\n```typescript\\r\\nexport const useShallowSelector = <T, S = T>(selector: Selector<T, S>) => {\\r\\n  const prevResult = useRef<S | null>(null);\\r\\n\\r\\n  const memoizedSelector = (state: T) => {\\r\\n    const result = selector(state);\\r\\n\\r\\n    if (prevResult.current && shallowEquals(prevResult.current, result)) {\\r\\n      return prevResult.current;\\r\\n    }\\r\\n\\r\\n    prevResult.current = result;\\r\\n    return result;\\r\\n  };\\r\\n\\r\\n  return memoizedSelector;\\r\\n};\\r\\n```\\r\\n\\r\\n매번 새로운 함수를 반환하고 있어서, 이 자체로 인한 리렌더링이 발생할 수 있을 것 같다?라는 생각이 듭니다\\r\\nuseCallback으로 한 번 더 감싸주면 좋을 것 같은데, 순환 참조 문제 때문에 고민이 되고있습니다\\r\\n시간상 재대로 보진 못했지만 개선이 될 수 있지 않을까 생각이 되네요\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n이번 과제에서 가장 큰 배움이 있었던 부분은 리액트의 내부 동작 원리를 직접 구현해보면서 이해할 수 있었던 점입니다.\\r\\n특히 `useSyncExternalStore`를 사용해서 외부 스토어와 리액트를 연결하는 방식이 정말 재미있었습니다.\\r\\n\\r\\nuseSyncExternalStore를 사용하는 훅중에 useStorage 부분이 있는데,\\r\\n\\r\\n```typescript\\r\\nexport const useStorage = <T>(storage: Storage<T>) => {\\r\\n  const storageStore = useSyncExternalStore(storage.subscribe, storage.get);\\r\\n  return storageStore;\\r\\n};\\r\\n```\\r\\n\\r\\n이렇게 간단하게 localStorage 변화를 리액트가 감지할 수 있게 만들 수 있다는 게 신기했습니다.\\r\\n그리고 observer 패턴에 대해서도 조금 더 익숙해진 거 같습니다.\\r\\ncreateObserver를 통해 Publisher-Subscriber 패턴을 직접 구현해보니, 상태 관리 라이브러리들이 어떤 방식으로 동작하는지 조금은 알 거 같습니다\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n3주차 밖에 안되었지만 이번주차가 개인적으로 제일 재미?있었던 주차였던 거 같아요\\r\\n시간문제로 대충 훑고 넘긴 개념들도 많아서 나중에 시간내서 좀 더 보충하면서 공부해보겠습니다\\r\\n좋은 과제 감사합니다\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n1. 트리거 단계\\r\\n    - 상태 변경이나 props 변경이 발생하면 리렌더링이 트리거됩니다\\r\\n    - 이때 useMemo나 useCallback에서 의존성 배열을 비교하는 부분이 바로 이 단계에서 일어납니다\\r\\n2. 렌더 단계\\r\\n    - 컴포넌트 함수를 실행해서 새로운 Virtual DOM을 만드는 단계입니다\\r\\n    - 이 과정에서 이번에 구현한 shallowEquals 같은 비교 함수들이 활용되어서 불필요한 계산을 방지하게 됩니다\\r\\n3. 커밋 단계\\r\\n    - 실제 DOM을 업데이트하는 단계입니다\\r\\n    - useEffect나 useLayoutEffect 같은 side effect들이 실행됩니다\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n개인적으로 메모이제이션은 양날의 검 이라고 생각을 합니다\\r\\n\\r\\n일단 메모이제이션은 언제 필요할까? 라고했을 때\\r\\n\\r\\n- 복잡한 계산이 반복적으로 일어날 때\\r\\n- 자식 컴포넌트에 전달되는 props가 자주 변경될 때\\r\\n- 외부 API 호출이나 무거운 로직이 있을 때\\r\\n\\r\\n정도로 생각해볼 수 있을 거 같아요\\r\\n\\r\\n이번 과제에서 useMemo를 구현해보니까 메모이제이션도 결국 이전 값을 저장하고 비교하는 오버헤드?가 있다는 것을 알 수 있었는데요\\r\\n\\r\\n```typescript\\r\\nif (!memoRef.current || !_equals(memoRef.current.deps, _deps)) {\\r\\n  const value = factory();\\r\\n  memoRef.current = { deps: _deps, value };\\r\\n}\\r\\n```\\r\\n\\r\\n이 비교 과정 자체도 비용이 든다고 생각합니다.\\r\\n그래서 모든 곳에 메모이제이션을 적용하면 성능이 정말 좋아질까..? 잘못 사용하면 어쩌면 더 비용이 많이들지 않을까?\\r\\n라고 생각을 했었고 잘못사용한다면 오히려 악효과가 난다는 결론을 지었습니다.\\r\\n\\r\\n장점 | 단점\\r\\n--- | ---\\r\\n불필요한 재계산 방지 | 메모리 사용량 증가 (이전 값들을 계속 저장)\\r\\n자식 컴포넌트 리렌더링 방지 | 비교 로직 자체의 오버헤드\\r\\n사용자 경험 개선 | 개발자 경험 악화, 코드 복잡성 증가\\r\\n\\r\\n결론적으로, 메모이제이션은 정말 필요한 곳에만 사용해야 한다고 생각해요.\\r\\n성능 측정을 통해 실제로 병목이 되는 부분을 찾아서 적용하는 게 맞는 것 같습니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n컨텍스트가 필요한 이유\\r\\n\\r\\n- Props drilling 문제 해결\\r\\n- 전역 상태 공유\\r\\n- 관심사의 분리\\r\\n\\r\\n라고 생각합니다\\r\\n\\r\\n하지만 컨텍스트도 만능이 아니다라는 걸 깨달았는데,\\r\\n이번 과제에서 리팩토링을 했던 ToastProvider를 보면\\r\\n\\r\\n```typescript\\r\\nexport const ToastProvider = memo(({ children }: PropsWithChildren) => {\\r\\n  const [state, dispatch] = useReducer(toastReducer, initialState);\\r\\n  // ... 로직들\\r\\n  \\r\\n  return (\\r\\n    <ToastCommandContext.Provider value={toastCommandContextValue}>\\r\\n      <ToastStateContext.Provider value={toastStateContextValue}>\\r\\n        {children}\\r\\n      </ToastStateContext.Provider>\\r\\n    </ToastCommandContext.Provider>\\r\\n  );\\r\\n});\\r\\n```\\r\\n\\r\\nCommand와 State를 분리해서 불필요한 리렌더링 방지하고 useMemo로 최적화 및 타입 안전성을 보장하지만,\\r\\n만약 Context가 너무 많아지면 Provider 지옥이 될 수 있을 거 같고 전역 상태가 너무 커지면 관리가 어려워질 수 있을 거 같다라는 생각이 듭니다.\\r\\n\\r\\n이런 부분들 때문에 외부 상태관리 라이브러리를 사용하는게 아닌가 싶어요\\r\\n간단한 상태관리는 컨텍스트로도 충분하지만, 복잡한 상태 로직이나 여러 컴포넌트에서 독립적으로 사용해야 하는 상태들은 외부 라이브러리가 더 적합할 수 있다고 생각하게 되었습니다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n### 1. shallowEquals\\r\\n\\r\\n현재 `dispatchWithCondition` 함수를 활용해서 선언적으로 리팩토링한 `shallowEquals` 코드가 실제 성능 면에서도 이점이 있을지 궁금합니다.\\r\\n\\r\\n```typescript\\r\\nexport const shallowEquals = (a: unknown, b: unknown) => {\\r\\n  return dispatchWithCondition<[typeof a, typeof b], boolean>(\\r\\n    [([a, b]) => Object.is(a, b), () => true],\\r\\n    [([a, b]) => !isObject(a) || !isObject(b), () => false],\\r\\n    // ... 더 많은 조건들\\r\\n  )([a, b]);\\r\\n};\\r\\n```\\r\\n\\r\\n가독성은 좋아졌지만, 매번 배열을 생성하고 함수 호출 스택이 깊어지는 것이 성능상 문제가 될 수 있을까요?\\r\\n특히 메모이제이션에서 자주 호출되는 함수인데, 이런 추상화가 적절한 지 궁금합니다\\r\\n\\r\\n### 2. useShallowSelector\\r\\n\\r\\nuseShallowSelector에서 useRef로 이전 결과를 저장하고 있는데\\r\\n\\r\\n```typescript\\r\\nexport const useShallowSelector = <T, S = T>(selector: Selector<T, S>) => {\\r\\n  const prevResult = useRef<S | null>(null);\\r\\n  \\r\\n  const memoizedSelector = (state: T) => {\\r\\n    const result = selector(state);\\r\\n    if (prevResult.current && shallowEquals(prevResult.current, result)) {\\r\\n      return prevResult.current;\\r\\n    }\\r\\n    prevResult.current = result;\\r\\n    return result;\\r\\n  };\\r\\n\\r\\n  return memoizedSelector;\\r\\n};\\r\\n```\\r\\n\\r\\n큰 객체를 선택하는 selector의 경우, prevResult.current에 계속 참조가 남아있어서 가비지 컬렉션?이 되지 않을 수 있을 것 같습니다.\\r\\n컴포넌트가 언마운트되거나 selector가 변경될 때 이전 결과를 정리해주는 로직이 필요할까요?\\r\\n\\r\\n> 생각해보니 컴포넌트가 언마운트될 때 자동으로 정리가 되어 메모리까지 해체될 거 같네요\\r\\n\\r\\n### 3. ToastProvider\\r\\n\\r\\n현재 ToastProvider에서 Command와 State Context를 분리했는데\\r\\n\\r\\n```typescript\\r\\n<ToastCommandContext.Provider value={toastCommandContextValue}>\\r\\n  <ToastStateContext.Provider value={toastStateContextValue}>\\r\\n    {children}\\r\\n  </ToastStateContext.Provider>\\r\\n</ToastCommandContext.Provider>\\r\\n```\\r\\n\\r\\n이런 방식이 실제 프로젝트에서도 유지보수하기 좋은 패턴일까요?\\r\\n아니면 하나의 Context로 합치되 useMemo로 최적화하는 것이 더 나을까요?\\r\\nContext 분리에 대해 코치님의 의견이 궁금합니다","created_at":"2025-07-21T08:21:23Z","updated_at":"2025-07-26T05:32:28Z","closed_at":null,"merged_at":null,"merge_commit_sha":"839ee43530abe5a1b600f21f7348eec636349b2f","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/37/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/37/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/37/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/6d00097e83d1bc1d656b804fd43ea8c04f4f54b2","head":{"label":"chan9yu:main","ref":"main","sha":"6d00097e83d1bc1d656b804fd43ea8c04f4f54b2","user":{"login":"chan9yu","id":80776262,"node_id":"MDQ6VXNlcjgwNzc2MjYy","avatar_url":"https://avatars.githubusercontent.com/u/80776262?v=4","gravatar_id":"","url":"https://api.github.com/users/chan9yu","html_url":"https://github.com/chan9yu","followers_url":"https://api.github.com/users/chan9yu/followers","following_url":"https://api.github.com/users/chan9yu/following{/other_user}","gists_url":"https://api.github.com/users/chan9yu/gists{/gist_id}","starred_url":"https://api.github.com/users/chan9yu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chan9yu/subscriptions","organizations_url":"https://api.github.com/users/chan9yu/orgs","repos_url":"https://api.github.com/users/chan9yu/repos","events_url":"https://api.github.com/users/chan9yu/events{/privacy}","received_events_url":"https://api.github.com/users/chan9yu/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022894395,"node_id":"R_kgDOPPghOw","name":"front_6th_chapter1-3","full_name":"chan9yu/front_6th_chapter1-3","private":false,"owner":{"login":"chan9yu","id":80776262,"node_id":"MDQ6VXNlcjgwNzc2MjYy","avatar_url":"https://avatars.githubusercontent.com/u/80776262?v=4","gravatar_id":"","url":"https://api.github.com/users/chan9yu","html_url":"https://github.com/chan9yu","followers_url":"https://api.github.com/users/chan9yu/followers","following_url":"https://api.github.com/users/chan9yu/following{/other_user}","gists_url":"https://api.github.com/users/chan9yu/gists{/gist_id}","starred_url":"https://api.github.com/users/chan9yu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chan9yu/subscriptions","organizations_url":"https://api.github.com/users/chan9yu/orgs","repos_url":"https://api.github.com/users/chan9yu/repos","events_url":"https://api.github.com/users/chan9yu/events{/privacy}","received_events_url":"https://api.github.com/users/chan9yu/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/chan9yu/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/chan9yu/front_6th_chapter1-3/deployments","created_at":"2025-07-20T04:36:01Z","updated_at":"2025-07-24T16:52:28Z","pushed_at":"2025-07-24T16:52:40Z","git_url":"git://github.com/chan9yu/front_6th_chapter1-3.git","ssh_url":"git@github.com:chan9yu/front_6th_chapter1-3.git","clone_url":"https://github.com/chan9yu/front_6th_chapter1-3.git","svn_url":"https://github.com/chan9yu/front_6th_chapter1-3","homepage":"https://chan9yu.github.io/front_6th_chapter1-3/","size":403,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":1,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":1,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/37"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/37"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/37"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/37/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/37/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/37/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/6d00097e83d1bc1d656b804fd43ea8c04f4f54b2"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/38","id":2681080969,"node_id":"PR_kwDOPMCTuc6fzgyJ","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/38","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/38.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/38.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/38","number":38,"state":"open","locked":false,"title":"[1팀 김휘린] Chapter 1-3. React, Beyond the Basics","user":{"login":"Hwirin-Kim","id":113874038,"node_id":"U_kgDOBsmUdg","avatar_url":"https://avatars.githubusercontent.com/u/113874038?v=4","gravatar_id":"","url":"https://api.github.com/users/Hwirin-Kim","html_url":"https://github.com/Hwirin-Kim","followers_url":"https://api.github.com/users/Hwirin-Kim/followers","following_url":"https://api.github.com/users/Hwirin-Kim/following{/other_user}","gists_url":"https://api.github.com/users/Hwirin-Kim/gists{/gist_id}","starred_url":"https://api.github.com/users/Hwirin-Kim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hwirin-Kim/subscriptions","organizations_url":"https://api.github.com/users/Hwirin-Kim/orgs","repos_url":"https://api.github.com/users/Hwirin-Kim/repos","events_url":"https://api.github.com/users/Hwirin-Kim/events{/privacy}","received_events_url":"https://api.github.com/users/Hwirin-Kim/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://hwirin-kim.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n이번 과제에서는 여러가지 리액트 훅을 만들어보고, 해당 훅으로 렌더링 최적화를 진행해보았다.\\r\\n여러가지 의문점도 많이 생겼고 스스로 혼란에 빠지기도 했지만 분명히 이 경험은 내가 리액트를 이해하는데 큰 도움이 되었다.\\r\\n\\r\\n\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n이번 과제에서 useRef를 useState를 사용하여 구현하는 과제가 있었다.\\r\\n```\\r\\nexport function useRef<T>(initialValue: T): { current: T } {\\r\\n  const [ref] = useState({ current: initialValue });\\r\\n  return ref;\\r\\n}\\r\\n```\\r\\n이렇게 간단하게 ref상태를 만드는데, 이 ref는 setState를 사용하지 않고 ref.current에 직접 값을 할당/변경 하여 useRef처럼 사용하는 방식이다.\\r\\nsetState로 새로운 객체를 생성하지도 않으니 값이 변해도 리렌더링 되지 않았다.\\r\\n그런데 나는 여기서 의문이 들었다.\\r\\n\\"일반 지역변수를 사용해도 렌더링이 발생하지 않는다면, 그냥 내부에 ref객체 변수를 만들어서 리턴하면 되지 않나?\\"\\r\\n```\\r\\nexport function useRef<T>(initialValue: T): { current: T } {\\r\\n  const ref = { current: initialValue };\\r\\n  return ref;\\r\\n}\\r\\n```\\r\\n이렇게 말이다.\\r\\n\\r\\n하지만 이것은 당연히 동작하지 않았다.\\r\\n먼저 렌더링이 다시 발생할때마다 ref객체는 새 객체를 다시 만들어 반환하게 되기 때문이다.\\r\\n즉, 값을 변경해서 저장하더라도 만약 렌더링이 다시 발생해버리면 이 값들은 다시 초기화 되버리는 것이다.\\r\\n\\r\\n하지만 useState를 사용한다면 처음 렌더링시 객체를 생성하고, 해당 객체를 내부 hook 메모리에 저장해둔다.\\r\\n이 후 렌더링시 저장해둔 값을 꺼내어 사용하는 방식이기 때문에 값을 기억할 수 있게 된다.\\r\\n\\r\\n어떻게보면 너무나도 당연해서 위처럼 사용하지 않았지만, 진짜 안되는걸까? 하는 의문으로 실험해보니 더욱 이해가 잘되고 기억에 남았다.\\r\\n\\r\\n앞으로도 간단해도 왜 안되는지 명확하지 않으면 직접 만들어 보는 수고(?)를 들여서라도 잘 공부해놔야겠다.\\r\\n\\r\\n\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n지난번 과제까지도 그랬지만,, 테스트 통과를 위해 고민하고 통과해서 무언가 자랑하고 싶은 코드라고 할만한게 없는것 같다.. ㅠㅠ\\r\\n그래도 하나를 뽑아본다면 얕은비교, 깊은 비교 함수를 만들 때 입력받은 파라미터 타입별로 다른 방법의 비교 방식을 취해줘야하는데\\r\\n원시 데이터는 Object.is()메서드를 이용하면 간편히 가능했고, 배열의 경우 Array.isArray()메서드가 있어서 간단히 처리 되었지만, 객체의 경우 typeof value===\\"object\\" 만으로는 배열이나 Null을 걸러낼 수 없기 때문에 isPlainObject라는 유틸함수를 만들어 코드를 좀 더 깔끔하고 읽기 좋게 바꿨다는 점이다.\\r\\n```\\r\\nexport const isPlainObject = (value: unknown): value is Record<string, unknown> => {\\r\\n  return typeof value === \\"object\\" && value !== null && !Array.isArray(value);\\r\\n};\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n개선이 필요하다고 생각한 코드를 개선 후 아래 과제 피드백에 적었습니다!! 궁금했던 부분이 있어서요!\\r\\n\\r\\n\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n이번 과제 중 Context API를 사용 할 때, 상태 컨텍스트와 액션 컨텍스트를 분리하여 재렌더링을 최적화 하는 부분이 있었다.\\r\\n```\\r\\n   <ToastStateContext.Provider value={memoizedStateValue}>\\r\\n      <ToastActionContext.Provider value={memoizedActionValue}>\\r\\n        {children}\\r\\n        {visible && createPortal(<Toast />, document.body)}\\r\\n      </ToastActionContext.Provider>\\r\\n    </ToastStateContext.Provider>\\r\\n```\\r\\n나는 현업에서 근무할때도 Context API를 자주 사용하곤했다. 그럼에도 이렇게 분리하여 최적화 할 수 있다는것을 왜 생각하지 못했을까..?\\r\\n이번 과제를 하면서 어떤 코드든지 더 개선할수없을까? 하는 고민을 해봐야 한다고 생각했다.\\r\\n물론 이를 사용하는 컴포넌트가 상태와 액션을 모두 사용한다면 굳이 컨텍스트를 나누지 않아도 성능은 똑같을 수 있다.\\r\\n하지만 이번 과제를 통해 이런 방법도 있다는걸 배웠으니 꼭 적용해봐야겠다.\\r\\n\\r\\n\\r\\n\\r\\n### 과제 피드백\\r\\n전체적으로 이번 과제는 AI사용이 제일 적었고, 반대로 깊이 생각한 시간은 많았다. \\r\\n과제 자체의 난이도는 낮은편이라고 들었는데, 나는 오히려 지난 과제들보다 고뇌하는 과정이 더 많았어서 난이도가 높게 느껴졌다.\\r\\n그리고 이번 과제부터 타입스크립트를 사용하였는데, 원래 현업에서도 계속 사용했지만, 뭔가 그때보다 어렵게 다가왔다.\\r\\n전반적으로 잘 마무리해서 기분은 뿌듯하다!\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n이번 1,2,3주차 과제를 진행하며 내가 이해한 개념들\\r\\n\\r\\n1. 리액트의 렌더링 과정, 가상돔 개념, Reconciliation)\\r\\n- 컴포넌트가 처음 마운트 되거나, 상태의 변경, props의 변경등으로 렌더가 실행된다.\\r\\n- 컴포넌트 함수의 실행으로 JSX를 반환받는다.\\r\\n- 반환받은 JSX로 가상돔 객체를 만든다. (Virtual DOM)\\r\\n- 이전 가상돔 객체와 새롭게 생긴 가상돔을 비교한다. \\r\\n- 무엇이 바뀌었는지 비교 분석한다.\\r\\n  - 위 두 과정이 Diffing (Reconciliation)\\r\\n - 이제 분석 결과를 실제 돔에 반영한다.\\r\\n\\r\\n2. 리액트의 렌더링 최적화 방법\\r\\n- 렌더링은 주로 상태의 변경으로 발생하게 된다.\\r\\n- 따라서 다시 계산될 필요가 없는 상태들을 메모이제이션하여 새 객체가 되지 않도록 한다.\\r\\n  - memo : props가 바뀌지 않으면 해당 컴포넌트 리렌더링을 방지\\r\\n  - useMemo : 계산비용이 큰 값을 디펜던시가 바뀔때만 재 계산\\r\\n  - useCallback : 콜백함수를 디펜던시가 바뀔때만 새로 생성\\r\\n \\r\\n3. 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- useState, useReducer등 초기 상태 설정\\r\\n- 함수형 컴포넌트의 실행으로 JSX반환\\r\\n- useEffect로 마운트 직후 실행 할 동작 설정 (componentDidMount)\\r\\n- useEffect의 의존성 배열로 상태 또는 props 변경 후 실행 할 동작 설정(componentDidUpdate) \\r\\n- useEffect의 return에 언마운트 직전 정리 작업 할 동작 설정 (componentWillUnmount)\\r\\n- memo, useMemo, useCallback등으로 렌더링 여부 결정 및 최적화 (shouldComponentUpdate)\\r\\n\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n리액트 메모이제이션은 불필요한 렌더링이 발생할 때 필요하다.\\r\\n그럼 어떤 환경이 불필요한 렌더링일까?\\r\\n사실 성능 저하가 거의 없는 경우 불필요한 렌더링일지라도 굳이 성능개선을 할 필요는 없다고 생각한다.\\r\\n\\r\\n그래서 내가 생각했을 때 다음과 같은 상황에서 사용해야한다고 생각한다.\\r\\n- 연산 비용이 매우 크다. (정렬, 필터링 반복렌더링 등등..)\\r\\n- 자식에 props로 내려가는 함수나 객체가 바뀌는 경우\\r\\n\\r\\n그럼 언제 불필요할까?\\r\\n- 아주 가벼운 컴포넌트인 경우\\r\\n- 리렌더링 빈도가 높지 않은 경우\\r\\n- 상태가 자주 변경되는 경우\\r\\n\\r\\n메모이제이션을 사용하지 않고 해결할 수 있는 방법은 무엇일까?\\r\\n- 자주 바뀌는 컴포넌트와 그렇지 않은 컴포넌트의 분리\\r\\n- 컨텍스트를 사용하는 경우 액션과 상태의 분리 (이번 과제의 ToastContext에도 적용함!)\\r\\n- 비동기 처리 결과를 최상단에서 관리하지 않기\\r\\n  - 물론 최상단에서 필요한 경우엔 그렇게 사용해야한다.\\r\\n  - 하지만 필요한 요청을 컴포넌트 내부에서 처리하여 전체가 재렌더링되지 않도록 관리한다!\\r\\n\\r\\n메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 장점\\r\\n  - 불필요한 재 렌더링을 막는다.\\r\\n  - 렌더링이 최소화 되므로 성능이 향상된다.\\r\\n  - 의도된 변경만 감지 가능하다.\\r\\n \\r\\n- 단점\\r\\n  - 코드가 복잡해진다.\\r\\n  - 무분별하게 사용하는경우 메모리 사용량만 증가할 가능성이 있다.\\r\\n  - 잘못 사용하는 경우 의도하지 않은 캐싱이 될 수 있다.\\r\\n  - 열심히 최적화 했지만 시간대비 효과가 미미할 수 있다..?\\r\\n    - 위 경우는 메모이제이션의 문제가 아니라 구조적인 문제일 수 있다고 생각한다.\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트는 전역적으로 필요한 데이터를 props로 매번 넘기지 않고 간단히 전달 가능하다.\\r\\n- 상태관리는 컴포넌트간 상태 업데이트의 흐름을 명확하고 깔끔하게 관리하기 위해 필요하다.\\r\\n\\r\\n컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 프롭스 드릴링이 발생할 가능성이 있다.\\r\\n- 여러 컴포넌트에서 동일한 상태를 중복 정의하면 동기화 되지 않거나 일관성을 갖기 힘들다.\\r\\n- 규모가 커질수록 데이터 흐름을 파악하기 어렵기 때문에 위 두 문제가 두드러진다.\\r\\n\\r\\n컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 장점\\r\\n  - 전역 상태에 접근하기 쉽다.\\r\\n  - 디버깅이 용이하다.\\r\\n  - 일관된 상태 관리가 편리하다.\\r\\n\\r\\n- 단점\\r\\n  - 굳이 복잡하지 않을 코드에 적용하는 경우 오히려 작업시간이 증가한다. (오버엔지니어링..)\\r\\n  - 학습 곡선이 존재한다. (코드는 나만 작업하는것이 아니기때문에.. 우리 팀원들이 사용 가능한지도 봐야한다..)\\r\\n  - 오히려 잘못 사용하는 경우 리렌더링이 확산될 수 있다.\\r\\n\\r\\n컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 프롭스드릴링을 최소화 시킨다.\\r\\n- 소규모 앱이라면 상태 끌어올리기 등을 사용한다.\\r\\n- 보안에 이슈가 없는 데이터라면 URL쿼리를 사용하는것도 좋은 방법이다.\\r\\n\\r\\n컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n- 하나의 컨텍스트에 너무 많은 데이터를 다루면 오히려 리렌더링 범위가 넓어지게 된다.\\r\\n- 상태와 액션을 분리하여 불필요한 리렌더링을 줄인다! (이번 과제 내용!)\\r\\n\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n```\\r\\nimport type { RouterInstance } from \\"../Router\\";\\r\\nimport type { AnyFunction } from \\"../types\\";\\r\\nimport { useSyncExternalStore } from \\"react\\";\\r\\nimport { useShallowSelector } from \\"./useShallowSelector\\";\\r\\n\\r\\nconst defaultSelector = <T, S = T>(state: T) => state as unknown as S;\\r\\n\\r\\nexport const useRouter = <T extends RouterInstance<AnyFunction>, S>(router: T, selector = defaultSelector<T, S>) => {\\r\\n  // useSyncExternalStore를 사용하여 router의 상태를 구독하고 가져오는 훅을 구현합니다.\\r\\n\\r\\n  // 셀렉터 함수를 최적화\\r\\n  const shallowSelector = useShallowSelector(selector);\\r\\n\\r\\n  // 최적화 된 getSnapshot 함수\\r\\n  const getSnapshot = () => shallowSelector(router);\\r\\n\\r\\n  // getSnapshot에 최적화된 selector 함수를 전달하여 불필요한 리렌더링 방지\\r\\n  const state = useSyncExternalStore((onStoreChange) => {\\r\\n    router.subscribe(onStoreChange);\\r\\n    return () => {};\\r\\n  }, getSnapshot);\\r\\n\\r\\n  return state;\\r\\n};\\r\\n```\\r\\n위는 이번 과제에 진행했던 useRouter를 구현하는 함수입니다.\\r\\n처음엔 useSyncExternalStore에 구독 해지 함수를 딱히 넣어주지 않았습니다. router.unsubscribe라는 메서드가 딱히 존재하지 않았고, 이렇게 둬도 동작을 하기에..  이해도가 부족한 상태에서 뭔가 더 건드리고 싶지 않아서 일단은 넘어갔습니다.\\r\\n\\r\\n그런데 이렇게 두면 컴포넌트가 언마운트 되어도 useRouter를 호출했던 컴포넌트 수 만큼 메모리 낭비가 이뤄지는게 아닌가 하는 생각이 들었습니다. (그저 단순한 제 추측이긴합니다..)\\r\\n\\r\\n그래서 Router에 빠져있던 unsubscribe를 추가하고 아래와 같이 수정했습니다.\\r\\n```\\r\\n const state = useSyncExternalStore((onStoreChange) => {\\r\\n    router.subscribe(onStoreChange);\\r\\n    return () => router.unsubscribe(onStoreChange);\\r\\n  }, getSnapshot);\\r\\n```\\r\\n\\r\\n위처럼 수정했지만 사실 딱히 체감되는건 없었습니다.. 그래서 어떻게 확인해볼 방법이 없을까? 고민했지만 딱히 방법을 찾지 못했습니다.\\r\\n구독해지가 안되어있을때 정말 메모리 낭비가 이뤄지는지, 그걸 어떻게 확인할 방법이 있는지 궁금합니다. \\r\\n\\r\\n","created_at":"2025-07-21T08:35:55Z","updated_at":"2025-07-25T16:28:53Z","closed_at":null,"merged_at":null,"merge_commit_sha":"af6b96a70546d50425a53e9716c017ce6cfdbe73","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/38/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/38/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/38/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/2ebe2bebe8dc1de5028aa78431238f0f9a8b947a","head":{"label":"Hwirin-Kim:main","ref":"main","sha":"2ebe2bebe8dc1de5028aa78431238f0f9a8b947a","user":{"login":"Hwirin-Kim","id":113874038,"node_id":"U_kgDOBsmUdg","avatar_url":"https://avatars.githubusercontent.com/u/113874038?v=4","gravatar_id":"","url":"https://api.github.com/users/Hwirin-Kim","html_url":"https://github.com/Hwirin-Kim","followers_url":"https://api.github.com/users/Hwirin-Kim/followers","following_url":"https://api.github.com/users/Hwirin-Kim/following{/other_user}","gists_url":"https://api.github.com/users/Hwirin-Kim/gists{/gist_id}","starred_url":"https://api.github.com/users/Hwirin-Kim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hwirin-Kim/subscriptions","organizations_url":"https://api.github.com/users/Hwirin-Kim/orgs","repos_url":"https://api.github.com/users/Hwirin-Kim/repos","events_url":"https://api.github.com/users/Hwirin-Kim/events{/privacy}","received_events_url":"https://api.github.com/users/Hwirin-Kim/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023153892,"node_id":"R_kgDOPPwW5A","name":"front_6th_chapter1-3","full_name":"Hwirin-Kim/front_6th_chapter1-3","private":false,"owner":{"login":"Hwirin-Kim","id":113874038,"node_id":"U_kgDOBsmUdg","avatar_url":"https://avatars.githubusercontent.com/u/113874038?v=4","gravatar_id":"","url":"https://api.github.com/users/Hwirin-Kim","html_url":"https://github.com/Hwirin-Kim","followers_url":"https://api.github.com/users/Hwirin-Kim/followers","following_url":"https://api.github.com/users/Hwirin-Kim/following{/other_user}","gists_url":"https://api.github.com/users/Hwirin-Kim/gists{/gist_id}","starred_url":"https://api.github.com/users/Hwirin-Kim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hwirin-Kim/subscriptions","organizations_url":"https://api.github.com/users/Hwirin-Kim/orgs","repos_url":"https://api.github.com/users/Hwirin-Kim/repos","events_url":"https://api.github.com/users/Hwirin-Kim/events{/privacy}","received_events_url":"https://api.github.com/users/Hwirin-Kim/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/Hwirin-Kim/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/Hwirin-Kim/front_6th_chapter1-3/deployments","created_at":"2025-07-20T16:32:11Z","updated_at":"2025-07-24T12:04:56Z","pushed_at":"2025-07-24T12:04:53Z","git_url":"git://github.com/Hwirin-Kim/front_6th_chapter1-3.git","ssh_url":"git@github.com:Hwirin-Kim/front_6th_chapter1-3.git","clone_url":"https://github.com/Hwirin-Kim/front_6th_chapter1-3.git","svn_url":"https://github.com/Hwirin-Kim/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":123,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/38"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/38"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/38"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/38/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/38/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/38/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/2ebe2bebe8dc1de5028aa78431238f0f9a8b947a"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/39","id":2682254779,"node_id":"PR_kwDOPMCTuc6f3_W7","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/39","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/39.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/39.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/39","number":39,"state":"open","locked":false,"title":"[9팀 임규원] Chapter 1-3. React, Beyond the Basics","user":{"login":"q1Lim","id":19428455,"node_id":"MDQ6VXNlcjE5NDI4NDU1","avatar_url":"https://avatars.githubusercontent.com/u/19428455?v=4","gravatar_id":"","url":"https://api.github.com/users/q1Lim","html_url":"https://github.com/q1Lim","followers_url":"https://api.github.com/users/q1Lim/followers","following_url":"https://api.github.com/users/q1Lim/following{/other_user}","gists_url":"https://api.github.com/users/q1Lim/gists{/gist_id}","starred_url":"https://api.github.com/users/q1Lim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/q1Lim/subscriptions","organizations_url":"https://api.github.com/users/q1Lim/orgs","repos_url":"https://api.github.com/users/q1Lim/repos","events_url":"https://api.github.com/users/q1Lim/events{/privacy}","received_events_url":"https://api.github.com/users/q1Lim/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://q1lim.github.io/front_6th_chapter1-3/\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n1. 재밌었다!\\r\\n무의식적으로 사용하는 hook에 대해 깊게 생각하지 않았는데 React 내부의 hook을 구현해보면서 작동 원리를 이해할 수 있는 기회가 되었습니다. 개인적으로 세번째 과제는 이 쇼핑몰 시리즈(?) 중에서 제일 흥미로웠습니다!\\r\\n \\r\\n2. 설계 친구 AI\\r\\n이번 과제의 목표는 AI에 대한 의존도를 낮추는 것이었습니다. (하지만 안 쓸 수 없는 😔 ) AI는 함수 내부에 구현해야 하는 요구사항을 정리하고, 설계에 도움을 주는 가이드 역할로만 설정했습니다. 처음부터 구현한 코드를 보여주지 말라는 요청과 함께 과제를 진행하다 보니 중간중간 답답한 부분도 있었고, 특정 함수를 직접 구현해 달라고 한 적도 있었지만 이러한 방식이 결국 스스로 사고하고 구현하는 힘을 기르는 데 더 효과적이었다고 느꼈습니다. \\r\\n\\r\\n3. 친해지고 싶은 TS\\r\\n실무에서 React만 썼기 때문에 아직 TS 타입 사용이 능숙하지 않아서 시간을 많이 소요했습니다. 아마 AI에게 추가 질문을 제일 많이 한 부분이 타입 관련 질문이었던 것 같습니다. \\r\\n\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n진행하면서 고민했던 부분을 노션으로 나열(?)했습니다. \\r\\n[의식의 흐름을 나열해보자](https://www.notion.so/3-SPA-1-3-React-Hooks-22c507231d1b809a8a55edfe89873293)\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n자랑하고 싶은 코드가 있었으면 좋았겠지만 이번 과제에서는 없습니다.\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n- 심화과제 ToastProvider의 useMemo()\\r\\n```ts\\r\\nexport const ToastProvider = memo(({ children }: PropsWithChildren) => {\\r\\n  const [state, dispatch] = useReducer(toastReducer, initialState);\\r\\n  const { show, hide } = useMemo(() => createActions(dispatch), [dispatch]); // useMemo 1#\\r\\n  const visible = state.message !== \\"\\";\\r\\n\\r\\n  const hideAfter = useMemo(() => debounce(hide, DEFAULT_DELAY), [hide]); // useMemo 2#\\r\\n\\r\\n  const showWithHide: ShowToast = useAutoCallback((...args) => {\\r\\n    show(...args);\\r\\n    hideAfter();\\r\\n  });\\r\\n\\r\\n  const toastActionValue = useMemo(() => ({ show: showWithHide, hide }), [showWithHide, hide]); // useMemo 3#\\r\\n  const toastStateValue = useMemo(() => ({ message: state.message, type: state.type }), [state.message, state.type]); // useMemo 4#\\r\\n\\r\\n  return (\\r\\n    <ToastActionContext.Provider value={toastActionValue}>\\r\\n      <ToastStateContext.Provider value={toastStateValue}>\\r\\n        {children}\\r\\n        {visible && createPortal(<Toast />, document.body)}\\r\\n      </ToastStateContext.Provider>\\r\\n    </ToastActionContext.Provider>\\r\\n  );\\r\\n});\\r\\n```\\r\\nuseMemo와 useAutoCallback을 활용해 리렌더링을 방지했고, 이 과정이 심화 과제의 목적이라는 것도 이해하고 있습니다. 다만, 생각보다 많은 곳에 useMemo를 사용하다 보니 정말 이 정도까지 필요한지, 혹은 과한 최적화는 아닌지에 대한 고민이 생겼습니다. 학습 목적으로 useMemo를 적극 활용하는 건 이해되지만, 실제 이렇게 많은 useMemo 사용이 일반적일까? 라는 생각도 들었습니다. \\r\\n\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n- 추가 학습이 필요한 영역까지는 아니지만, useRef가 useState를 이용해서 구현할 수 있다면 이번엔 useState를 구현해보고 싶다는 생각이 들었습니다. (가까운 미래의 나에게 전달 🤾 )\\r\\n- HOC에 대해 개념을 익혔고, 유용하게 활용하고 싶어서 HOC 구조를 연습하고자 합니다.\\r\\n- 심화과정에서 Context를 분리에서 구현하는 방법은 학습메이트님에게 힌트를 얻어서 진행했는데, 이 부분에 대해 실무에 적용하면 효과적이라고 생각했습니다. 특히 이번 심화과제에서의 type, message와 show, hide처럼 역할이 다른 데이터를 구분하여 분리하는 구조는 렌더링 최적화에 도움이 된다고 생각했습니다. 다만 Context 분리 시에 어떤 데이터가 어떤 컴포넌트에 영향을 미치는지에 대한 범위를 충분히 고려해서 설계해야할 것 같다는 생각 또한 들었습니다. (무분별한 Provider 감싸기는 코드의 가독성을 낮춰줄 것 같아요ㅠ)\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n진행한 과제중에 재밌다고 느꼈던 부분 중 하나가 과제에 대한 소소한 힌트들도 한몫했습니다. 👍 그리고 참고할 수 있는 학습자료도 많고, 아카이브가 잘 되어있어서 공부하는데 많은 도움이 되었습니다. \\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n<리액트의 렌더링 과정>\\r\\n- 렌더 트리거 : 상태 변경, props 변경, context 값 변경 등으로 컴포넌트가 다시 렌더링 됩니다. \\r\\n- 렌더 단계 : React는 변경된 컴포넌트를 함수처럼 다시 호출해서 jsx를 반환합니다. 이 과정에서 Virtual DOM이 새롭게 생성됩니다. 실제 브라우저에서는 반영되지 않지만 어떤 변화가 이루어졌는지 diff 계산을 진행합니다.\\r\\n- 커밋 단계 : Reconciliation (이전 Virtual DOM과 비교해 변경된 부분만 찾기)을 진행하고 실제로 변경된 DOM 조각만 실제 DOM에 반영합니다. \\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n메모이제이션의 핵심은 \'비용\'과 \'빈도\'라고 생각합니다. 연산량이 많고, 비용이 많이 드는 반복되는 계산이 많은 상황에서 불필요한 리렌더링을 방지하는 부분에서 활용됩니다. \\r\\n- 장점 : 불필요한 계산을 피하고 렌더링 성능 개선 가능\\r\\n하지만 무조건적인 메모이제이션의 사용은 메모이제이션 관리에 리소스를 더 소요할 수 있습니다. \\r\\n- 단점 : 코드 관리 복잡도 증가, 의존성 관리 부담\\r\\n메모이제이션은 성능 최적화할 수 있는 여러 방법 중 선택할 수 있는 옵션 중 하나라고 생각합니다.  \\r\\n\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n저는 준일코치님이 세션때 말씀주셨던 것처럼 관심사 분리와 참조 동일성이 먼저 떠오른 것 같습니다.\\r\\n- 관심사 분리\\r\\n UI와 비즈니스 로직 등 관심사 분리할 수 있어서 한 파일에 하나의 역할만 집중해서 협업 시 코드를 빠르게 이해하는데 도움이 될 것 같습니다. \\r\\n- 참조 동일성\\r\\n컨텍스트를 사용하는 것은 결국 동일한 데이터 혹은 상태를 공유해서 데이터의 일관성을 유지하기 위해 사용할 수 있는 방법 중 하나라고 생각합니다. 실무에서 컨텍스트를 사용했을 때는 항상 Provider를 감싸지 않은 영역에서 데이터를 참조하고 싶어서 어떻게 해야하지를 많이 고민했던 것 같습니다ㅎㅎ \\r\\n\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-21T15:00:17Z","updated_at":"2025-07-27T05:56:03Z","closed_at":null,"merged_at":null,"merge_commit_sha":"e13a2afd5e0ed108d48749b6902d166e5a82213a","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/39/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/39/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/39/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/a14fc5663dc0c4935de43c0c4529bacb4a26173d","head":{"label":"q1Lim:main","ref":"main","sha":"a14fc5663dc0c4935de43c0c4529bacb4a26173d","user":{"login":"q1Lim","id":19428455,"node_id":"MDQ6VXNlcjE5NDI4NDU1","avatar_url":"https://avatars.githubusercontent.com/u/19428455?v=4","gravatar_id":"","url":"https://api.github.com/users/q1Lim","html_url":"https://github.com/q1Lim","followers_url":"https://api.github.com/users/q1Lim/followers","following_url":"https://api.github.com/users/q1Lim/following{/other_user}","gists_url":"https://api.github.com/users/q1Lim/gists{/gist_id}","starred_url":"https://api.github.com/users/q1Lim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/q1Lim/subscriptions","organizations_url":"https://api.github.com/users/q1Lim/orgs","repos_url":"https://api.github.com/users/q1Lim/repos","events_url":"https://api.github.com/users/q1Lim/events{/privacy}","received_events_url":"https://api.github.com/users/q1Lim/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023409106,"node_id":"R_kgDOPP_70g","name":"front_6th_chapter1-3","full_name":"q1Lim/front_6th_chapter1-3","private":false,"owner":{"login":"q1Lim","id":19428455,"node_id":"MDQ6VXNlcjE5NDI4NDU1","avatar_url":"https://avatars.githubusercontent.com/u/19428455?v=4","gravatar_id":"","url":"https://api.github.com/users/q1Lim","html_url":"https://github.com/q1Lim","followers_url":"https://api.github.com/users/q1Lim/followers","following_url":"https://api.github.com/users/q1Lim/following{/other_user}","gists_url":"https://api.github.com/users/q1Lim/gists{/gist_id}","starred_url":"https://api.github.com/users/q1Lim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/q1Lim/subscriptions","organizations_url":"https://api.github.com/users/q1Lim/orgs","repos_url":"https://api.github.com/users/q1Lim/repos","events_url":"https://api.github.com/users/q1Lim/events{/privacy}","received_events_url":"https://api.github.com/users/q1Lim/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/q1Lim/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/q1Lim/front_6th_chapter1-3/deployments","created_at":"2025-07-21T06:00:25Z","updated_at":"2025-07-24T18:20:30Z","pushed_at":"2025-07-24T18:20:26Z","git_url":"git://github.com/q1Lim/front_6th_chapter1-3.git","ssh_url":"git@github.com:q1Lim/front_6th_chapter1-3.git","clone_url":"https://github.com/q1Lim/front_6th_chapter1-3.git","svn_url":"https://github.com/q1Lim/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":288,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/39"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/39"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/39"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/39/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/39/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/39/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/a14fc5663dc0c4935de43c0c4529bacb4a26173d"}},"author_association":"FIRST_TIME_CONTRIBUTOR","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/40","id":2682416515,"node_id":"PR_kwDOPMCTuc6f4m2D","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/40","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/40.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/40.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/40","number":40,"state":"open","locked":false,"title":"[6팀 정용준] Chapter 1-3. React, Beyond the Basics","user":{"login":"dkile","id":29909393,"node_id":"MDQ6VXNlcjI5OTA5Mzkz","avatar_url":"https://avatars.githubusercontent.com/u/29909393?v=4","gravatar_id":"","url":"https://api.github.com/users/dkile","html_url":"https://github.com/dkile","followers_url":"https://api.github.com/users/dkile/followers","following_url":"https://api.github.com/users/dkile/following{/other_user}","gists_url":"https://api.github.com/users/dkile/gists{/gist_id}","starred_url":"https://api.github.com/users/dkile/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkile/subscriptions","organizations_url":"https://api.github.com/users/dkile/orgs","repos_url":"https://api.github.com/users/dkile/repos","events_url":"https://api.github.com/users/dkile/events{/privacy}","received_events_url":"https://api.github.com/users/dkile/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://dkile.github.io/front_6th_chapter1-3/\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n결국 참조와 호출 시점의 문제가 대부분이고 로직 상 어려운 포인트는 없어서 과제를 수행하는데에 어려움은 없었습니다. 직접 만들어보니 그냥 재밌었어요. useAutoCallback 같은 훅들을 더 생각해내고 만들어보고 싶습니다.\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\nuseAutoCallback이란 훅을 처음 접했는데 아주 맛도리인 것 같아요. 사소한 부분이지만 지속적으로 사용이 가능한 그런 훅인데 useCallback에 사로잡혀 리액트 공식 문서만 읽던 저에게 큰 충격이었습니다.\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n피드백이라기 보다 한가지 궁금한 점이 생겨 질문 드립니다.\\r\\nreact에서 의도한 동작을 하기 위해 dependency array에 의존성을 빼는 경우가 종종 있습니다. react에서 권장하는 사항은 dependency array에 모든 의존성을 추가하는 것인데 코드를 작성하면서 이런 부분이 머리 속에서 자꾸 충돌이 나네요..\\r\\n코치님은 어떻게 하시나요? 저는 이전에는 무조건 추가하는게 향후에 버그를 줄일 수 있다는 생각이었는데 점차 어쨋거나 의도한 동작을 하는게 우선이다로 바뀌고 있어요.\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-21T15:57:49Z","updated_at":"2025-07-26T05:16:58Z","closed_at":null,"merged_at":null,"merge_commit_sha":"79f032b89f82faa45696f44e7e383c076efa42dc","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/40/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/40/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/40/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/062575fa7b1a3a34e1f9053f11b0ff071d669436","head":{"label":"dkile:main","ref":"main","sha":"062575fa7b1a3a34e1f9053f11b0ff071d669436","user":{"login":"dkile","id":29909393,"node_id":"MDQ6VXNlcjI5OTA5Mzkz","avatar_url":"https://avatars.githubusercontent.com/u/29909393?v=4","gravatar_id":"","url":"https://api.github.com/users/dkile","html_url":"https://github.com/dkile","followers_url":"https://api.github.com/users/dkile/followers","following_url":"https://api.github.com/users/dkile/following{/other_user}","gists_url":"https://api.github.com/users/dkile/gists{/gist_id}","starred_url":"https://api.github.com/users/dkile/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkile/subscriptions","organizations_url":"https://api.github.com/users/dkile/orgs","repos_url":"https://api.github.com/users/dkile/repos","events_url":"https://api.github.com/users/dkile/events{/privacy}","received_events_url":"https://api.github.com/users/dkile/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023045089,"node_id":"R_kgDOPPpt4Q","name":"front_6th_chapter1-3","full_name":"dkile/front_6th_chapter1-3","private":false,"owner":{"login":"dkile","id":29909393,"node_id":"MDQ6VXNlcjI5OTA5Mzkz","avatar_url":"https://avatars.githubusercontent.com/u/29909393?v=4","gravatar_id":"","url":"https://api.github.com/users/dkile","html_url":"https://github.com/dkile","followers_url":"https://api.github.com/users/dkile/followers","following_url":"https://api.github.com/users/dkile/following{/other_user}","gists_url":"https://api.github.com/users/dkile/gists{/gist_id}","starred_url":"https://api.github.com/users/dkile/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkile/subscriptions","organizations_url":"https://api.github.com/users/dkile/orgs","repos_url":"https://api.github.com/users/dkile/repos","events_url":"https://api.github.com/users/dkile/events{/privacy}","received_events_url":"https://api.github.com/users/dkile/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/dkile/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/dkile/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/dkile/front_6th_chapter1-3/deployments","created_at":"2025-07-20T12:10:59Z","updated_at":"2025-07-24T13:43:10Z","pushed_at":"2025-07-24T13:43:06Z","git_url":"git://github.com/dkile/front_6th_chapter1-3.git","ssh_url":"git@github.com:dkile/front_6th_chapter1-3.git","clone_url":"https://github.com/dkile/front_6th_chapter1-3.git","svn_url":"https://github.com/dkile/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":296,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/40"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/40"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/40"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/40/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/40/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/40/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/062575fa7b1a3a34e1f9053f11b0ff071d669436"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/41","id":2682424708,"node_id":"PR_kwDOPMCTuc6f4o2E","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/41","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/41.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/41.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/41","number":41,"state":"open","locked":false,"title":"[4팀 김소희] Chapter 1-3. React, Beyond the Basics","user":{"login":"esoby","id":138556584,"node_id":"U_kgDOCEI0qA","avatar_url":"https://avatars.githubusercontent.com/u/138556584?v=4","gravatar_id":"","url":"https://api.github.com/users/esoby","html_url":"https://github.com/esoby","followers_url":"https://api.github.com/users/esoby/followers","following_url":"https://api.github.com/users/esoby/following{/other_user}","gists_url":"https://api.github.com/users/esoby/gists{/gist_id}","starred_url":"https://api.github.com/users/esoby/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/esoby/subscriptions","organizations_url":"https://api.github.com/users/esoby/orgs","repos_url":"https://api.github.com/users/esoby/repos","events_url":"https://api.github.com/users/esoby/events{/privacy}","received_events_url":"https://api.github.com/users/esoby/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n[esoby.github.io/front_6th_chapter1-3/](https://esoby.github.io/front_6th_chapter1-3/)\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n1. <code>useSyncExternalStore</code> 훅의 존재를 알게 되다 !\\r\\n\\r\\n- 렌더링이 일시정지 될 수도 있는(!) Concurrent Features 환경에서 외부 스토어에서 관리되는 상태와 컴포넌트 간의 Tearing 현상을 방지하고 안전하게 동기화하기 위해 사용되는 훅이다.\\r\\n- 심화 과제 들어가기 전에 수업 교재도 읽고 공식 문서도 찾아보고 팀장님의 블로그 글도 정독하고 ~ 개념 이해에 시간이 많이 들었던 것 같다 . . \\\\* 상태 관리 라이브러리는 자주 사용했는데 내부적으로 요런 게 사용되고 있는지 처음 알았다!\\r\\n\\r\\n2. 참조 동일성에 대해 다시 생각해보다 !\\r\\n\\r\\n- 코딩을 C언어로 시작해서 너무 다행이에요. < ?\\r\\n- shallowEquals를 직접 구현하면서, 눈에 보이는 데이터의 내용 변동이 아닌 메모리 상의 참조 값 변경이 렌더링에 영향을 미친다는 것을 다시 한 번 머리에 집어넣게 되었습니다.\\r\\n\\r\\n3. 최적화 훅들의 역할을 명확히 하다 !\\r\\n\\r\\n- 렌더링 최적화를 위한 use~ 친구들에 대해 이론적으로만 알고 있었다는 사실을 깨달았습니다. 직접 함수나 컨텍스트 하나하나 렌더링과의 연결고리를 생각해보고 최적화 도구들을 적절하게 넣어보는 .. 경험 덕분에 좀 더 각각의 역할이 명확하게 정리된 것 같습니다.\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n1. <code>useShallowSelector</code>와 절교 위기에 봉착하다\\r\\n\\r\\n- 자랑은 아니고 .. 저 얘 때문에 너무 힘들었어요. 제가 너무너무 어렵고 복잡하게 생각해서 혼자 둘레길 한바퀴 돌고 돌아온 것 같ㅅ브니다..\\r\\n\\r\\n```typescript\\r\\n// ...\\r\\nconst memoizedSelector = useCallback((state: T): S => {\\r\\n// ...\\r\\n  return selectedRef.current as S;\\r\\n}, []); \\r\\n\\r\\nreturn memoizedSelector;\\r\\n```\\r\\n- 그니까 저는 useShallowSelector 훅의 반환 값도 useCallback으로 참조 안정화를 시켜 리턴해야 한다고 생각했거든요. . . 저렇게 복잡하게 운을 떼니까 아주 한참 헤맸고 ai랑도 싸웠고요 .. 익명 함수로 리턴하니까 useStore 테스트 코드 렌더링 횟수가 일치하게 되더라고요 엉엉어ㅡㅇ 심화 과제 때는 개념이 모호했어서 그런지 자꾸 테스트 코드의 기대와 멀어지는 일이 많았읍니다.\\r\\n\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n1. Object.is 적용\\r\\n2. Object.prototype.hasOwnProperty.call 적용\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n1. 훅에 중독되다 .. !\\r\\n\\r\\n- 실 과제 작업 기간인 약 4일 간, 회사 업무에서 커스텀 훅을 6개 정도 생성해내었습니다. 관심사 분리가 안 된다거나 한 컴포넌트 내 스크립트가 너무 무겁다거나 다시 보니 한 눈에 안 들어오는 코드라거나 .. 다 냅다 빼고 있어요! 리팩토링 할 때도 기능 구현 관점에서만 생각하지 않고 렌더링 트리거에 대해서도 점검하는 습관이 생겼습니다 아이 조아\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n- 자바스크립트 (강제) 딥 다이브! 너무 의미있는 시간이었던 것 같아요 이번 챕터 과제 덕분에 시야가 많이 넓어진 것 같습니다. 아쉬운 점이 많아서 종강하고 다시 들여다보고 싶어요!\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n- 리액트의 렌더링은 상태 변경, 프롭스 변경, 컨텍스트 변경, 부모 컴포넌트 리렌더링 등으로 유발됩니다. 트리거가 활성화되면 리액트는 해당 컴포넌트부터 모든 자식 컴포넌트 함수를 호출합니다! 리액트는 함수로부터 반환된 JSX를 가상 dom 객체 형태로 변환하고, 이전 렌더링 타이밍의 가상 dom 트리와 diff 알고리즘을 통해 변동 사항을 확인합니다. 그리고 실제 DOM에 변경 사항을 최소 단위로 적용합니다.\\r\\n- 불필요한 렌더링을 최대한 줄이는 것이 렌더링 최적화의 방향입니다. 메모리를 적절하게 사용해서 렌더링을 유발하지 않는 값을 관리하거나, 변경 여부를 판단해 렌더링을 트리거합니다.\\r\\n    - useState, useReducer, useRef, useMemo, useCallback\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n- 메모! 해두는 것! 입니다. 반복적으로 불필요한 연산을 하거나 렌더링 트리거가 되는 것을 방지하기 위해 이전 결과값을 저장해두고 재사용하는 최적화 기법입니다. 연산 시간을 절약해 애플리케이션 성능 향상을 기대할 수 있지만, 메모이제이션 자체의 비용과 메모리 사용량 때문에 오버헤드가 발생하지 않도록 메모이제이션 대상을 잘! 고려해야 합니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n- 여러 컴포넌트에서 필요로 하는 데이터를 효율적으로 공유하기 위해 필요합니다. 데이터를 공유하고자 데이터를 계속계속 부모로 끌어올리는 것도 불필요한 렌더링을 유발하고, 프롭스 드릴링이 생겨 코드 유지 보수가 어려워질 수 있습니다! 하지만 스토어가 너무 무거운 것도 .. 데이터 흐름 파악이 어려우지기 때문에 적당히 ~!\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요.\\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-21T16:00:56Z","updated_at":"2025-07-29T00:16:13Z","closed_at":null,"merged_at":null,"merge_commit_sha":"2f292cfcfc443374d39126178aa8f909fb36232e","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/41/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/41/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/41/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/982e40f57c7167cf1ecd925906ee572465e647d7","head":{"label":"esoby:main","ref":"main","sha":"982e40f57c7167cf1ecd925906ee572465e647d7","user":{"login":"esoby","id":138556584,"node_id":"U_kgDOCEI0qA","avatar_url":"https://avatars.githubusercontent.com/u/138556584?v=4","gravatar_id":"","url":"https://api.github.com/users/esoby","html_url":"https://github.com/esoby","followers_url":"https://api.github.com/users/esoby/followers","following_url":"https://api.github.com/users/esoby/following{/other_user}","gists_url":"https://api.github.com/users/esoby/gists{/gist_id}","starred_url":"https://api.github.com/users/esoby/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/esoby/subscriptions","organizations_url":"https://api.github.com/users/esoby/orgs","repos_url":"https://api.github.com/users/esoby/repos","events_url":"https://api.github.com/users/esoby/events{/privacy}","received_events_url":"https://api.github.com/users/esoby/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022460328,"node_id":"R_kgDOPPGBqA","name":"front_6th_chapter1-3","full_name":"esoby/front_6th_chapter1-3","private":false,"owner":{"login":"esoby","id":138556584,"node_id":"U_kgDOCEI0qA","avatar_url":"https://avatars.githubusercontent.com/u/138556584?v=4","gravatar_id":"","url":"https://api.github.com/users/esoby","html_url":"https://github.com/esoby","followers_url":"https://api.github.com/users/esoby/followers","following_url":"https://api.github.com/users/esoby/following{/other_user}","gists_url":"https://api.github.com/users/esoby/gists{/gist_id}","starred_url":"https://api.github.com/users/esoby/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/esoby/subscriptions","organizations_url":"https://api.github.com/users/esoby/orgs","repos_url":"https://api.github.com/users/esoby/repos","events_url":"https://api.github.com/users/esoby/events{/privacy}","received_events_url":"https://api.github.com/users/esoby/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/esoby/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/esoby/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/esoby/front_6th_chapter1-3/deployments","created_at":"2025-07-19T05:52:40Z","updated_at":"2025-07-24T15:24:06Z","pushed_at":"2025-07-24T15:31:18Z","git_url":"git://github.com/esoby/front_6th_chapter1-3.git","ssh_url":"git@github.com:esoby/front_6th_chapter1-3.git","clone_url":"https://github.com/esoby/front_6th_chapter1-3.git","svn_url":"https://github.com/esoby/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":304,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/41"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/41"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/41"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/41/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/41/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/41/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/982e40f57c7167cf1ecd925906ee572465e647d7"}},"author_association":"FIRST_TIME_CONTRIBUTOR","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/42","id":2684399553,"node_id":"PR_kwDOPMCTuc6gAK_B","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/42","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/42.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/42.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/42","number":42,"state":"open","locked":false,"title":"[8팀 현지수] Chapter 1-3. React, Beyond the Basics","user":{"login":"hyunzsu","id":108773199,"node_id":"U_kgDOBnu_Tw","avatar_url":"https://avatars.githubusercontent.com/u/108773199?v=4","gravatar_id":"","url":"https://api.github.com/users/hyunzsu","html_url":"https://github.com/hyunzsu","followers_url":"https://api.github.com/users/hyunzsu/followers","following_url":"https://api.github.com/users/hyunzsu/following{/other_user}","gists_url":"https://api.github.com/users/hyunzsu/gists{/gist_id}","starred_url":"https://api.github.com/users/hyunzsu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hyunzsu/subscriptions","organizations_url":"https://api.github.com/users/hyunzsu/orgs","repos_url":"https://api.github.com/users/hyunzsu/repos","events_url":"https://api.github.com/users/hyunzsu/events{/privacy}","received_events_url":"https://api.github.com/users/hyunzsu/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://hyunzsu.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n과제를 진행하면서 [상세 문서화](https://therapeutic-princess-27b.notion.site/Chapter-1-3-React-Beyond-the-Basics-2370b60a3d1480eab537fa427815602c?source=copy_link) 작성했습니다.\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n\\r\\n- **React hooks 내부 동작 원리 이해:** useState, useRef, useMemo, useCallback의 내부 구현을 직접 작성하며 React의 렌더링 최적화 메커니즘을 체득\\r\\n\\r\\n  - **메모이제이션 패턴:** useRef를 활용한 이전 값 저장과 shallowEquals를 통한 변경 감지 로직을 일관되게 적용\\r\\n\\r\\n- **비교 알고리즘 구현:** shallowEquals와 deepEquals 함수를 통해 JavaScript 객체 비교의 미묘한 차이점 학습\\r\\n  - **5단계 비교 프로세스:** 참조 동일성 → 타입 검증 → null 체크 → 키 개수 비교 → 값 비교 순서로 최적화된 비교 로직 구현\\r\\n\\r\\n- **최적화 전략 구현:** useAutoCallback, useShallowState, useShallowSelector 등 실무에서 유용한 커스텀 훅 설계\\r\\n\\r\\n  - **Stale Closure 방지:** useAutoCallback에서 useRef와 useCallback 조합으로 항상 최신 값 참조하면서도 안정된 함수 참조 제공\\r\\n  - **참조 안정성:** shallowEquals 기반으로 불필요한 리렌더링 방지하는 최적화 패턴 습득\\r\\n\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n#### ToastProvider의 Context 분리\\r\\n```typescript\\r\\n// Command Context와 State Context 분리\\r\\nconst ToastCommandContext = createContext<{\\r\\n  show: ShowToast;\\r\\n  hide: Hide;\\r\\n}>({\\r\\n  show: () => null,\\r\\n  hide: () => null,\\r\\n});\\r\\n\\r\\nconst ToastStateContext = createContext<{\\r\\n  message: string;\\r\\n  type: ToastType;\\r\\n}>({\\r\\n  ...initialState,\\r\\n});\\r\\n```\\r\\n자주 변하는 상태(message, type)와 거의 변하지 않는 함수들(show, hide)을 별도 Context로 분리하여 불필요한 리렌더링을 방지하였습니다.\\r\\n\\r\\n\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\nReact의 메모이제이션이 단순한 캐싱이 아닌, 참조 동일성 기반의 리렌더링 최적화 시스템임을 이해\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\nReact의 렌더링 과정은 상태 변경 → 가상 DOM 생성 → 비교(Reconciliation) → 실제 DOM 업데이트 순으로 이루어집니다.\\r\\n이번 과제에서 useState를 직접 구현하면서 렌더링 트리거의 핵심을 이해했습니다. React는 Object.is()로 이전 값과 새 값을 비교해서 다를 때만 리렌더링을 시작하죠. 그래서 setState([...arr])처럼 새로운 참조를 만들어야 변경을 감지할 수 있어요.\\r\\n컴포넌트가 리렌더링되면 기본적으로 모든 하위 컴포넌트도 함께 리렌더링됩니다. 이때 Virtual DOM을 통해 이전 트리와 새 트리를 비교하고, 실제로 변경된 부분만 DOM에 반영하는 것이 React의 핵심 최적화입니다.\\r\\n렌더링 최적화를 위해서는 memo로 컴포넌트 메모이제이션, useMemo로 값 메모이제이션, useCallback으로 함수 메모이제이션을 활용할 수 있습니다. 이들은 모두 얕은 비교를 통해 불필요한 재계산을 방지하는 원리로 동작합니다.\\r\\n결국 React의 렌더링은 \\"참조 비교 기반의 변경 감지\\"와 \\"Virtual DOM을 통한 효율적인 업데이트\\"가 핵심이라고 정리할 수 있습니다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n메모이제이션은 단순한 캐싱이 아니라 의존성 관리가 핵심이라는 걸 깨달았습니다.\\r\\nuseCallback을 직접 구현하면서 의존성 배열의 중요성을 체감했어요. 의존성을 빼먹으면 stale closure 문제가 생기고, 너무 많이 넣으면 매번 새로운 함수가 생성되어 메모이제이션 효과가 사라지죠. \\r\\n메모이제이션이 필요한 경우는 크게 두 가지입니다. 첫째는 expensive한 계산(복잡한 배열 처리, 수학 연산 등)을 반복하는 경우, 둘째는 자식 컴포넌트의 불필요한 리렌더링을 방지하는 경우죠.\\r\\n하지만 메모이제이션을 남용하면 오히려 성능이 악화될 수 있습니다. 메모리 사용량이 늘어나고, 얕은 비교 연산 자체도 비용이기 때문이에요. 특히 자주 변경되는 값을 메모이제이션하면 비교 비용만 추가되는 상황이 발생합니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\nContext와 상태관리가 필요한 이유는 prop drilling 문제와 전역 상태 공유 때문입니다. 깊은 컴포넌트 트리에서 상태를 전달하려면 중간 컴포넌트들이 불필요하게 props를 받아야 하고, 이는 코드의 복잡성을 크게 증가시키죠.\\r\\n하지만 Context는 양날의 검입니다. ToastContext와 ModalContext를 개선하면서 깨달은 건데, Context 값이 변경되면 Provider 하위의 모든 컴포넌트가 리렌더링됩니다. 이는 성능상 큰 문제가 될 수 있어요.\\r\\nContext 설계 시 가장 중요한 것은 변경 빈도에 따른 분리입니다. 자주 변하는 상태(input value, loading state)와 거의 변하지 않는 상태(theme, user info)는 별도의 Context로 관리해야 합니다. 또한 useShallowSelector를 구현하면서 느낀 건데, \\"필요한 데이터만 구독\\"하는 것이 상태관리의 핵심이에요.\\r\\nContext의 대안으로는 상태를 적절히 끌어올리기(lifting state up), 컴포넌트 합성 패턴, 또는 외부 상태관리 라이브러리 사용이 있습니다. 특히 복잡한 전역 상태는 Zustand나 Redux 같은 라이브러리가 더 효율적인 구독 메커니즘을 제공하죠.\\r\\n결론적으로 단순한 상태는 useState로, 중간 복잡도는 Context로, 복잡한 전역 상태는 전용 라이브러리로 접근하는 것이 현실적인 선택이라고 생각합니다. Context는 만능 해결책이 아니라 특정 상황에 적합한 도구로 봐야 해요.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n### 1. deepEquals 순환 참조 처리의 필요성과 구현 방법\\r\\n현재 deepEquals는 순환 참조 처리 없이 단순 재귀로 구현되어 있습니다.\\r\\n```typescript\\r\\nfor (const key of keysA) {\\r\\n  if (!(key in recordB)) return false;\\r\\n  if (!deepEquals(recordA[key], recordB[key])) return false; // 순환 참조 시 스택 오버플로우\\r\\n}\\r\\n```\\r\\nReact의 props나 state에서 순환 참조가 발생하는 실제 사례가 얼마나 빈번한지, 그리고 WeakSet을 사용한 순환 참조 추적 로직의 성능 오버헤드와 메모리 사용량 증가를 고려했을 때 실용적인 개선인지 궁금합니다. 라이브러리 수준에서는 안정성을 위해 필요하지만, 애플리케이션 수준에서는 불필요한 복잡성일 수도 있을 것 같은데 어떤 기준으로 판단하면 좋을까요?\\r\\n\\r\\n### 2. useAutoCallback의 개발자 경험\\r\\n의존성 배열 관리의 복잡성을 해결하기 위해 useAutoCallback을 구현했습니다.\\r\\n```typescript\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  const fnRef = useRef(fn);\\r\\n  fnRef.current = fn;\\r\\n\\r\\n  return useCallback((...args: Parameters<T>) => {\\r\\n    return fnRef.current(...args);\\r\\n  }, []) as T;\\r\\n};\\r\\n```\\r\\n이 접근법이 실제 개발 실무에서 얼마나 유용할지 궁금합니다! 개발자는 의존성을 신경 쓰지 않아도 되는 편의성을 얻지만, 함수가 매번 새로 생성되어도 참조는 안정적이므로 \\"진짜 변경된 것만 감지\\"하는 React의 최적화 철학과는 거리가 있는 것 같아 질문합니다.\\r\\n\\r\\n\\r\\n","created_at":"2025-07-22T07:04:47Z","updated_at":"2025-07-28T15:35:45Z","closed_at":null,"merged_at":null,"merge_commit_sha":"5227a55de4f739c3f799b2da57144834cc80eabf","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/42/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/42/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/42/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/c5ca529ea0fa476f3cd419ddccf9d0b30c14c39a","head":{"label":"hyunzsu:main","ref":"main","sha":"c5ca529ea0fa476f3cd419ddccf9d0b30c14c39a","user":{"login":"hyunzsu","id":108773199,"node_id":"U_kgDOBnu_Tw","avatar_url":"https://avatars.githubusercontent.com/u/108773199?v=4","gravatar_id":"","url":"https://api.github.com/users/hyunzsu","html_url":"https://github.com/hyunzsu","followers_url":"https://api.github.com/users/hyunzsu/followers","following_url":"https://api.github.com/users/hyunzsu/following{/other_user}","gists_url":"https://api.github.com/users/hyunzsu/gists{/gist_id}","starred_url":"https://api.github.com/users/hyunzsu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hyunzsu/subscriptions","organizations_url":"https://api.github.com/users/hyunzsu/orgs","repos_url":"https://api.github.com/users/hyunzsu/repos","events_url":"https://api.github.com/users/hyunzsu/events{/privacy}","received_events_url":"https://api.github.com/users/hyunzsu/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023535476,"node_id":"R_kgDOPQHpdA","name":"front_6th_chapter1-3","full_name":"hyunzsu/front_6th_chapter1-3","private":false,"owner":{"login":"hyunzsu","id":108773199,"node_id":"U_kgDOBnu_Tw","avatar_url":"https://avatars.githubusercontent.com/u/108773199?v=4","gravatar_id":"","url":"https://api.github.com/users/hyunzsu","html_url":"https://github.com/hyunzsu","followers_url":"https://api.github.com/users/hyunzsu/followers","following_url":"https://api.github.com/users/hyunzsu/following{/other_user}","gists_url":"https://api.github.com/users/hyunzsu/gists{/gist_id}","starred_url":"https://api.github.com/users/hyunzsu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hyunzsu/subscriptions","organizations_url":"https://api.github.com/users/hyunzsu/orgs","repos_url":"https://api.github.com/users/hyunzsu/repos","events_url":"https://api.github.com/users/hyunzsu/events{/privacy}","received_events_url":"https://api.github.com/users/hyunzsu/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hyunzsu/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hyunzsu/front_6th_chapter1-3/deployments","created_at":"2025-07-21T10:00:10Z","updated_at":"2025-07-24T15:18:18Z","pushed_at":"2025-07-24T15:18:59Z","git_url":"git://github.com/hyunzsu/front_6th_chapter1-3.git","ssh_url":"git@github.com:hyunzsu/front_6th_chapter1-3.git","clone_url":"https://github.com/hyunzsu/front_6th_chapter1-3.git","svn_url":"https://github.com/hyunzsu/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":291,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/42"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/42"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/42"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/42/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/42/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/42/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/c5ca529ea0fa476f3cd419ddccf9d0b30c14c39a"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/43","id":2684948601,"node_id":"PR_kwDOPMCTuc6gCRB5","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/43","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/43.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/43.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/43","number":43,"state":"open","locked":false,"title":"[6팀 조영민] Chapter 1-3. React, Beyond the Basics","user":{"login":"0miiii","id":85497694,"node_id":"MDQ6VXNlcjg1NDk3Njk0","avatar_url":"https://avatars.githubusercontent.com/u/85497694?v=4","gravatar_id":"","url":"https://api.github.com/users/0miiii","html_url":"https://github.com/0miiii","followers_url":"https://api.github.com/users/0miiii/followers","following_url":"https://api.github.com/users/0miiii/following{/other_user}","gists_url":"https://api.github.com/users/0miiii/gists{/gist_id}","starred_url":"https://api.github.com/users/0miiii/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/0miiii/subscriptions","organizations_url":"https://api.github.com/users/0miiii/orgs","repos_url":"https://api.github.com/users/0miiii/repos","events_url":"https://api.github.com/users/0miiii/events{/privacy}","received_events_url":"https://api.github.com/users/0miiii/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\nhttps://0miiii.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\nuseMemo 등 memoization을 수행하는 hook들을 사용하는 기준이 궁금합니다.\\r\\n재렌더링이 필요없는 컴포넌트의 렌더링을 막기 위해 이 hook들을 모든 순간에 사용하게 되면 오히려 성능에 안좋은 영향을 미친다고 들었습니다. 복잡한 계산이 있는 곳에 사용하는 것을 권장하는데 복잡한 계산의 기준을 명확하게 모르겠습니다.\\r\\n\\r\\n지금까지 일을 해오면서 눈에 띄게 렌더링 속도가 느렸던 컴포넌트가 있는데 이 때 useMemo를 사용해서 값이 확실히 변할때만 렌더링되도록 개선했었던 적이 있습니다. 이처럼 체감이 될 정도로 성능이 안좋은게 느껴질 때만 memoization을 사용하는 것을 고려하면 될까요?\\r\\n성능 저하가 체감되지 않는다면 재렌더링이 여러번 발생하더라도 굳이 사용할 필요가 없을지 궁금합니다.\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-22T10:01:09Z","updated_at":"2025-07-26T05:18:54Z","closed_at":null,"merged_at":null,"merge_commit_sha":"a0bc5feb8c12dc58199c414b2c525b5990b0a776","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/43/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/43/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/43/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/08021211ff386a65bb76cc94a50598a7bf38513d","head":{"label":"0miiii:main","ref":"main","sha":"08021211ff386a65bb76cc94a50598a7bf38513d","user":{"login":"0miiii","id":85497694,"node_id":"MDQ6VXNlcjg1NDk3Njk0","avatar_url":"https://avatars.githubusercontent.com/u/85497694?v=4","gravatar_id":"","url":"https://api.github.com/users/0miiii","html_url":"https://github.com/0miiii","followers_url":"https://api.github.com/users/0miiii/followers","following_url":"https://api.github.com/users/0miiii/following{/other_user}","gists_url":"https://api.github.com/users/0miiii/gists{/gist_id}","starred_url":"https://api.github.com/users/0miiii/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/0miiii/subscriptions","organizations_url":"https://api.github.com/users/0miiii/orgs","repos_url":"https://api.github.com/users/0miiii/repos","events_url":"https://api.github.com/users/0miiii/events{/privacy}","received_events_url":"https://api.github.com/users/0miiii/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023920816,"node_id":"R_kgDOPQfKsA","name":"front_6th_chapter1-3","full_name":"0miiii/front_6th_chapter1-3","private":false,"owner":{"login":"0miiii","id":85497694,"node_id":"MDQ6VXNlcjg1NDk3Njk0","avatar_url":"https://avatars.githubusercontent.com/u/85497694?v=4","gravatar_id":"","url":"https://api.github.com/users/0miiii","html_url":"https://github.com/0miiii","followers_url":"https://api.github.com/users/0miiii/followers","following_url":"https://api.github.com/users/0miiii/following{/other_user}","gists_url":"https://api.github.com/users/0miiii/gists{/gist_id}","starred_url":"https://api.github.com/users/0miiii/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/0miiii/subscriptions","organizations_url":"https://api.github.com/users/0miiii/orgs","repos_url":"https://api.github.com/users/0miiii/repos","events_url":"https://api.github.com/users/0miiii/events{/privacy}","received_events_url":"https://api.github.com/users/0miiii/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/0miiii/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/0miiii/front_6th_chapter1-3/deployments","created_at":"2025-07-21T23:07:52Z","updated_at":"2025-07-23T17:01:53Z","pushed_at":"2025-07-25T03:57:17Z","git_url":"git://github.com/0miiii/front_6th_chapter1-3.git","ssh_url":"git@github.com:0miiii/front_6th_chapter1-3.git","clone_url":"https://github.com/0miiii/front_6th_chapter1-3.git","svn_url":"https://github.com/0miiii/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":284,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":1,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":1,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":1,"open_issues":1,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/43"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/43"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/43"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/43/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/43/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/43/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/08021211ff386a65bb76cc94a50598a7bf38513d"}},"author_association":"FIRST_TIME_CONTRIBUTOR","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/44","id":2686089887,"node_id":"PR_kwDOPMCTuc6gGnqf","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/44","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/44.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/44.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/44","number":44,"state":"open","locked":false,"title":"[7팀 정건휘] Chapter 1-3. React, Beyond the Basics","user":{"login":"geonhwiii","id":44767362,"node_id":"MDQ6VXNlcjQ0NzY3MzYy","avatar_url":"https://avatars.githubusercontent.com/u/44767362?v=4","gravatar_id":"","url":"https://api.github.com/users/geonhwiii","html_url":"https://github.com/geonhwiii","followers_url":"https://api.github.com/users/geonhwiii/followers","following_url":"https://api.github.com/users/geonhwiii/following{/other_user}","gists_url":"https://api.github.com/users/geonhwiii/gists{/gist_id}","starred_url":"https://api.github.com/users/geonhwiii/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geonhwiii/subscriptions","organizations_url":"https://api.github.com/users/geonhwiii/orgs","repos_url":"https://api.github.com/users/geonhwiii/repos","events_url":"https://api.github.com/users/geonhwiii/events{/privacy}","received_events_url":"https://api.github.com/users/geonhwiii/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://geonhwiii.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\nReact가 왜 이런 API를 제공하는지 이해할 수 있었습니다. 복잡한 내부 로직을 간단한 API로 감싸주는 추상화로 인해 사용자가 얼마나 편하게 사용할 수 있는지 배웠습니다.\\r\\n\\r\\n또, React에서 제공하는 `useState`를 제외한 api는 `custom hook`의 일종이라는 것도 깨달았습니다.\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n- `useRef`가 `useStat`e의 `lazy initialization`을 활용한다는 원리를 이해\\r\\n- `useCallback`과 `useMemo`의 관계\\r\\n- 얕은 비교와 깊은 비교의 내부적인 동작에 대한 이해\\r\\n\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n```ts\\r\\n// useRef.ts\\r\\nimport { useState } from \\"react\\";\\r\\n\\r\\ninterface MutableRefObject<T> {\\r\\n  current: T;\\r\\n}\\r\\n\\r\\n/**\\r\\n * 1. DOM 요소 null 초기화 대응\\r\\n * const ref = useRef<HTMLDivElement>(null)\\r\\n *\\r\\n * 2. 초기값이 없는 경우 대응\\r\\n * const ref = useRef<string>();\\r\\n */\\r\\nexport function useRef<T>(initialValue: T): MutableRefObject<T>;\\r\\nexport function useRef<T>(initialValue: T | null): MutableRefObject<T | null>;\\r\\nexport function useRef<T = undefined>(): MutableRefObject<T | undefined>;\\r\\n\\r\\nexport function useRef<T>(initialValue?: T): MutableRefObject<T | undefined> {\\r\\n  const [ref] = useState(() => ({ current: initialValue }));\\r\\n  return ref;\\r\\n}\\r\\n```\\r\\n\\r\\n실제 `useRef`사용과 비슷하게 사용할 수 있도록 타입 추론을 보완했어요.\\r\\n\\r\\n추가적인 타입 선언이 없을 경우,\\r\\n\\r\\n`const ref = useRef<HTMLDivElement>(null)`는 타입 오류가 발생해요.\\r\\n\\r\\n---\\r\\n\\r\\n```ts\\r\\n// deepEquals.ts\\r\\n export const deepEquals = (a: unknown, b: unknown) => {\\r\\n    if (a === b) return true;\\r\\n    if (a == null || b == null) return false;\\r\\n    if (typeof a !== typeof b) return false;\\r\\n\\r\\n    if (Array.isArray(a) && Array.isArray(b)) {\\r\\n      if (a.length !== b.length) return false;\\r\\n      // 각 요소를 재귀적으로 비교\\r\\n      for (let i = 0; i < a.length; i++) {\\r\\n        if (!deepEquals(a[i], b[i])) return false;\\r\\n      }\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    if (typeof a === \\"object\\" && typeof b === \\"object\\") {\\r\\n      const objA = a as Record<string, unknown>;\\r\\n      const objB = b as Record<string, unknown>;\\r\\n      const keysA = Object.keys(objA);\\r\\n      const keysB = Object.keys(objB);\\r\\n\\r\\n      if (keysA.length !== keysB.length) return false;\\r\\n      // 각 키의 값을 재귀적으로 비교\\r\\n      for (const key of keysA) {\\r\\n        if (!deepEquals(objA[key], objB[key])) return false;\\r\\n      }\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n  };\\r\\n```\\r\\n\\r\\n각 조건문이 의미하는 바가 명확하고, 이해가 간단하다고 생각해요.\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n```ts\\r\\n// AS-IS\\r\\nexport function useShallowState<T>(initialValue: T | (() => T)): [T, React.Dispatch<React.SetStateAction<T>>] {\\r\\n  const [state, setState] = useState(initialValue);\\r\\n\\r\\n  const setShallowState = useCallback((newValue: T | ((prev: T) => T)) => {\\r\\n    setState((prevState) => {\\r\\n      const nextState = typeof newValue === \\"function\\" ? (newValue as (prev: T) => T)(prevState) : newValue;\\r\\n      // 1. 얕은 비교 값이 같다면 이전 상태 반환\\r\\n      if (shallowEquals(nextState, prevState)) {\\r\\n        return prevState;\\r\\n      }\\r\\n      // 2. 값이 다르다면 새로운 상태 반환\\r\\n      return nextState;\\r\\n    });\\r\\n  }, []);\\r\\n\\r\\n  return [state, setShallowState];\\r\\n}\\r\\n\\r\\n// TO-BE\\r\\nexport function useShallowState<T>(initialValue: T | (() => T)): [T, React.Dispatch<React.SetStateAction<T>>] {\\r\\n  const [state, setState] = useState(initialValue);\\r\\n\\r\\n  const setShallowState = useCallback((newValue: T | ((prev: T) => T)) => {\\r\\n    setState((prevState) => {\\r\\n      const nextState = isFunction(newValue) ? newValue(prevState) : newValue;\\r\\n\\r\\n      // 1. 얕은 비교로 값이 같다면 이전 상태 반환\\r\\n      if (shallowEquals(nextState, prevState)) {\\r\\n        return prevState;\\r\\n      }\\r\\n\\r\\n      // 2. 값이 다르다면 새로운 상태 반환\\r\\n      return nextState;\\r\\n    });\\r\\n  }, []);\\r\\n\\r\\n  return [state, setShallowState];\\r\\n}\\r\\n\\r\\nfunction isFunction<T>(value: T | ((prev: T) => T)): value is (prev: T) => T {\\r\\n  return typeof value === \\"function\\";\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n강제 타입캐스팅을 강제하는 부분을 줄이고 싶었어요.\\r\\n\\r\\n타입 가드 함수를 활용해서, 강제 타입 캐스팅을 줄이고, 타입 안정성을 보완할 수 있을 것 같아요.\\r\\n\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n이전의 사고방식:\\r\\n- React Hooks는 그냥 주어진 API로만 생각하였어요.\\r\\n- \\"어떻게 쓸까?\\"에만 집중하였어요.\\r\\n\\r\\n현재의 사고방식:\\r\\n  - \\"왜 이렇게 설계되었을까?\\"를 항상 고민하게 되었어요.\\r\\n  - \\"내부적으로 어떻게 동작할까?\\"를 생각할 수 있게 되었어요\\r\\n  \\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n리렌더링이 발생하는 조건:\\r\\n1. 상태 변경: 상태 비교로 이전 값과 다를 때\\r\\n2. Props 변경: 부모로부터 받은 props가 변경될 때\\r\\n3. Context 변경: 구독 중인 Context 값이 변경될 때\\r\\n\\r\\n\\r\\n렌더링 최적화\\r\\n\\r\\n1. 불필요한 리렌더링 방지:\\r\\n```tsx\\r\\n// ❌ 매번 새로운 객체 생성\\r\\n<Component style={{ margin: 10 }} />\\r\\n```\\r\\n```tsx\\r\\n// ✅ 참조 안정화\\r\\nconst style = useMemo(() => ({ margin: 10 }), []);\\r\\n<Component style={style} />\\r\\n```\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n메모이제이션은 비용이 많이 드는 곳에 사용하면 이점을 갖지만,\\r\\n남용을 하게 될 경우, 코드의 복잡성이 증대될 수 있어요.\\r\\n\\r\\n최근 리액트 컴파일러 발표 영상을 보면, 리액트 개발팀조차도 메모이제이션을 실수할 때도 있다고 언급한 부분을 보았을 때, 쉬운 영역이라고도 생각이 들지 않아요.\\r\\n\\r\\n의도를 명확히 사용하고, 유지보수성을 고려해서 사용하면 좋을 것 같아요.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\nFSD 아키텍처가 유행하는 이유는 대규모 아키텍처에 대한 고민도 있지만,\\r\\n\\r\\n도메인, 기능에 대해서 관리 포인트를 가장 가까운 곳에서 관리하려는 것도 있다고 생각해요.\\r\\n\\r\\n이와 마찬가지로, 상태도 가장 가까운 곳에서 관리하는 것이 중요해요.\\r\\n\\r\\n컨텍스트는 Provider를 통해 의존성을 깊게 주입해야 하는 상황에서 사용하면 좋을 것 같아요.\\r\\n\\r\\n`useSyncExternalStore`의 등장으로 리렌더링을 줄이면서, selector를 통해 선택적으로 상태에 대해 구독을 할 수 있게 되었어요.\\r\\n\\r\\n따라서, 개발자는 항상 비용을 고려해서 사용할 수 있도록 노력해야해요.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n`useSyncExternalStore`에 대한 이해가 아직은 부족한 것 같습니다.\\r\\n\\r\\n이번 과제에서 사용한 `useStore`와 같은 `store` 외에 활용 방법이 있을까요?\\r\\n\\r\\n그리고, `useSyncExternalStore`를 단일로 사용하는 것보다\\r\\n\\r\\n`context api`와 결합해서 사용하는 패턴이 더 좋은 것일지,\\r\\n\\r\\n상황에 따라 선택하는 것이 맞을지 궁금합니다.\\r\\n\\r\\n\\r\\n","created_at":"2025-07-22T16:07:41Z","updated_at":"2025-07-28T02:59:34Z","closed_at":null,"merged_at":null,"merge_commit_sha":"6734771a225c3c06fb1bfb489228b8160b70e9a9","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/44/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/44/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/44/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/2ca48e481e92506a6b4a8b286e65a528dcebc10c","head":{"label":"geonhwiii:main","ref":"main","sha":"2ca48e481e92506a6b4a8b286e65a528dcebc10c","user":{"login":"geonhwiii","id":44767362,"node_id":"MDQ6VXNlcjQ0NzY3MzYy","avatar_url":"https://avatars.githubusercontent.com/u/44767362?v=4","gravatar_id":"","url":"https://api.github.com/users/geonhwiii","html_url":"https://github.com/geonhwiii","followers_url":"https://api.github.com/users/geonhwiii/followers","following_url":"https://api.github.com/users/geonhwiii/following{/other_user}","gists_url":"https://api.github.com/users/geonhwiii/gists{/gist_id}","starred_url":"https://api.github.com/users/geonhwiii/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geonhwiii/subscriptions","organizations_url":"https://api.github.com/users/geonhwiii/orgs","repos_url":"https://api.github.com/users/geonhwiii/repos","events_url":"https://api.github.com/users/geonhwiii/events{/privacy}","received_events_url":"https://api.github.com/users/geonhwiii/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023717949,"node_id":"R_kgDOPQSyPQ","name":"front_6th_chapter1-3","full_name":"geonhwiii/front_6th_chapter1-3","private":false,"owner":{"login":"geonhwiii","id":44767362,"node_id":"MDQ6VXNlcjQ0NzY3MzYy","avatar_url":"https://avatars.githubusercontent.com/u/44767362?v=4","gravatar_id":"","url":"https://api.github.com/users/geonhwiii","html_url":"https://github.com/geonhwiii","followers_url":"https://api.github.com/users/geonhwiii/followers","following_url":"https://api.github.com/users/geonhwiii/following{/other_user}","gists_url":"https://api.github.com/users/geonhwiii/gists{/gist_id}","starred_url":"https://api.github.com/users/geonhwiii/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geonhwiii/subscriptions","organizations_url":"https://api.github.com/users/geonhwiii/orgs","repos_url":"https://api.github.com/users/geonhwiii/repos","events_url":"https://api.github.com/users/geonhwiii/events{/privacy}","received_events_url":"https://api.github.com/users/geonhwiii/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/geonhwiii/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/geonhwiii/front_6th_chapter1-3/deployments","created_at":"2025-07-21T15:29:03Z","updated_at":"2025-07-25T16:51:55Z","pushed_at":"2025-07-25T16:51:51Z","git_url":"git://github.com/geonhwiii/front_6th_chapter1-3.git","ssh_url":"git@github.com:geonhwiii/front_6th_chapter1-3.git","clone_url":"https://github.com/geonhwiii/front_6th_chapter1-3.git","svn_url":"https://github.com/geonhwiii/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":173,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/44"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/44"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/44"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/44/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/44/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/44/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/2ca48e481e92506a6b4a8b286e65a528dcebc10c"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/45","id":2687060365,"node_id":"PR_kwDOPMCTuc6gKUmN","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/45","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/45.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/45.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/45","number":45,"state":"open","locked":false,"title":"[9팀 임두현] Chapter 1-3. React, Beyond the Basics","user":{"login":"ldhldh07","id":109324599,"node_id":"U_kgDOBoQpNw","avatar_url":"https://avatars.githubusercontent.com/u/109324599?v=4","gravatar_id":"","url":"https://api.github.com/users/ldhldh07","html_url":"https://github.com/ldhldh07","followers_url":"https://api.github.com/users/ldhldh07/followers","following_url":"https://api.github.com/users/ldhldh07/following{/other_user}","gists_url":"https://api.github.com/users/ldhldh07/gists{/gist_id}","starred_url":"https://api.github.com/users/ldhldh07/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ldhldh07/subscriptions","organizations_url":"https://api.github.com/users/ldhldh07/orgs","repos_url":"https://api.github.com/users/ldhldh07/repos","events_url":"https://api.github.com/users/ldhldh07/events{/privacy}","received_events_url":"https://api.github.com/users/ldhldh07/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://ldhldh07.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n기존의 과제들도 마찬가지였지만, 이번 과제도 한번쯤 해보고 싶었던 작업이었습니다. \\r\\n\\r\\n개인적으로 효과가 좋다고 생각하는 학습방식이 있습니다. \\r\\n원리를 다 파악하고 실제로 활용하는 것보다는, 일단 원리도 모르는 상태에서 다들 하는대로 적용하고 보는 것입니다.\\r\\n그렇게 익숙해질 즈음에 다시 이론적인 개념을 파악하면 그 때 이해가 쏙쏙 됩니다.\\r\\n\\r\\n리액트도 많이 써왔으면서도 그 코어 작동 로직이나, 구체적인 동작에 대해서 모르고 있던 것이 사실입니다.\\r\\n조금 늦긴 했지만 그래도 적절한 타이밍에 살짝 리액트를 파고들어서 공부할 수 있는 기회였습니다.\\r\\n실제로 써왔던 것들이라 그 로직들이 이해가 됐고, 앞으로 더 높은 이해도로 리액트를 사용할 수 있겠다 싶었습니다.\\r\\n\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n#### useRef\\r\\n\\r\\n특히 그 원리를 모르고 그냥 쓰고 있던 대표적인 훅이 이 useRef였습니다.\\r\\n그냥 DOM 조작할 때 쓰는구나 싶어서 루틴대로 사용하던 훅입니다.\\r\\n\\r\\n```ts\\r\\nconst divRef = useRef(null);\\r\\n<div ref={divRef}>\\r\\n// divRef.current에 DOM이 할당됨\\r\\n```\\r\\n\\r\\n그러던중 이런 방식으로 작성된 코드를 봤습니다.\\r\\n\\r\\n```ts\\r\\nconst Provider = ({ children }: PropsWithChildren) => {\\r\\n  const [isOpen, setIsOpen] = useState(false);\\r\\n  \\r\\n  ...\\r\\n\\r\\n  const contentRef = useRef<ReactNode>(null);\\r\\n  const bottomSheetOptionsRef = useRef<BottomSheetOptions>({});\\r\\n\\r\\n  const open = useCallback(({ content, options }: BottomSheetConfigs) => {\\r\\n    contentRef.current = content;\\r\\n    bottomSheetOptionsRef.current = options || {};\\r\\n    setIsOpen(true);\\r\\n  }, []);\\r\\n \\r\\n  ...\\r\\n\\r\\n  return (\\r\\n    <context.Provider value={memoizedValue}>\\r\\n      {children}\\r\\n      {isOpen && (\\r\\n        <BottomSheet\\r\\n          open={isOpen}\\r\\n          {...bottomSheetOptionsRef.current} \\r\\n          onOpenChange={setIsOpen}\\r\\n        >\\r\\n          {contentRef.current} \\r\\n        </BottomSheet>\\r\\n      )}\\r\\n    </context.Provider>\\r\\n  );\\r\\n};\\r\\n```\\r\\n\\r\\nuseRef로 값을 저장하는 듯한 이 활용법은 어색하게 다가왔습니다.\\r\\n\\r\\n이 때 이해못했던 것을 과제에서 useRef를 구현하고 그 동작 목적에 맞게 활용하면서 이해가 됐습니다.\\r\\n\\r\\n\\r\\n먼저 공식문서에서 useRef에 대해\\r\\n\\r\\n>useRef는 처음에 제공한 초기값으로 설정된 단일 current 프로퍼티가 있는 ref 객체를 반환합니다.\\r\\n>다음 렌더링에서 useRef는 동일한 객체를 반환합니다. 정보를 저장하고 나중에 읽을 수 있도록 current 속성을 변경할 수 있습니다. state가 떠오를 수 있지만, 둘 사이에는 중요한 차이점이 있습니다.\\r\\n>ref를 변경해도 리렌더링을 촉발하지 않습니다. 즉 ref는 컴포넌트의 시각적 출력에 영향을 미치지 않는 정보를 저장하는 데 적합합니다. 예를 들어 interval ID를 저장했다가 나중에 불러와야 하는 경우 ref에 넣을 수 있습니다. ref 내부의 값을 업데이트하려면 current 프로퍼티를 수동으로 변경해야 합니다\\r\\n\\r\\n라고 설명이 되어있습니다.\\r\\n\\r\\n여기서 중요한 점이자 `useState`와의 차이점은 다음과 같습니다.\\r\\n\\r\\n- ref 변경이 리렌더링을 촉발하지 않음\\r\\n- 단일 current 프로퍼티를 가진 객체 구조\\r\\n- 프로퍼티 직접 변경 가능\\r\\n\\r\\n이 특징들로 인해 \\"화면에 영향을 주지 않는 데이터\\"를 리렌더링 없이 저장할 수 있습니다.\\r\\n\\r\\n이 때 프로퍼티를 수동으로 변경해야 한다는 것은 ref의 프로퍼티의 접근이 가능하다는 것입니다.\\r\\nuseState로 state를 저장할 때 객체로 저장한 후 그 프로퍼티에 접근해서 변경하는 것은 리액트의 정책에 위반되기에, 이 특성이 useRef의 여러 특성들을 가능케 합니다.\\r\\n\\r\\n- 참조가 유지된다\\r\\n- 그러면서 내부 값 변경은 자유롭다\\r\\n\\r\\n이걸 그냥 텍스트로만 읽고는 완벽하게 와닿지는 않았습니다.\\r\\n\\r\\n#### useState(() => {})\\r\\n\\r\\nuseRef를 처음에 구현하려고 하다가 복잡도가 너무 높아져서 찾아보는 과정에서 `useState(() => {})`라는 생소한 패턴을 발견했습니다:\\r\\n\\r\\n생소했지만 조금만 더 생각해보니 크게 새로운 형태가 아닌, 기존 `useState()`에 함수가 들어간 형태라는 점을 인지했습니다.\\r\\n\\r\\n그로 인해 몇가지 특성이 유발됩니다.\\r\\n\\r\\n- 첫 렌더링에서만 함수 실행 - 성능 최적화\\r\\n- 참조 유지 - 같은 객체/함수 반환  \\r\\n\\r\\n```typescript\\r\\n//  렌더링마다 계산 실행\\r\\nconst [data] = useState(sum());\\r\\n\\r\\n// 첫 렌더링에서만 계산 실팽\\r\\nconst [data] = useState(() => sum());\\r\\n```\\r\\n\\r\\nReact는 전달받은 값이 함수인지 확인하고, 함수라면 첫 렌더링에서만 호출합니다. \\r\\n이후 리렌더링에서는 저장된 값만 반환하여 불필요한 재계산을 방지합니다.\\r\\n\\r\\n이 특성를 이해하면서 useRef의 동작 뿐 아니라 useRef와 별개로 이 형태 자체의 특징과 어떤 상황에 쓸 수 있는지도 알 수 있었습니다.\\r\\n\\r\\n의존성 없는 메모이제이션으로 사용할 수 있는 패턴으로, 다양한 최적화 시나리오에 적용 가능했습니다\\r\\n\\r\\n- input value는 onChange로 set하면서 화면의 리렌더링은 onBlur시 작동하게 하는 방식\\r\\n  -  qna때 코치님이 보여주었던 방식으로 실제로도 유용할 것 같아 인상깊었고 해당 동작에 대한 이해도도 높여주었습니다.\\r\\n- toastProvider 최적화시 함수들을 분리해서 메모이제이션할 때 사용\\r\\n\\r\\n```ts\\r\\nconst actions = { show, hide };\\r\\n\\r\\nconst [actions] = useState(() => ({ show, hide }));\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n#### 구현한 useRef\\r\\n\\r\\n```typescript\\r\\nimport { useState } from \\"react\\";\\r\\n\\r\\nexport function useRef<T>(initialValue: T): { current: T } {\\r\\n  const [ref] = useState(() => ({ current: initialValue }));\\r\\n  return ref;\\r\\n}\\r\\n```\\r\\n\\r\\n앞의 과정들을 거쳐 이 코드를 다시 쳐다봤습니다.\\r\\nuseRef가 어떻게 설계되었고 그래서 어떻게 활용되는지 좀 더 이해가 됐습니다.\\r\\n\\r\\n#### 동작 원리 분석\\r\\n\\r\\n저 코드의 동작을 다시 보면 이렇습니다:\\r\\n\\r\\n- lazy initialization을 통해 current 단일 프로퍼티를 가진 객체를 생성\\r\\n- 그 객체만을 반환\\r\\n\\r\\n#### 이로 인해 얻을 수 있는 효과\\r\\n\\r\\n1. 참조 안정성 확보\\r\\n- 최초 생성된 참조값을 계속 리턴해서 씀으로써 확보되는 참조 안정성\\r\\n- 컴포넌트가 리렌더링되어도 항상 같은 객체\\r\\n\\r\\n2. 제한적 가변성\\r\\n- 단일 프로퍼티인 객체로서 객체는 변하지 않고 속성만 변한다\\r\\n- `current`에 접근해서 수정함으로써 리렌더링 없이 값 수정 가능\\r\\n\\r\\n3. 명시적 접근\\r\\n```typescript\\r\\n// 명시적으로 .current를 통해 접근\\r\\nref.current = newValue;\\r\\nconst value = ref.current;\\r\\n```\\r\\n\\r\\n- \\r\\n\\r\\n#### 용도\\r\\n\\r\\n\\r\\n이런 특성들이 조합되어서 \\"상태는 바뀌지만 렌더링은 안 했으면 좋겠다\\" 싶을 때 쓴다는 점을 이해했습니다.\\r\\n\\r\\n\\r\\n#### 깊은 비교는 얼마나 깊어야 하는걸까\\r\\n\\r\\n##### Object.keys()\\r\\n객체의 키에 들어갈 수 있는 타입은 3가지가 있습니다.\\r\\n- string\\r\\n- number\\r\\n- symbol\\r\\n\\r\\n하지만 Object.keys()의 반환 타입은 string[]입니다:\\r\\n- string → string\\r\\n- number → string 형변환\\r\\n- symbol → 제외\\r\\n\\r\\n이런 방식이기 때문입니다.\\r\\n얕은 비교일 때는 symbol에 대한 비교가 불필요하다고 생각했습니다.\\r\\n\\r\\n##### deepEquals\\r\\n\\r\\ndeepEquals는 중첩된 객체와 배열까지 재귀적으로 비교하여 모든 레벨에서 값이 동일한지 확인하는 것입니다.\\r\\n\\r\\n\\r\\n그런데 여기서 의문이 생겼습니다. Deep 비교에서도 Symbol 키를 제외해야 할까?\\r\\n\\r\\n##### 기본 라이브러리의 경우\\r\\n\\r\\n주요 라이브러리들이 어떻게 처리하는지 찾아봤습니다.\\r\\n`Lodash.isEqual`, `fast-deep-equal`의 경우에서도 symbol은 배제하고 비교했습니다.\\r\\n\\r\\n##### 배제하는 이유\\r\\n\\r\\n1. 성능상의 이유 \\r\\n- Object.keys()는 enumerable string/number 키만 순회\\r\\n- Reflect.ownKeys()는 모든 own properties (symbol 포함) 순회\\r\\n- Symbol 처리 로직이 추가적인 성능 오버헤드 발생\\r\\n2. 실용성 관점 \\r\\n- React 애플리케이션에서 Symbol 키 사용 빈도 매우 낮음\\r\\n- 대부분의 상태는 JSON 직렬화 가능한 일반 객체\\r\\n3. JSON 직렬화와의 일관성 \\r\\n- 서버와의 데이터 통신, localStorage 저장 등에서 Symbol 손실\\r\\n- deepEquals이 JSON 동작과 일치하면 예측 가능한 동작\\r\\n\\r\\n대부분의 경우 Symbol은 \\"내부 메타데이터\\"로 이용되는 것이고 실제 비교할 대상에는 사용되지 않스니다.\\r\\n그렇기 때문에 깊은 비교에서도 비교할 필요가 없습니다.\\r\\n\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n과제에서 요구되는 많은 훅들이 `useRef`기반으로 작성됩니다.\\r\\n\\r\\nuse훅들을 만들고 use훅들을 만들 때 useRef를 통해 이전 ref와 얕은 비교 후 상태를 바꾸는 과정이 반복되는데 이를 통해 리액트 시스템의 이해도가 높아졌습니다.\\r\\n또한 커스텀 훅을 만드는 것이 리액트의 가독성을 높이고 활용하는 데 중요한 점이라고 생각하는데 이후 개발하는데 커스텀 훅을 보다 적극적으로 활용할 수 있을 듯 합니다.\\r\\n\\r\\n동작을 이해하자 정확히 어떤 유즈케이스에 어떤 리액트 훅을 써야 할지 명확해졌습니다.\\r\\n\\r\\nuseState - 상태 관리, 변경 시 리렌더링 트리거\\r\\nuseState(() => {}) - 초기 렌더링 생성, 참조는 유지하되 리렌더링 의존성 없음  \\r\\nuseRef - 리렌더링 없는 값 저장\\r\\nuseMemo - 의존성 있는 값 메모이제이션\\r\\nuseCallback - 의존성 있는 함수 메모이제이션\\r\\n\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n우리의 컴퓨터는 아주 빠르기 때문에 대부분의 최적화에서 메모이제이션은 우선순위가 낮다고 생각합니다.\\r\\nQnA에서 코치님이 해주신 \\"메모이제이션은 최적화보다는 정합성을 맞추는 데 주로 쓴다\\"라는 말이 인상깊었습니다.\\r\\n\\r\\n실제로도 메모이제이션을 사용했던 대부분의 경우가 참조의 불안정성으로 인한 무한 리렌더링을 해결하기 위해서였습니다.\\r\\n\\r\\n다만 메모이제이션의 과한 사용으로 인한 단점도 경험했습니다.\\r\\n\\r\\n메모이제이션으로 트러블슈팅을 해결한 경험 이후, 메모이제이션이 만능인 줄 알고 과도하게 사용했습니다. 하지만 하나를 메모이제이션하면 의존성이 있는 다른 요소들도 함께 고려해야 했기 때문에 코드 복잡도가 높아지고 오히려 생산성이 낮아졌습니다.\\r\\n\\r\\n1. 참조 안정성으로 올바른 동작 보장\\r\\n2. 예외적으로 정말 느릴 때만 최적화\\r\\n\\r\\n이를 메모이제이션 사용의 기준으로 삼으려고 합니다.\\r\\n\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n컨텍스트는 단방향 데이터 흐름을 유지하면서 prop drilling 문제를 해결할 때 유용한 패턴입니다.\\r\\n하지만 기본적으로는 props를 활용한 상태 관리가 우선되어야 한다고 생각합니다.\\r\\n\\r\\nprops drilling은 안티 패턴으로 간주되지만 개인적으로는 props 통해 상태 전파를 하는 것이 좋았습니다.\\r\\n처음에는 막연히 부모 컴포넌트 -> 자식 컴포넌트 -> 손자 컴포넌트 -> 증손자 컴포넌트로 가는 과정에서\\r\\n홀연히 상태가 호출되어 나타나는것보다 실제 흐름대로 명시되는 것이 당연하다 느껴졌고 더 기분이 후련했기 때문에 선호했습니다.\\r\\n\\r\\n그 막연한 느낌을 글로 표현해주어 인상깊게 읽은 게시글이 있습니다.\\r\\nhttps://velog.io/@woohm402/no-global-state-manager\\r\\n\\r\\n이 글에서 제시한 것과 개인적인 생각을 종합한 props 상태 관리의 장점은 아래와 같습니다.\\r\\n- 명시성: 데이터 흐름이 명확하게 보임\\r\\n- 추적 가능성: 어디서 어떤 데이터가 오는지 쉽게 파악\\r\\n- 테스트 용이성: 컴포넌트 단위 테스트가 쉬움\\r\\n- 성능: 불필요한 리렌더링 위험이 적음\\r\\n\\r\\n","created_at":"2025-07-22T23:37:40Z","updated_at":"2025-07-26T03:04:01Z","closed_at":null,"merged_at":null,"merge_commit_sha":"5a32e45cc2454961d613502abfdb41c83e982435","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/45/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/45/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/45/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/faf11ee0e5cd37cfcd6afe62bf7d7eba6611f233","head":{"label":"ldhldh07:main","ref":"main","sha":"faf11ee0e5cd37cfcd6afe62bf7d7eba6611f233","user":{"login":"ldhldh07","id":109324599,"node_id":"U_kgDOBoQpNw","avatar_url":"https://avatars.githubusercontent.com/u/109324599?v=4","gravatar_id":"","url":"https://api.github.com/users/ldhldh07","html_url":"https://github.com/ldhldh07","followers_url":"https://api.github.com/users/ldhldh07/followers","following_url":"https://api.github.com/users/ldhldh07/following{/other_user}","gists_url":"https://api.github.com/users/ldhldh07/gists{/gist_id}","starred_url":"https://api.github.com/users/ldhldh07/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ldhldh07/subscriptions","organizations_url":"https://api.github.com/users/ldhldh07/orgs","repos_url":"https://api.github.com/users/ldhldh07/repos","events_url":"https://api.github.com/users/ldhldh07/events{/privacy}","received_events_url":"https://api.github.com/users/ldhldh07/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1024184066,"node_id":"R_kgDOPQvPAg","name":"front_6th_chapter1-3","full_name":"ldhldh07/front_6th_chapter1-3","private":false,"owner":{"login":"ldhldh07","id":109324599,"node_id":"U_kgDOBoQpNw","avatar_url":"https://avatars.githubusercontent.com/u/109324599?v=4","gravatar_id":"","url":"https://api.github.com/users/ldhldh07","html_url":"https://github.com/ldhldh07","followers_url":"https://api.github.com/users/ldhldh07/followers","following_url":"https://api.github.com/users/ldhldh07/following{/other_user}","gists_url":"https://api.github.com/users/ldhldh07/gists{/gist_id}","starred_url":"https://api.github.com/users/ldhldh07/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ldhldh07/subscriptions","organizations_url":"https://api.github.com/users/ldhldh07/orgs","repos_url":"https://api.github.com/users/ldhldh07/repos","events_url":"https://api.github.com/users/ldhldh07/events{/privacy}","received_events_url":"https://api.github.com/users/ldhldh07/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/ldhldh07/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/ldhldh07/front_6th_chapter1-3/deployments","created_at":"2025-07-22T10:00:13Z","updated_at":"2025-07-24T19:22:46Z","pushed_at":"2025-07-24T19:22:42Z","git_url":"git://github.com/ldhldh07/front_6th_chapter1-3.git","ssh_url":"git@github.com:ldhldh07/front_6th_chapter1-3.git","clone_url":"https://github.com/ldhldh07/front_6th_chapter1-3.git","svn_url":"https://github.com/ldhldh07/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":119,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/45"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/45"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/45"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/45/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/45/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/45/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/faf11ee0e5cd37cfcd6afe62bf7d7eba6611f233"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/46","id":2687498766,"node_id":"PR_kwDOPMCTuc6gL_oO","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/46","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/46.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/46.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/46","number":46,"state":"open","locked":false,"title":"[5팀 양성진] Chapter 1-3. React, Beyond the Basics","user":{"login":"Yangs1s","id":92585734,"node_id":"U_kgDOBYS_Bg","avatar_url":"https://avatars.githubusercontent.com/u/92585734?v=4","gravatar_id":"","url":"https://api.github.com/users/Yangs1s","html_url":"https://github.com/Yangs1s","followers_url":"https://api.github.com/users/Yangs1s/followers","following_url":"https://api.github.com/users/Yangs1s/following{/other_user}","gists_url":"https://api.github.com/users/Yangs1s/gists{/gist_id}","starred_url":"https://api.github.com/users/Yangs1s/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Yangs1s/subscriptions","organizations_url":"https://api.github.com/users/Yangs1s/orgs","repos_url":"https://api.github.com/users/Yangs1s/repos","events_url":"https://api.github.com/users/Yangs1s/events{/privacy}","received_events_url":"https://api.github.com/users/Yangs1s/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://yangs1s.github.io/front_6th_chapter1-3/\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [X] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n물론 리액트를 잘 알고 써본건 아니여도 직장에서 쓰긴 써봐서.  이번 과제는 기존지식의 재발견과 조금 딥하게 공부를 좀 해봤던거 같아요.\\r\\n그리고 새로운 개념들이 참 흥미롭게 다가온거도 많았습니다.\\r\\n\\r\\nshallowEquals & DeepEqual 을 구현시 개념을 공부하고자 봤는데.\\r\\nshallow compare을 통해서 참조타입 과 원시타입의 특징을 좀 더 명확하게 알게 되었고, \\r\\n참조라는 특징을 좀 더 명확하게 알게된 계기가 되었습니다.\\r\\n\\r\\n### hooks 만들면서 알게된 fiber\\r\\n\\r\\n<p>리액트 16전에는  재조정(Reconciliation) 엔진이 Stack방식이지만 파이버 기반으로 16부터는 새롭게 바뀌었다.\\r\\n이전엔 함수형컴퍼넌트안에서 hooks들을 사용할 수 없었지만 이 방식이 채택되고 사용가능 해졌다.</p>\\r\\n\\r\\n특징 (Feature) | 스택 재조정기 (React 15 이하) | 파이버 재조정기 ( React 16 이상)\\r\\n-- | -- | --\\r\\n작업 방식 | 동기적 (Synchronous) | 비동기적 (Asynchronous)\\r\\n작업 단위 | 전체 컴포넌트 트리 | 파이버(Fiber) 라는 작은 작업 단위 (Unit of Work)\\r\\n중단 가능성 | 불가능 (Non-interruptible) | 가능 (Interruptible)\\r\\n핵심 아이디어 | 재귀(Recursion)를 이용한 깊이 우선 | 탐색\\t연결 리스트(Linked List)를 이용한 가상 스택 프레임\\r\\n렌더링 제어 | 일단 시작하면 끝날 때까지 멈추지 못함 | 작업을 멈추고, 재시작하고, 우선순위를 정할 수 있음\\r\\n주요 단점 | 중간에 작업을 중단하기 어렵다. (렌더링 블로킹) | 개념적으로 더 복잡함\\r\\n주요 장점 | 개념적으로 단순함\\t부드러운 사용자 경험, | 동시성(Concurrency), Suspense 등 구현 가능\\r\\n\\r\\n\\r\\n<p>작업의 단위나 작업 방식, 장단점을 제외하고 나머진 AI에게 정리를 부탁해서 만들었습니다. </p>\\r\\n\\r\\n<p>fiber 재조정자는 랜더링 단위를 더 잘게 나누어서 작업 우선순위가 높은거 부터 처리한다. 이게 핵심!</p>\\r\\n\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n### 수정전\\r\\n```javascript\\r\\nexport const shallowEquals = (a: unknown, b: unknown) => {\\r\\n\\r\\n\\r\\n  if (Object.is(a, b)) return true;\\r\\n\\r\\n\\r\\n  if (typeof a !== \\"object\\" || typeof b !== \\"object\\" || a === null || b === null) return false;\\r\\n\\r\\n  const KeysA = Object.keys(a);\\r\\n  const KeysB = Object.keys(b);\\r\\n\\r\\n\\r\\n  if (KeysA.length !== KeysB.length) return false;\\r\\n\\r\\n\\r\\n  if (Array.isArray(a) && Array.isArray(b)) {\\r\\n    if (a.length !== b.length) return false;\\r\\n    for (let i = 0; i < a.length; i++) {\\r\\n      if (!Object.is(a[i], b[i])) return false;\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n\\r\\n  for (const key of KeysA) {\\r\\n    if (\\r\\n      !Object.prototype.hasOwnProperty.call(b, key) ||\\r\\n      !Object.is((a as Record<string, unknown>)[key], (b as Record<string, unknown>)[key])\\r\\n    )\\r\\n      return false;\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n};\\r\\n\\r\\n```\\r\\n너무 한 기능에 여러개를 때려박은거 같은거 같아서 찬규님 pr을 한번 읽어보면서 \\r\\n코드를 한번 기능별로 분할시켜봐야겠다 라는 생각이 들어서 한번 바꿔보려고 합니다. (-- 진행 중 ..---)\\r\\n\\r\\n\\r\\n### 수정후,\\r\\n\\r\\n```javascript\\r\\nfunction hasOwnProperty(obj: unknown, key: string) {\\r\\n  return Object.prototype.hasOwnProperty.call(obj, key);\\r\\n}\\r\\n\\r\\nfunction isNotNull(obj: unknown) {\\r\\n  return obj !== null;\\r\\n}\\r\\n\\r\\nfunction isObject(obj: unknown) {\\r\\n  return typeof obj === \\"object\\";\\r\\n}\\r\\n\\r\\n//객체의 최상위 속성들만 비교하며, 중첩된 객체는 참조값(메모리 주소)만 비교함\\r\\nexport const shallowEquals = (a: unknown, b: unknown) => {\\r\\n\\r\\n\\r\\n  const objA = a as Record<string, unknown>;\\r\\n  const objB = b as Record<string, unknown>;\\r\\n\\r\\n  if (Object.is(objA, objB)) return true;\\r\\n\\r\\n\\r\\n  if (!isObject(objA) || !isObject(objB) || !isNotNull(objA) || !isNotNull(objB)) return false;\\r\\n\\r\\n  const KeysA = Object.keys(objA);\\r\\n  const KeysB = Object.keys(objB);\\r\\n\\r\\n\\r\\n  if (KeysA.length !== KeysB.length) return false;\\r\\n\\r\\n\\r\\n\\r\\n  for (const key of KeysA) {\\r\\n    if (!hasOwnProperty(b, key) || !Object.is(objA[key], objB[key])) return false;\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n};\\r\\n```\\r\\n조금 고쳐봤습니다.\\r\\n테스트코드에서 배열과 객체일시 케이스가 나눠져있길래 배열일때를 따로 if문으로 작업했는데\\r\\nObject.keys와 for-of로 이미 같은방식으로 처리하는 데 굳이 저게 필요한가 싶어서 중복기능이라 생각해 삭제했습니다. \\r\\n\\r\\n그리고 내부가 좀 너무 길어지는 내용들이 많아서 따로 위에 함수를 만들어서 사용했습니다. 이러니까 저번보다 짧아지고 가독성도 쬐끔 올라간거같습니다.\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n1. 리액트 hook들의 동작원리 (특히 usestate)\\r\\n가장 많이 배웠다고 느낍니다.\\r\\n2. 상태관리는 추가적으로 좀더 공부해봐야겟습니다.\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n#### 리엑트에서의 렌더링\\r\\n- 브라우저에서 필요한 Dom Tree를 만드는 과정이다.\\r\\n\\r\\n1. 렌더링을 유발하는 단계\\r\\n- createRoot의 실행 혹은 state업데이트시 발생.\\r\\n2. 렌더링으로 컴퍼넌트를 호출하는단계\\r\\n- createRoot 실행시 Root컴퍼넌트 호출\\r\\n- state update시 state가 속한 컴퍼넌트 호출\\r\\n3. 커밋 단계\\r\\n- 첫커밋시: 모든 노드 appendChild로 생성\\r\\n- 아니면: 최소한의 작업을 통해, 변경사항만 실제 DOM에 적용. 변경사항은 렌더링중 계산된다.\\r\\n\\r\\n1단계,2단계는 렌더 phase, 3은 커밋 페이즈 이다.\\r\\n\\r\\n\\r\\n#### 재조정(Reconciliation)이란?\\r\\n- 렌더 페이즈에서 일어나는 핵심적인 과정으로, Current Tree와 Work-in-Progress Tree를 비교하는 과정입니다.\\r\\nCurrent Tree는 현재 화면에 보여지고 있는 상태를 나타내는 트리\\r\\nWork-in-Progress Tree는 새롭게 변화된 상태를 구성하는 트리\\r\\n\\r\\n#### 재조정의 목적\\r\\n\\r\\n- 효율적인 업데이트: 실제 변경된 부분만 찾아내어 DOM 조작을 최소화\\r\\n- 성능 최적화: 불필요한 DOM 조작을 피하고 최대한 효율적으로 작업 수행\\r\\n- 정확한 변경 감지: 어떤 컴포넌트가 실제로 업데이트되어야 하는지 정확히 판단\\r\\n\\r\\n#### 재조정에서 Key의 중요성\\r\\n#### 배열 렌더링에서 Key가 필수인 이유\\r\\n- 불필요한 재생성: 멀쩡한 컴포넌트나 내용을 부수고 다시 작성\\r\\n- 성능 저하: 모든 항목이 다시 렌더링됨\\r\\n- 불필요한 리렌더링: 실제로는 변경되지 않은 항목들까지 재렌더링\\r\\n- 상태 손실: 컴포넌트 내부 상태가 초기화될 수 있음\\r\\n- 부작용: 애니메이션이나 포커스 상태 등이 예상과 다르게 동작\\r\\n\\r\\n#### Key가 있을 때의 동작\\r\\n\\r\\n- 정확한 식별: 각 항목에 고유한 키를 달아주면 React가 항목이 추가되거나 제거될 때 정확히 무엇이 변화했는지 알 수 있음\\r\\n- 효율적인 업데이트: 기존 컴포넌트를 재사용하고 필요한 부분만 업데이트\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 메모이제이션 \\r\\n#### 메모이제이션이란?\\r\\n**메모이제이션(Memoization)**은 프로그래밍 최적화 기법 중 하나로, 흔히 **\\"기억하기 기술\\"**이라고도 부릅니다.\\r\\n특정 값이나 함수를 캐싱하고 동일한 값의 불필요한 재계산을 방지하는 최적화 기법입니다\\r\\n\\r\\n\\r\\nReact의 메모이제이션 도구들\\r\\n1. useMemo - 값 캐싱\\r\\n```jsx\\r\\nconst expensiveValue = useMemo(() => {\\r\\n  return heavyCalculation(props.data);\\r\\n}, [props.data]); // props.data가 같으면 재계산 안 함\\r\\n```\\r\\n3. useCallback - 함수 캐싱\\r\\n```jsx\\r\\nconst handleClick = useCallback(() => {\\r\\n  onClick(id);\\r\\n}, [id, onClick]); // 의존성이 같으면 함수 재생성 안 함\\r\\n```\\r\\n5. React.memo - 컴포넌트 캐싱\\r\\n```jsx\\r\\nconst MemoizedComponent = React.memo(({ name, age }) => {\\r\\n  return <div>{name} ({age})</div>;\\r\\n}); // props가 같으면 컴포넌트 재렌더링 안 함\\r\\n```\\r\\n\\r\\n장단점\\r\\n#### 장점\\r\\n- 복잡한 구조나 큰프로젝트에서 성능을 크게 개선, 리소스를 효율적으로 사용합니다.\\r\\n- 복잡한 연산을 다시 안하고 저장했다가 필요시 사용합니다.\\r\\n\\r\\n#### 단점\\r\\n- 올바른 사용이 중요합니다. \\r\\n- 잘못사용하면 성능저하를 일으킬수 있습니다.\\r\\n- 성능 병목현상이 실제로 발생하는 경우만 사용해야한다\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n#### Context API \\r\\n\\r\\n**핵심 개념**\\r\\n- Props 드릴링을 방지\\r\\n- 데이터 파이프라인 역할, 깊숙한 곳 까지 데이터를 전달해주는 통로역할을 함 단순하게 전달한다고 보면 됨.\\r\\n\\r\\n**언제 사용하는게 좋을까요**\\r\\n- 간단한 상태 전달이 목적일때,\\r\\n- 상태 로직이 복잡하지 않을때,\\r\\n- useReducer 와 사용시 외부 라이브러리 없이 내장 기능으로만 상태관리도 하고싶을때 사용.\\r\\n- 컴포넌트 구조 설계를 고민하고 사용합니다.\\r\\n\\r\\n#### 상태관리 라이브러리\\r\\n- 선택적 구독: 필요한 것만 골라서 최적화시키는 기능이 내장\\r\\n- 체계적 관리: 앱 상태가 복잡하고 클 때 구조적으로 관리\\r\\n- 렌더링 최적화: 성능 최적화가 중요할 때 세밀한 제어 가능\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n\\r\\n-  useMemo,useCallback,react.memo를 구현하면서 메모이제이션은 항상 성능을 보장하지 않는다는 점이였는데 이런 최적화 기법들을 어떤 기준에서 적용하시는지 궁금합니다. \\r\\n \\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-23T04:55:43Z","updated_at":"2025-07-26T05:22:05Z","closed_at":null,"merged_at":null,"merge_commit_sha":"2b6104a8a3857e79a43b3430345208e169ea8057","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/46/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/46/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/46/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/9c29c24475e057d47dbc816131b492e66d821e82","head":{"label":"Yangs1s:main","ref":"main","sha":"9c29c24475e057d47dbc816131b492e66d821e82","user":{"login":"Yangs1s","id":92585734,"node_id":"U_kgDOBYS_Bg","avatar_url":"https://avatars.githubusercontent.com/u/92585734?v=4","gravatar_id":"","url":"https://api.github.com/users/Yangs1s","html_url":"https://github.com/Yangs1s","followers_url":"https://api.github.com/users/Yangs1s/followers","following_url":"https://api.github.com/users/Yangs1s/following{/other_user}","gists_url":"https://api.github.com/users/Yangs1s/gists{/gist_id}","starred_url":"https://api.github.com/users/Yangs1s/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Yangs1s/subscriptions","organizations_url":"https://api.github.com/users/Yangs1s/orgs","repos_url":"https://api.github.com/users/Yangs1s/repos","events_url":"https://api.github.com/users/Yangs1s/events{/privacy}","received_events_url":"https://api.github.com/users/Yangs1s/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022578047,"node_id":"R_kgDOPPNNfw","name":"front_6th_chapter1-3","full_name":"Yangs1s/front_6th_chapter1-3","private":false,"owner":{"login":"Yangs1s","id":92585734,"node_id":"U_kgDOBYS_Bg","avatar_url":"https://avatars.githubusercontent.com/u/92585734?v=4","gravatar_id":"","url":"https://api.github.com/users/Yangs1s","html_url":"https://github.com/Yangs1s","followers_url":"https://api.github.com/users/Yangs1s/followers","following_url":"https://api.github.com/users/Yangs1s/following{/other_user}","gists_url":"https://api.github.com/users/Yangs1s/gists{/gist_id}","starred_url":"https://api.github.com/users/Yangs1s/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Yangs1s/subscriptions","organizations_url":"https://api.github.com/users/Yangs1s/orgs","repos_url":"https://api.github.com/users/Yangs1s/repos","events_url":"https://api.github.com/users/Yangs1s/events{/privacy}","received_events_url":"https://api.github.com/users/Yangs1s/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/Yangs1s/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/Yangs1s/front_6th_chapter1-3/deployments","created_at":"2025-07-19T11:26:45Z","updated_at":"2025-07-24T03:36:43Z","pushed_at":"2025-07-24T03:36:56Z","git_url":"git://github.com/Yangs1s/front_6th_chapter1-3.git","ssh_url":"git@github.com:Yangs1s/front_6th_chapter1-3.git","clone_url":"https://github.com/Yangs1s/front_6th_chapter1-3.git","svn_url":"https://github.com/Yangs1s/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":300,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/46"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/46"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/46"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/46/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/46/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/46/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/9c29c24475e057d47dbc816131b492e66d821e82"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/48","id":2688607001,"node_id":"PR_kwDOPMCTuc6gQOMZ","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/48","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/48.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/48.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/48","number":48,"state":"open","locked":false,"title":"[4팀 김지혜] Chapter 1-3. React, Beyond the Basics","user":{"login":"adds9810","id":46422329,"node_id":"MDQ6VXNlcjQ2NDIyMzI5","avatar_url":"https://avatars.githubusercontent.com/u/46422329?v=4","gravatar_id":"","url":"https://api.github.com/users/adds9810","html_url":"https://github.com/adds9810","followers_url":"https://api.github.com/users/adds9810/followers","following_url":"https://api.github.com/users/adds9810/following{/other_user}","gists_url":"https://api.github.com/users/adds9810/gists{/gist_id}","starred_url":"https://api.github.com/users/adds9810/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adds9810/subscriptions","organizations_url":"https://api.github.com/users/adds9810/orgs","repos_url":"https://api.github.com/users/adds9810/repos","events_url":"https://api.github.com/users/adds9810/events{/privacy}","received_events_url":"https://api.github.com/users/adds9810/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n[https://adds9810.github.io/front_6th_chapter1-3/](https://adds9810.github.io/front_6th_chapter1-3/)\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n이번 과제는 React를 그냥 쓰기만 하던 라이브러리에서 진짜 어떻게 돌아가는지 알 수 있게 해준 과제였습니다. 강의에서 배워서 알고있던 useRef, useMemo 같은 것들을 useState부터 하나하나 직접 만들어보면서, 이런 기능들이 왜 만들어졌는지 알 수 있었습니다.\\r\\nuseSyncExternalStore 써서 외부 상태 연결하고, Context API 쓸 때 성능 문제 생기는 것도 경험해보면서 최적화가 왜 중요한지 알게 됐습니다.\\r\\n이 모든 과정이 그냥 따로따로 알던 지식들을 하나로 연결해주고, React가 실제로 어떻게 작동하는지 깊게 이해할 수 있게 해줬습니다. 또한 AI 사용하는 방식도 1, 2주차에는 무작정 의존하던 것에서 이번에는 문서 보고 시도한 다음에 AI한테 질문하는 식으로 더 나아졌습니다.\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n1. **React 훅의 내부 동작 원리 이해**\\r\\n```tsx\\r\\n// packages/lib/src/hooks/useRef.ts - 렌더링 되어도 참조값 유지\\r\\nexport function useRef<T>(initialValue: T): { current: T } {\\r\\n  const [ref] = useState(() => ({ current: initialValue }));\\r\\n  return ref;\\r\\n}\\r\\n\\r\\n// packages/lib/src/hooks/useMemo.ts - 의존성 비교 기반 메모이제이션\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n  // 1. 이전 의존성과 결과를 저장할 ref 생성\\r\\n  const prevDeps = useRef<DependencyList>([]);\\r\\n  const prevResult = useRef<T | null>(null);\\r\\n\\r\\n  // 2. 현재 의존성과 이전 의존성 비교\\r\\n  if (prevResult.current === null || !_equals(prevDeps.current, _deps)) {\\r\\n    // 3. 의존성이 변경된 경우 factory(새로운 값을 계산) 함수 실행 및 결과 저장\\r\\n    prevDeps.current = _deps;\\r\\n    prevResult.current = factory();\\r\\n  }\\r\\n\\r\\n  // 4. 메모이제이션된 값 반환\\r\\n  return prevResult.current;\\r\\n}\\r\\n```\\r\\n\\r\\n강의에서 배웠던 훅들을 직접 구현해보니 **useState 기반으로 동작한다는 것**을 알게 되었습니다.\\r\\n\\r\\n2. **useAutoCallback 패턴**\\r\\n```tsx\\r\\n// packages/lib/src/hooks/useAutoCallback.ts\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n // 콜백함수가 참조하는 값은 항상 렌더링 시점에 최신화\\r\\n  const fnRef = useRef(fn);\\r\\n  fnRef.current = fn; \\r\\n\\r\\n  // 항상 같은 함수 반환\\r\\n  const stableCallback = useCallback((...args: unknown[]) => {\\r\\n    return fnRef.current(...args);\\r\\n  }, []); // 빈 의존성 배열로 참조 고정\\r\\n\\r\\n  return stableCallback as T;\\r\\n};\\r\\n```\\r\\n \\"참조는 고정하되 최신 값은 참조\\"라는 까다로운 요구사항을 `useRef` + `useCallback` 조합으로 해결하는 패턴을 알게 되었습니다.\\r\\n\\r\\n3. **Observer 패턴과 useSyncExternalStore 연동**\\r\\n```tsx\\r\\n// packages/lib/src/createObserver.ts\\r\\nexport const createObserver = () => {\\r\\n  const listeners = new Set<Listener>();\\r\\n\\r\\n  const unsubscribe = (fn: Listener) => {\\r\\n    listeners.delete(fn);\\r\\n  };\\r\\n\\r\\n  const subscribe = (fn: Listener) => {\\r\\n    listeners.add(fn); // 리스너 등록\\r\\n    // 구독 취소 함수 반환\\r\\n    return () => {\\r\\n      unsubscribe(fn);\\r\\n    };\\r\\n  };\\r\\n\\r\\n  const notify = () => listeners.forEach((listener) => listener());\\r\\n  return { subscribe, notify };\\r\\n};\\r\\n```\\r\\n\\r\\nuseSyncExternalStore와 호환되려면 **`subscribe` 함수가 구독 취소 함수를 반환해야 한다는 스펙**을 학습했습니다.\\r\\n\\r\\n**기존 지식의 재발견/심화:**\\r\\n- **메모이제이션**: 강의에서 배웠던 `useMemo`, `useCallback`의 실제 구현 방식 이해\\r\\n   이론적으로만 알고 있던 메모이제이션이 실제로는 `useRef`를 사용해서 이전 값과 현재 값을 비교하고, 의존성이 변경되었을 때만 새로운 값을 계산하는 방식으로 동작한다는 것을 직접 구현해보며 이해할 수 있었다. 특히 `shallowEquals` 함수를 사용해서 의존성 배열을 비교하는 부분에서, 단순히 `===` 비교가 아닌 얕은 비교를 통해 객체의 내용을 비교하는 것이 중요하다는 것을 체감했습니다.\\r\\n- **함수 참조 안정성**: 이론으로만 알고 있던 개념을 실제로 구현하며 체감\\r\\n   React에서 함수 참조가 불안정하면 하위 컴포넌트가 불필요하게 리렌더링된다는 이론을 알고 있었지만, 실제로 `ToastProvider`에서 함수들이 매번 새로 생성되어 `ProductCard`가 계속 리렌더링되는 문제를 겪어보면서 그 심각성을 직접 체감했다. 특히 `Context value`로 전달되는 함수들의 참조 안정성이 얼마나 중요한지, 그리고 `useMemo`, `useCallback`, `useAutoCallback`을 적절히 조합해서 사용해야 한다는 것을 실제 문제 해결 과정에서 깊이 이해할 수 있었습니다.\\r\\n\\r\\n**구현 과정에서의 기술적 도전과 해결:**\\r\\n`useAutoCallback`을 만들 때 타입 때문에 고생했습니다. 처음에는 타입을 몰라서 이렇게 코드만 적었었습니다.:\\r\\n\\r\\n```tsx\\r\\n// 초기 코드 - 타입 에러 발생\\r\\nexport const useAutoCallback = (fn) => {\\r\\n  const fnRef = useRef(fn);\\r\\n  fnRef.current = fn;\\r\\n\\r\\n  const stableCallback = useCallback((...args) => {\\r\\n    return fnRef.current(...args);\\r\\n  }, []);\\r\\n\\r\\n  return stableCallback;\\r\\n};\\r\\n```\\r\\n\\r\\n그런데 TypeScript에서 타입 에러가 나서 제네릭이라는 걸 처음 써봤는데, 함수의 타입을 미리 정해놓지 않고 나중에 정할 수 있게 하는 건데, 이게 생각보다 복잡했습니다.\\r\\n\\r\\n```tsx\\r\\n// 수정한 코드\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  // 콜백함수가 참조하는 값은 항상 렌더링 시점에 최신화\\r\\n  const fnRef = useRef(fn);\\r\\n  fnRef.current = fn;\\r\\n\\r\\n  // 대신 항상 동일한 참조를 유지해야 한다 (useCallback 활용)\\r\\n  // 어떤 인자가 올지 모르니 (...args: unknown[])로 모두 받아서 전달\\r\\n  const stableCallback = useCallback((...args: unknown[]) => {\\r\\n    return fnRef.current(...args);\\r\\n  }, []);\\r\\n\\r\\n  // 반환 타입을 T로 맞춰주기 위해 as T 사용\\r\\n  return stableCallback as T;\\r\\n};\\r\\n```\\r\\n\\r\\n처음에는 `unknown[]`라는 타입을 봤을 때 \\"이게 뭐지?\\" 싶었습니다. unknown은 \\"아무 타입이나 될 수 있다\\"는 뜻인데, 배열로 만들어서 함수의 인자들을 받는 거였다. 근데 이걸 다시 원래 함수의 타입으로 바꿔줘야 하는데, TypeScript가 자동으로 해주지 않아서 `as T`라는 타입 단언을 써야 했습니다.\\r\\n이렇게 해서 \\"참조는 고정하되 최신 값은 참조\\"라는 요구사항을 만족할 수 있었습니다. 강의에서 배운 개념들이지만 실제로 구현해보니까 하나하나가 다 어려웠습니다. 이후로도 `shallowEquals`나 `createObserver` 같은 다른 함수들을 만들 때도 비슷한 타입 에러들을 종종 마주쳤는데, 하나씩 해결해나가면서 TypeScript를 조금씩 이해할 수 있게 되었습니다.\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n```typescript\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  // 콜백함수가 참조하는 값은 항상 렌더링 시점에 최신화\\r\\n  const fnRef = useRef(fn);\\r\\n  fnRef.current = fn;\\r\\n\\r\\n  // 대신 항상 동일한 참조를 유지해야 한다 (useCallback 활용)\\r\\n  // ...args 어떤 인자든 그대로 실행\\r\\n  // 어떤 인자가 올지 모르니 (...args: unknown[])로 모두 받아서 전달\\r\\n  const stableCallback = useCallback((...args: unknown[]) => {\\r\\n    return fnRef.current(...args);\\r\\n  }, []);\\r\\n\\r\\n  // 반환 타입을 T로 맞춰주기 위해 as T 사용\\r\\n  return stableCallback as T;\\r\\n};\\r\\n\\r\\n```\\r\\n\\"참조는 고정하되 최신 값은 참조\\"라는 까다로운 요구사항을 useRef + useCallback 조합으로 해결한 부분이 가장 만족스럽습니다. 처음에는 타입 때문에 고생했지만, 제네릭과 unknown[], as T 타입 단언을 사용해서 TypeScript의 복잡한 타입 시스템을 해결할 수 있었습니다. \\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n**useMemo 과도한 사용**\\r\\n```typescript\\r\\n// packages/app/src/components/toast/ToastProvider.tsx - 현재 5번의 useMemo 사용\\r\\nconst { show, hide } = useMemo(() => createActions(dispatch), [dispatch]);\\r\\nconst hideAfter = useMemo(() => debounce(hide, DEFAULT_DELAY), [hide]);\\r\\nconst showWithHide = useAutoCallback((...args) => { ... }); // 내부에서 useMemo 사용\\r\\nconst commandValue = useMemo(() => ({ show: showWithHide, hide }), [showWithHide, hide]);\\r\\nconst stateValue = useMemo(() => ({ message: state.message, type: state.type }), [state.message, state.type]);\\r\\n```\\r\\n\\r\\nE2E 테스트 통과 과정에서 하나씩 메모이제이션을 추가하다 보니 이렇게 됐는데, useMemo를 이렇게 많이 써도 되는 건지 잘 모르겠습니다. 특히 { message: state.message, type: state.type } 같은 경우도 useMemo로 감싸야 하는 건지, 그리고 이런 식으로 계속 메모이제이션을 추가하는 게 올바른 방법인지 판단이 서지 않습니다. 더 나은 구조가 있다면 개선하고 싶습니다.\\r\\n\\r\\n### 학습 효과 분석\\r\\n**가장 큰 배움이 있었던 부분**\\r\\n- **리렌더링 과정의 이해**: 이론으로만 알고 있던 React의 리렌더링 과정을 직접 겪어보면서 깊이 이해할 수 있었습니다. 특히 `ToastProvider`에서 함수들이 매번 새로 생성되어 `ProductCard`가 불필요하게 리렌더링되는 문제를 해결하면서, Context value의 참조 안정성이 얼마나 중요한지 알게 되었습니다.\\r\\n- **메모이제이션의 중요성**: 단순히 `useMemo`나 `useCallback`을 사용하는 것이 아니라, 모든 불안정한 참조를 하나씩 메모이제이션해야 한다는 것을 배웠습니다. 하나라도 빠뜨리면 전체가 다시 리렌더링되는 경험을 통해 메모이제이션의 중요성을 깊이 이해할 수 있었습니다.\\r\\n\\r\\n**추가 학습이 필요한 영역**\\r\\n- **타입스크립트 고급 기능**: 제네릭과 타입 단언을 사용하면서 TypeScript의 복잡한 타입 시스템에 대한 이해가 부족하다는 것을 느꼈습니다. 특히 `unknown[]` 타입과 `as T` 타입 단언을 사용할 때 타입 안전성에 대한 고민이 필요할 것 같습니다.\\r\\n- **성능 최적화 감각**: 언제 메모이제이션을 사용해야 하는지, 어떤 부분에서 성능 이슈가 발생할 수 있는지에 대한 경험과 감각이 부족하다는 것을 깨달았습니다. E2E 테스트를 통해서만 문제를 발견할 수 있었던 점이 아쉬웠습니다. 실제 개발 과정에서 미리 예측하고 최적화하는 감각을 기르고 싶습니다.\\r\\n\\r\\n**실무 적용 가능성**\\r\\n- **상태 관리 라이브러리 이해**: 직접 상태 관리 라이브러리를 구현해보면서 Zustand나 Redux 같은 라이브러리들이 내부적으로 어떻게 동작하는지 이해할 수 있었습니다. 이는 실제 프로젝트에서 상태 관리 라이브러리를 선택하고 사용할 때 도움이 될 것 같습니다.\\r\\n- **커스텀 훅 설계**: `useAutoCallback`, `useShallowSelector` 같은 커스텀 훅을 직접 구현하면서 재사용 가능한 로직을 설계하는 방법을 배웠습니다. 이는 실제 프로젝트에서 공통 로직을 추상화할 때 유용할 것 같습니다.\\r\\n\\r\\n### 과제 피드백\\r\\n**과제에서 좋았던 부분:**\\r\\n- **단계별 구현**: useRef → useMemo → useCallback 순서로 의존성을 가진 구현이 학습에 효과적이었습니다.\\r\\n- **실제 동작하는 애플리케이션**: 단순한 예제가 아닌 실제 쇼핑몰을 통한 학습이 재밌었습니다.\\r\\n- **E2E 테스트**: 실제 성능 문제를 발견할 수 있는 현실적인 테스트가 도움되었습니다.\\r\\n- **자립적인 학습 경험**: 1, 2주차에 비해 AI에 무작정 의존하지 않고 조언이나 공유해주신 문서를 보고 ai에게 물어보며 해결을 해서 이전보다 기억에 더 남았습니다. 특히 useSyncExternalStore나 Observer 패턴 같은 개념들을 직접 찾아보고 이해하려고 노력한 게 도움이 되었습니다.\\r\\n\\r\\n**과제에서 어려웠던 부분:**\\r\\n- **메모이제이션 기준**: 가이드를 보고 상황에 맞게 적용하는 것도 제 능력인데, 아직 그런 경험과 감각이 부족해서 언제 useMemo를 사용해야 하는지를 잘 몰랐던 것 같습니다.\\r\\n- **타입 에러**: TypeScript 활용을 잘 못해 관련 에러 해결에 시간이 많이 소요되었습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n  리액트의 렌더링은 컴포넌트의 `state`나 `props`가 변경될 때 발생하며, 크게 세 단계로 이루어집니다.\\r\\n   1. **렌더(Render) 단계**:\\r\\n       - state/props 변경, 부모 컴포넌트 리렌더링, 또는 `forceUpdate` 호출 시 렌더링이 실행됩니다.\\r\\n       - React는 컴포넌트 함수를 호출하여 어떤 UI를 그려야 할지 결정하고, 그 결과로 가상돔(Virtual DOM) 객체가 만들어 집니다. 이 과정은 실제 DOM을 변경하지 않으므로 비용이 저렴합니다.\\r\\n   2. **조정(Reconciliation) 단계**:\\r\\n       - 새로 생성된 가상돔과 이전 가상돔을 비교하여 변경된 부분을 찾아냅니다.(Diffing)\\r\\n       - React는 효율적인 Diffing 알고리즘을 사용하여 최소한의 변경사항을 계산합니다.\\r\\n   3. **커밋(Commit) 단계**:\\r\\n       - 조정 단계에서 찾아낸 변경사항들을 실제 DOM에 한 번에 적용하여 UI를 업데이트 합니다.\\r\\n         이 과정은 실제 브라우저가 화면을 새로 그려(렌더링 유발) 비용이 가장 크게 발생합니다.\\r\\n\\r\\n  이러한 과정을 최적화하기 위해 React는 `memo`, `useMemo`, `useCallback`과 같은 도구를 제공합니다. 이들은 렌더 단계에서 props나 의존성이 변경되지 않았을 경우, 이전 렌더 결과를 재사용하여 불필요한 가상돔 생성 및 Diffing 과정을 건너뛰게 해줍니다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n  메모이제이션은 \\"비용이 비싼 연산의 결과를 저장해두고, 동일한 입력에 대해서는 저장된 결과를 재사용하는 기술\\"이라고 생각합니다.\\r\\n\\r\\n   - **필요한 시점**:\\r\\n       - 복잡하고 무거운 계산이 포함된 함수의 반복 호출을 피하고 싶을 때 (useMemo).\\r\\n       -  자식 컴포넌트에 함수(콜백)를 props로 전달할 때, 불필요한 리렌더링을 방지하기 위해 함수의 참조 동등성을 유지해야 할 때 (useCallback).\\r\\n       -  컴포넌트의 props가 변경되지 않았음에도 부모의 리렌더링 때문에 불필요하게 다시 렌더링되는 것을 막고 싶을 때 (React.memo).\\r\\n\\r\\n   - **장점과 단점**:\\r\\n       - 장점: 불필요한 연산과 렌더링을 줄여 애플리케이션의 성능을 크게 향상시킬 수 있습니다.\\r\\n       - 단점: 메모리를 추가로 사용하여 이전 값과 의존성을 저장해야 하므로, 메모리 사용량이 늘어납니다. 또한, 모든 곳에 메모이제이션을 적용하면 오히려 의존성 비교 비용 때문에 성능이 저하되거나 코드가 복잡해질 수 있습니다.\\r\\n\\r\\n  결론적으로, 메모이제이션은 성능 저하가 실제로 발생하는 지점을 프로파일링 도구로 측정한 후, 꼭 필요한 곳에 전략적으로 사용하는 것이 중요합니다.(그렇지만 저는 이번 과제에서 남발한게 아닌가 하는 느낌;;;)\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n  컨텍스트와 상태관리는 \\"컴포넌트 트리 전반에 걸쳐 흩어져 있는 데이터를 효율적으로 관리하고 공유하기 위한 솔루션\\"이라고 생각합니다.\\r\\n\\r\\n   - **필요한 이유**:\\r\\n       - Prop Drilling 해결: 여러 단계의 자식 컴포넌트로 props를 계속해서 내려주는 \'Prop Drilling\' 문제를 해결하고, 필요한 컴포넌트가 데이터에 직접 접근할 수 있게 해줍니다.\\r\\n       - 상태의 중앙화: 애플리케이션의 상태를 한 곳에서 관리하여 데이터 흐름을 예측 가능하고 디버깅하기 쉽게 만듭니다.\\r\\n\\r\\n   - **장점과 단점**:\\r\\n       - 장점: 코드 구조가 단순해지고, 상태 관리가 용이해지며, 컴포넌트 간의 결합도를 낮출 수 있습니다.\\r\\n       - 단점: React Context API는 컨텍스트 값이 변경되면 해당 컨텍스트를 구독하는 모든 컴포넌트가 리렌더링되는 문제가 있습니다. 이는 성능 저하의 원인이 될 수 있습니다.\\r\\n\\r\\n   - **주의점 및 해결책**:\\r\\n1. **Context 분리의 중요성**\\r\\n\\r\\n```tsx\\r\\n// 잘못된 예: 모든 것을 하나의 Context에\\r\\n<ToastContext value={{ show, hide, message, type }}>\\r\\n\\r\\n// 올바른 예: 용도별로 분리\\r\\n<ToastCommandContext value={{ show, hide }}>\\r\\n  <ToastStateContext value={{ message, type }}>\\r\\n```\\r\\n\\r\\n2. **Provider value 메모이제이션**\\r\\n\\r\\n```tsx\\r\\n// 문제: 매번 새로운 객체 생성\\r\\n<ToastCommandContext value={{ show: showWithHide, hide }}>\\r\\n\\r\\n// 해결: 메모이제이션\\r\\nconst commandValue = useMemo(() => ({ show: showWithHide, hide }), [showWithHide, hide]);\\r\\nconst stateValue = useMemo(() => ({ message: state.message, type: state.type }), [state.message, state.type]);\\r\\n<ToastCommandContext value={commandValue}>\\r\\n  <ToastStateContext value={stateValue}>\\r\\n```\\r\\n\\r\\n**상태관리 라이브러리 직접 구현 경험:**\\r\\nObserver 패턴을 기반으로 한 상태 관리 시스템을 구현하면서:\\r\\n\\r\\n- useSyncExternalStore와의 호환성을 고려해야 한다는 것\\r\\n- subscribe 함수가 구독 취소 함수를 반환해야 한다는 것\\r\\n\\r\\n**Context vs 상태관리 라이브러리:**\\r\\n\\r\\n- Context: React 내장, 간단한 전역 상태에 적합\\r\\n- 상태관리 라이브러리: 복잡한 상태 로직, 성능 최적화에 유리\\r\\n\\r\\n이번 과제를 통해 둘 다 결국 \\"상태 변경 시 구독자들에게 알림\\"이라는 동일한 패턴을 사용한다는 것을 알게 되었습니다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n- **ToastProvider에서 useMemo 과도한 사용** : 해당 페이지에서 useMemo를 5번 사용하고 있는데 과도하게 사용되고 있다고 생각하지만 다른 방법을 모르겠습니다. 어찌저찌 요구사항과 테스트 통과를 위해 구현해내긴 했으나 더 좋은 방법이 있을지 궁금합니다.\\r\\n- **useAutoCallback 패턴이 올바른지** : useRef와 useCallback을 조합해서 만든 건데, 이런 패턴이 실제로 쓰이는 방법인지 궁금합니다. 다른 더 좋은 방법이 있을까요?","created_at":"2025-07-23T12:01:37Z","updated_at":"2025-07-29T02:01:18Z","closed_at":null,"merged_at":null,"merge_commit_sha":"c213536c023241ef56a5347d8939395548684f12","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/48/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/48/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/48/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/b1da35eac65f33651393d0b5b20ce3e535efbd1c","head":{"label":"adds9810:main","ref":"main","sha":"b1da35eac65f33651393d0b5b20ce3e535efbd1c","user":{"login":"adds9810","id":46422329,"node_id":"MDQ6VXNlcjQ2NDIyMzI5","avatar_url":"https://avatars.githubusercontent.com/u/46422329?v=4","gravatar_id":"","url":"https://api.github.com/users/adds9810","html_url":"https://github.com/adds9810","followers_url":"https://api.github.com/users/adds9810/followers","following_url":"https://api.github.com/users/adds9810/following{/other_user}","gists_url":"https://api.github.com/users/adds9810/gists{/gist_id}","starred_url":"https://api.github.com/users/adds9810/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adds9810/subscriptions","organizations_url":"https://api.github.com/users/adds9810/orgs","repos_url":"https://api.github.com/users/adds9810/repos","events_url":"https://api.github.com/users/adds9810/events{/privacy}","received_events_url":"https://api.github.com/users/adds9810/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023169341,"node_id":"R_kgDOPPxTPQ","name":"front_6th_chapter1-3","full_name":"adds9810/front_6th_chapter1-3","private":false,"owner":{"login":"adds9810","id":46422329,"node_id":"MDQ6VXNlcjQ2NDIyMzI5","avatar_url":"https://avatars.githubusercontent.com/u/46422329?v=4","gravatar_id":"","url":"https://api.github.com/users/adds9810","html_url":"https://github.com/adds9810","followers_url":"https://api.github.com/users/adds9810/followers","following_url":"https://api.github.com/users/adds9810/following{/other_user}","gists_url":"https://api.github.com/users/adds9810/gists{/gist_id}","starred_url":"https://api.github.com/users/adds9810/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adds9810/subscriptions","organizations_url":"https://api.github.com/users/adds9810/orgs","repos_url":"https://api.github.com/users/adds9810/repos","events_url":"https://api.github.com/users/adds9810/events{/privacy}","received_events_url":"https://api.github.com/users/adds9810/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/adds9810/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/adds9810/front_6th_chapter1-3/deployments","created_at":"2025-07-20T17:09:10Z","updated_at":"2025-07-24T21:06:01Z","pushed_at":"2025-07-24T21:05:57Z","git_url":"git://github.com/adds9810/front_6th_chapter1-3.git","ssh_url":"git@github.com:adds9810/front_6th_chapter1-3.git","clone_url":"https://github.com/adds9810/front_6th_chapter1-3.git","svn_url":"https://github.com/adds9810/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":113,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/48"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/48"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/48"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/48/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/48/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/48/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/b1da35eac65f33651393d0b5b20ce3e535efbd1c"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/49","id":2688691605,"node_id":"PR_kwDOPMCTuc6gQi2V","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/49","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/49.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/49.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/49","number":49,"state":"open","locked":false,"title":"[1팀 이은지] Chapter 1-3. React, Beyond the Basics","user":{"login":"angielxx","id":103434451,"node_id":"U_kgDOBipI0w","avatar_url":"https://avatars.githubusercontent.com/u/103434451?v=4","gravatar_id":"","url":"https://api.github.com/users/angielxx","html_url":"https://github.com/angielxx","followers_url":"https://api.github.com/users/angielxx/followers","following_url":"https://api.github.com/users/angielxx/following{/other_user}","gists_url":"https://api.github.com/users/angielxx/gists{/gist_id}","starred_url":"https://api.github.com/users/angielxx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/angielxx/subscriptions","organizations_url":"https://api.github.com/users/angielxx/orgs","repos_url":"https://api.github.com/users/angielxx/repos","events_url":"https://api.github.com/users/angielxx/events{/privacy}","received_events_url":"https://api.github.com/users/angielxx/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\nhttps://angielxx.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n# 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n##  새로 학습한 내용\\r\\n\\r\\n### 1. 실제 React가 hook을 관리하는 방식\\r\\n\\r\\nHook을 구현하기 전 실제 React에서는 어떻게 하고 있는지 알아봤습니다. React는 훅을 상태 배열(Linked List)과 인덱스를 기반으로 동작하는 것을 알게 됐습니다. 이 내용을 통해 왜 hook을 조건문이나 반복문 안에서 쓰면 안되는지 이해하게 됐습니다.\\r\\n\\r\\n🔸 핵심 개념\\r\\n\\r\\n“React는 각 훅이 어느 순서로 호출되었는지 기억하고, 렌더링마다 그 순서에 맞는 상태값을 꺼내서 반환한다.”\\r\\n\\r\\n🔸 Hook 상태 저장 구조 (개념적 예시)\\r\\n\\r\\n```js\\r\\n// Component마다 존재하는 구조 (추상화된 구조)\\r\\nlet hooks: Hook[] = [];\\r\\nlet currentHookIndex: number = 0;\\r\\n```\\r\\n\\r\\nhooks\\r\\n\\r\\n- 현재 렌더링 중인 컴포넌트 인스턴스에 대한 모든 훅의 상태를 저장하는 배열 또는 연결 리스트의 시작점\\r\\n- 훅 호출 순서(index)에 따라 저장되며, 리렌더링 시에도 그 순서를 유지함\\r\\n- 새로운 렌더링이 발생해도 기존 상태를 재사용하며, currentHookIndex = 0부터 훅을 순차적으로 접근\\r\\n\\r\\ncurrentHookIndex\\r\\n\\r\\n- 렌더링 도중에 현재 어떤 훅을 실행하고 있는지 나타내는 인덱스\\r\\n- 각 훅 호출 시 hooks[currentHookIndex]를 사용하며, 훅 호출이 끝나면 currentHookIndex++를 해서 다음 훅으로 넘어간다.\\r\\n\\r\\nReact의 내부에서 Hook 상태는 실제로 객체 형태로 저장되며, 연결 리스트 형태로 되어 있습니다. 이것을 내부에서는 workInProgressHook이라는 포인터로 순차적으로 탐색하며 useState, useEffect 등에서 상태를 저장하거나 꺼냅니다.\\r\\n\\r\\n🔸 예시: useState 구현 흉내\\r\\n\\r\\n```js\\r\\n// React 내부처럼 훅 상태를 저장할 배열\\r\\nlet hooks = [];\\r\\nlet currentHookIndex = 0;\\r\\n\\r\\n// useState 흉내\\r\\nfunction useState(initialValue) {\\r\\n  const hookIndex = currentHookIndex;\\r\\n\\r\\n  // 최초 렌더 시만 초기값 설정\\r\\n  if (hooks[hookIndex] === undefined) {\\r\\n    hooks[hookIndex] = initialValue;\\r\\n  }\\r\\n\\r\\n  const setState = (newValue) => {\\r\\n    hooks[hookIndex] = newValue;\\r\\n    render(); // 상태 바뀌면 리렌더링\\r\\n  };\\r\\n\\r\\n  currentHookIndex++;\\r\\n  return [hooks[hookIndex], setState];\\r\\n}\\r\\n```\\r\\n\\r\\n만약 컴포넌트가 이렇게 생겼다면\\r\\n\\r\\n```js\\r\\nfunction MyComponent() {\\r\\n  const [count, setCount] = useState(0); // 첫 번째 훅\\r\\n  const [text, setText] = useState(\\"Hi\\"); // 두 번째 훅\\r\\n  const ref = useRef(null); // 세 번째 훅\\r\\n}\\r\\n```\\r\\n\\r\\nReact는 이 컴포넌트를 렌더링할 때, hooks[] 배열을 다음처럼 구성합니다:\\r\\n\\r\\n```js\\r\\n// 최초 렌더링 시\\r\\nhooks = [\\r\\n  0, // hooks[0] = count의 상태\\r\\n  \\"Hi\\", // hooks[1] = text의 상태\\r\\n  { current: null }, // hooks[2] = ref의 상태\\r\\n];\\r\\n```\\r\\n\\r\\n### 2. hook의 호출 순서가 중요한 이유\\r\\n\\r\\n1번 내용을 기반으로 hook 호출 순서가 왜 중요한 지 hook 상태 관리 구조를 기반으로 살펴보겠습니다.\\r\\n\\r\\n❌ hook의 호출 순서가 꼬이는 예:\\r\\n\\r\\n```js\\r\\n// hook의 호출 순서 규칙을 위반하는 경우 - 조건문, 반복문\\r\\nif (condition) {\\r\\n  const [a, setA] = useState(0); // ❌ Hook이 조건문 안에 있음\\r\\n}\\r\\nconst [b, setB] = useState(0);\\r\\n```\\r\\n\\r\\n1차 렌더링 시 condition === true라면\\r\\n\\r\\n```js\\r\\nhooks[0] = 0; // a\\r\\nhooks[1] = 1; // b\\r\\n```\\r\\n\\r\\n2차 렌더링 시 condition === false라면\\r\\n\\r\\n```js\\r\\n// 첫 번째 useState 호출이 생략됨!\\r\\nhooks[0] = 1; // b라고 생각했지만, a의 자리 덮어씀 → 꼬임 발생\\r\\n```\\r\\n\\r\\nReact는 각 컴포넌트의 상태를 렌더링 “순서(index)”로 저장하고 꺼내오기 때문에, Hook의 호출 순서가 바뀌면 완전히 잘못된 상태를 꺼내오게 됩니다!\\r\\n\\r\\n🔸 React의 실제 hooks 구조 맛보기:\\r\\n\\r\\nReact는 내부적으로 hooks[] 배열이 아닌, **연결 리스트(Linked List)**로 훅 상태를 저장합니다:\\r\\n\\r\\n```js\\r\\ntype Hook = {\\r\\n    memoizedState: any;\\r\\n    next: Hook | null;\\r\\n};\\r\\n\\r\\nhook0: { memoizedState: 0, next: hook1 } // 연결 리스트이기 때문에 next 사용\\r\\nhook1: { memoizedState: \\"Hi\\", next: hook2 }\\r\\nhook2: { memoizedState: { current: null }, next: null }\\r\\n```\\r\\n\\r\\n각 Hook은 다음 Hook을 .next로 가리키고 memoizedState는 훅의 실제 상태값\\r\\n\\r\\n🔸 React가 연결 리스트를 사용하는 이유\\r\\n\\r\\n1. 배열보다 유연하게 Hook을 추가, 삭제가 쉬우므로 React 내부 최적화 작업에 유리\\r\\n2. 각 훅마다 별도 정보를 저장할 수 있음\\r\\n3. 연결 리스트는 다음 훅을 .next로 따라가며 순회하기 때문에 훅 호출 순서를 정확히 따라갈 수 있음\\r\\n4. React는 렌더링 상태를 FiberNode라는 구조로 관리하는데, 이 Fiber 구조와 통합하기 쉬움 (추가 공부 필요)\\r\\n\\r\\n> React의 훅은 상태를 “호출 순서” 기반으로 저장하며,\\r\\n> 이 상태들을 FiberNode.memoizedState에 연결 리스트로 관리합니다.\\r\\n> 이러한 구조 덕분에 React는 함수형 컴포넌트로도 상태를 유지할 수 있으며,\\r\\n> 렌더링 최적화와 내부 동기화를 효율적으로 처리할 수 있습니다.\\r\\n\\r\\n### 2. React의 얕은 비교\\r\\n\\r\\n얕은 비교, 깊은 비교에 대해 정확하게 이해하지 못하고 있는 것 같아 비교함수를 구현하기 전에 얕은 비교와 깊은 비교의 개념과 React에서 쓰이는 얕은 비교의 사용이유와 예시를 학습했습니다.\\r\\n\\r\\n🔸 얕은 비교 (shallow comparison)\\r\\n\\r\\n객체의 참조값 또는 1단계 프로퍼티만 비교\\r\\n숫자, 문자열 등의 원시타입은 값을 비교하고 배열, 객체 등 참조 타입은 값 혹은 속성을 비교하지 않고, 참조값을 비교합니다.\\r\\n예: ===, Object.is, shallowEqual() 등\\r\\n\\r\\n🔸 깊은 비교(deep comparison)\\r\\n\\r\\n객체의 모든 하위 프로퍼티를 재귀적으로 비교\\r\\n예: Lodash의 \\\\_.isEqual(), 커스텀 재귀 함수 등\\r\\n\\r\\n🔸 예시:\\r\\n\\r\\n```js\\r\\nconst obj1 = { a: 1, b: { c: 2 } };\\r\\nconst obj2 = { a: 1, b: { c: 2 } };\\r\\n\\r\\nobj1 === obj2; // 얕은 비교 false (참조 다름)\\r\\nshallowEqual(obj1, obj2); // 얕은 비교 false (b의 참조값 다름)\\r\\n_.isEqual(obj1, obj2); // 깊은 비교 true\\r\\n```\\r\\n\\r\\n🔸 얕은 비교가 사용되는 곳\\r\\n\\r\\nReact는 퍼포먼스를 위해 기본적으로 얕은 비교를 사용합니다.\\r\\n\\r\\n- React.memo(Component) : props가 얕게 같으면 리렌더링 방지\\r\\n- useMemo, useCallback : deps 배열 안의 항목 비교\\r\\n- PureComponent : 클래스 컴포넌트 최적화\\r\\n- useEffect : 값이 바뀌었는지 확인할 때 얕은 비교\\r\\n\\r\\n🔸 얕은 비교가 사용하는 이유\\r\\n\\r\\n- 빠르다 : 깊은 비교는 재귀로 인해 느리고 비용이 큼\\r\\n- 충분함 : 대부분의 경우 객체가 불변성 원칙을 따르므로, 얕은 비교로도 변화 감지가 가능\\r\\n\\r\\n### 3. Object.is\\r\\n\\r\\nReact 내부적으로 Object.is를 사용한다고 2번을 통해 알게 됐는데, 비교 함수를 구현할 때 Object.is를 사용하자니 정확히 Object.is가 어떻게 동작하는지 몰라 먼저 정리해봤습니다.\\r\\n\\r\\nObject.is()는 자바스크립트에서 값의 **동일성(sameness)**을 비교하는 내장 함수로, 자주 쓰이는 ===과 유사하지만, 미묘한 차이점이 존재한다.\\r\\n\\r\\n🔸 Object.is()란?\\r\\n\\r\\n```js\\r\\nObject.is(value1, value2);\\r\\n```\\r\\n\\r\\n- 두 값이 **정확히** 같은지 여부를 판단\\r\\n- 두 가지 경우에서만 ===과 다르게 동작: `+0 vs -0`, `NaN vs NaN`\\r\\n\\r\\n| 비교 대상           | `===` 결과 | `Object.is()` 결과 | 설명         |\\r\\n| ------------------- | ---------- | ------------------ | ------------ |\\r\\n| `1`, `1`            | `true`     | `true`             | 동일         |\\r\\n| `[]`, `[]`          | `false`    | `false`            | 참조 다름    |\\r\\n| `null`, `undefined` | `false`    | `false`            | 타입 다름    |\\r\\n| `+0`, `-0`          | `true`     | `false`            | ✅ 차이 있음 |\\r\\n| `NaN`, `NaN`        | `false`    | `true`             | ✅ 차이 있음 |\\r\\n\\r\\n🔸 왜 Object.is를 사용해야 하는가?\\r\\n\\r\\n+0과 -0을 구분해야 하는 경우 : 수학적 연산에서 양/음 0을 구분해야 할 때 유용\\r\\n\\r\\n```js\\r\\nObject.is(+0, -0); // false\\r\\n+0 === -0; // true\\r\\n```\\r\\n\\r\\nNaN을 자기 자신과 비교 가능하게\\r\\n\\r\\n```js\\r\\nNaN === NaN; // false\\r\\nObject.is(NaN, NaN); // true\\r\\n```\\r\\n\\r\\n🔸 Object.is Polyfill\\r\\n\\r\\n어떤 분이 디스코드에서 폴리필 얘기를 하셔서 궁금해서 찾아봤습니다. `Object.is()`는 ES6(ECMAScript 2015)에서 도입된 함수이기 때문에, **구형 브라우저(특히 IE)**에서는 지원하지 않을 수 있습니다. 그래서 구형 브라우저에서도 같은 동작을 하도록 대체 함수를 만들어 사용할 수 있습니다.\\r\\n\\r\\n```js\\r\\n// Object.is가 없는 경우를 위한 대체 함수 (폴리필)\\r\\nfunction is(x, y) {\\r\\n  if (x === y) {\\r\\n    // +0과 -0 구분\\r\\n    return x !== 0 || 1 / x === 1 / y;\\r\\n  }\\r\\n  // NaN과 NaN 비교\\r\\n  return x !== x && y !== y;\\r\\n}\\r\\n\\r\\n// 폴리필 적용 방식 예시\\r\\nif (!Object.is) {\\r\\n  Object.is = function (x, y) {\\r\\n    if (x === y) {\\r\\n      return x !== 0 || 1 / x === 1 / y;\\r\\n    }\\r\\n    return x !== x && y !== y;\\r\\n  };\\r\\n}\\r\\n```\\r\\n\\r\\n이렇게 하면 모든 코드에서 Object.is()를 안전하게 호출할 수 있게 됩니다.\\r\\n\\r\\n### 4. useSyncExternalStore 학습\\r\\n\\r\\n태어나서 처음 들어보는 useSyncExternalStore 훅을 사용했지만, 생성 배경이나 해결해주는 문제들에 대해선 자세히 몰라 과제를 모두 완성한 후 내용을 더 찾아봤습니다. (영감을 주신 오하늘님께 감사를..글 재밌게 잘 읽었습니다.)\\r\\n\\r\\n🔸 useSyncExternalStore란?\\r\\n\\r\\n외부 상태 저장소(external store)의 상태를 React 컴포넌트와 동기적으로 연결(sync)해주는 훅\\r\\n\\r\\n🔸 왜 useSyncExternalStore가 생겼는가?\\r\\n\\r\\nuseSyncExternalStore는 React 18에서 새롭게 추가된 훅인데, 이 훅이 생겨난 배경은 실제 React 사용자들의 문제점을 해결하기 위해서라고 합니다.\\r\\n\\r\\nReact 개발자들이 외부 상태(store)를 연결하기 위해 기존에 아래와 같은 방식을 사용한다면,\\r\\n\\r\\n```js\\r\\n// 예전 방식 (useEffect + useState)\\r\\nconst [state, setState] = useState(store.getState());\\r\\n\\r\\nuseEffect(() => {\\r\\n  const unsubscribe = store.subscribe(() => {\\r\\n    setState(store.getState());\\r\\n  });\\r\\n  return unsubscribe;\\r\\n}, []);\\r\\n```\\r\\n\\r\\n이 방식에서 발생하는 문제점은,\\r\\n\\r\\n1. 렌더링 타이밍 문제 (깜빡임)\\r\\n\\r\\n- useEffect는 렌더 이후에 동작하기 때문에 외부 상태가 이미 바뀌었는데도, 오래된 값으로 화면을 그린 후 → 다시 수정됩니다. 그래서 깜빡이는 UI, 불일치된 렌더링이 발생합니다.\\r\\n\\r\\n2. React Concurrent Mode(동시성 모드)에서 위험\\r\\n\\r\\n- React 18부터는 렌더링을 일시 중단하고 다시 재시작할 수 있습니다. 이런 경우 외부 상태가 바뀌면 React 내부 상태와 외부 상태가 불일치할 수 있습니다.\\r\\n\\r\\n예를 들어:\\r\\n\\r\\n- React가 렌더링 중간에 작업을 멈췄는데, 그 사이 store 값이 바뀐다.\\r\\n- 나중에 다시 렌더를 재개하면 오래된 값을 기반으로 렌더링되어 버그가 발생한다.\\r\\n\\r\\n3. SSR(서버 사이드 렌더링) 지원 어려움\\r\\n\\r\\nuseEffect는 서버에서는 실행되지 않기 때문에 서버에서 클라이언트로 넘어올 때 상태가 달라지는 “hydration mismatch” 발생할 수 있습니다.\\r\\n\\r\\n🔸 useSyncExternalStore가 해결한 방법\\r\\n\\r\\n1.  렌더링 “이전”에 상태 스냅샷을 동기적으로 읽음\\r\\n\\r\\n```js\\r\\nuseSyncExternalStore(subscribe, getSnapshot);\\r\\n```\\r\\n\\r\\ngetSnapshot()은 렌더링이 시작되기 전에 호출되어, 컴포넌트가 항상 최신 상태를 기준으로 렌더링되도록 보장합니다.\\r\\n\\r\\n- useEffect로 늦게 상태를 반영하는 등의 작업은 필요 없게 됐습니다.\\r\\n- 결과적으로, 깜빡임이나 렌더-상태 불일치 문제가 사라졌습니다.\\r\\n\\r\\n2.  외부 상태의 변화 시점을 추적하여, 렌더링이 확정되기 전 snapshot이 바뀌면 렌더를 무효화\\r\\n\\r\\nuseSyncExternalStore는 외부 상태가 렌더링 중에 변경되었는지를 감지하고,\\r\\n렌더링이 커밋되기 전에 변경이 감지되면 렌더링을 무효화하고 다시 시작합니다.\\r\\n\\r\\n- 중간 상태가 오염되는 것을 막고, 외부 상태와 React 상태의 일관성을 유지합니다.\\r\\n- 외부 상태의 예측 불가능한 변경에도 안정적으로 대응할 수 있습니다.\\r\\n\\r\\n3. 서버사이드 렌더링(SSR)에서의 상태 불일치를 방지\\r\\n\\r\\n세 번째 인자인 getServerSnapshot()을 통해 서버에서 사용할 초기 상태를 미리 정의할 수 있습니다.\\r\\n\\r\\n- 서버에서의 렌더링 결과와 클라이언트의 첫 렌더링 결과가 동일한 스냅샷 기반으로 일치되므로,\\r\\n  hydration mismatch(서버-클라이언트 불일치) 오류를 방지할 수 있습니다.\\r\\n\\r\\n🔸 사용법\\r\\n\\r\\n```js\\r\\nconst state = useSyncExternalStore(\\r\\n  subscribe,           // 변화 감지 함수 (필수)\\r\\n  getSnapshot,         // 현재 상태를 가져오는 함수 (필수)\\r\\n  getServerSnapshot?   // SSR 전용 스냅샷 (선택)\\r\\n);\\r\\n```\\r\\n\\r\\n- subscribe: 외부 상태가 바뀔 때 호출될 콜백 등록 (store.subscribe)\\r\\n- getSnapshot: 현재 상태 값을 반환 (store.getState)\\r\\n- getServerSnapshot: 서버 사이드에서 사용할 초기 상태 (SSR용)\\r\\n\\r\\n## hook 구현 및 트러블 슈팅\\r\\n\\r\\n### 1. useRef\\r\\n\\r\\nuseRef는\xA0리렌더링을\xA0트리거하지\xA0않는 내부적으로\xA0값이\xA0유지되는\xA0객체를\xA0반환해야 합니다. 클로저, 글로벌 변수 등 다양한 방법을 시도해봤지만 모두 제대로 동작하지 않아, React의 훅 시스템을 이용하여 ref 객체를 생성하는 방식을 사용했습니다.\\r\\n\\r\\n```js\\r\\nexport function useRef<T>(initialValue: T): { current: T } {\\r\\n  const [ref] = useState(() => ({ current: initialValue }));\\r\\n\\r\\n  return ref;\\r\\n}\\r\\n```\\r\\n\\r\\nuseState에\xA0함수를\xA0인자로\xA0넘기면, 이 함수는\xA0컴포넌트가 처음\xA0마운트될 때 딱\xA0한\xA0번만\xA0실행되기 때문에 하나의 useRef의 인스턴스의 값을 유지할 수 있는 객체 하나를 만들어 사용할 수 있습니다.\\r\\n\\r\\n이 방법이 맘에 들지 않아 React의 useRef 구현 방식을 살펴보았으나 hooks의 memoizedState에 useRef의 상태를 보관한다고 하여, 실제로 구현해보고 싶은 마음이 있었지만 이번 과제에서 실제로 구현해보기에는 무리일 것 같아 학습으로만 남깁니다!\\r\\n\\r\\n```js\\r\\nfunction useRef(initialValue) {\\r\\n  // 내부적으로 React는 이 값을 fiber tree에 저장함\\r\\n  const ref = mountRef(initialValue);\\r\\n  return ref;\\r\\n}\\r\\n```\\r\\n\\r\\n### 2. useMemo\\r\\n\\r\\n\\"계산된 값과 의존성 배열을 저장해놓고, 의존성 배열의 변경 여부를 확인하고 그에 따라 새로 계산하거나 이전에 계산한 값 반환\\"하는 것을 useMemo의 요구사항으로 정의했습니다.\\r\\n\\r\\n❌\xA0첫번째 시도 : 매번 재계산함\\r\\n\\r\\n```js\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n  let hasMemoMounted = false;\\r\\n\\r\\n  const memoizedState = useRef<{ value: T; deps: DependencyList } | null>(null);\\r\\n\\r\\n  if (!hasMemoMounted) {\\r\\n    hasMemoMounted = true;\\r\\n    memoizedState.current = {\\r\\n      value: factory(),\\r\\n      deps: _deps,\\r\\n    };\\r\\n\\r\\n    return memoizedState.current.value as T;\\r\\n  }\\r\\n\\r\\n  const compareFunc = _equals || shallowEquals;\\r\\n\\r\\n  if (!memoizedState.current || !compareFunc(memoizedState.current.deps, _deps)) {\\r\\n    memoizedState.current = {\\r\\n      value: factory(),\\r\\n      deps: _deps,\\r\\n    };\\r\\n  }\\r\\n\\r\\n  return memoizedState.current.value as T;\\r\\n}\\r\\n```\\r\\n\\r\\n원인\\r\\n\\r\\n- hasMemoMounted는\xA0함수\xA0내부의\xA0지역 변수이기 때문에 React\xA0함수형\xA0컴포넌트(또는 훅)는\xA0매\xA0렌더마다\xA0함수가\xA0새로 실행되므로, 매 렌더링마다 hasMemoMounted는 false로 시작하게 됩니다.\\r\\n\\r\\n✅ hasMemoMounted 변수를 함수 외부에 저장\\r\\n\\r\\n```js\\r\\nlet hasMemoMounted = false;\\r\\n\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n  const memoizedState = useRef<{ value: T; deps: DependencyList } | null>(null);\\r\\n\\r\\n  if (!hasMemoMounted) {\\r\\n    hasMemoMounted = true;\\r\\n    memoizedState.current = {\\r\\n      value: factory(),\\r\\n      deps: _deps,\\r\\n    };\\r\\n\\r\\n    return memoizedState.current.value as T;\\r\\n  }\\r\\n\\r\\n  const compareFunc = _equals || shallowEquals;\\r\\n\\r\\n  if (!memoizedState.current || !compareFunc(memoizedState.current.deps, _deps)) {\\r\\n    memoizedState.current = {\\r\\n      value: factory(),\\r\\n      deps: _deps,\\r\\n    };\\r\\n  }\\r\\n\\r\\n  return memoizedState.current.value as T;\\r\\n}\\r\\n```\\r\\n\\r\\nhasMemoMounted를 useMemo 함수 외부에 두어, 함수가 재호출되더라도 이전 렌더링 시점을 기억하게 만들면, 매번 재계산되지 않고 의존성 비교를 통해 메모이징된 값을 재사용할 수 있게 됩니다.\\r\\n\\r\\n모든 테스트를 통과하지만 문제가 있습니다...hasMemoMounted를 useMemo 바깥에 두면, 모든 컴포넌트 인스턴스가 이 전역 값을 공유하게 되어 버그가 발생할 수 있습니다.\\r\\n\\r\\n✅ 근본적인 해결: 렌더링 컨텍스트별 상태 저장\\r\\n\\r\\nReact는 각 컴포넌트마다 자체적인 Hook 상태 저장소를 가지고 있고, 각 훅 (useMemo, useState, useRef 등)의 호출 순서를 따라 인덱스를 기반으로 상태를 구분하게 하려면, useRef를 사용할 수 밖에 없을 것으로 결론을 지었습니다.\\r\\n\\r\\n```js\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n  // deps와 value는 1:1 대응\\r\\n  const memoizedState = useRef<{ value: T; deps: DependencyList } | null>(null);\\r\\n\\r\\n  const compareFunc = _equals || shallowEquals;\\r\\n\\r\\n  // 초기 렌더링 시 초기값 설정 or 의존성 배열이 변경되었을 때 새로운 값 계산\\r\\n  if (!memoizedState.current || !compareFunc(memoizedState.current.deps, _deps)) {\\r\\n    memoizedState.current = {\\r\\n      value: factory(),\\r\\n      deps: _deps,\\r\\n    };\\r\\n  }\\r\\n\\r\\n  // 의존성 배열이 변경되지 않았을 때 이전 값 반환\\r\\n  return memoizedState.current.value;\\r\\n}\\r\\n```\\r\\n\\r\\n### 3. useAutoCallback\\r\\n\\r\\n요구사항 \\"useAutoCallback으로 만들어진 함수는, 참조가 변경되지 않으면서 항상 새로운 값을 참조한다.\\"를 분석해보았습니다.\\r\\n\\r\\n❓ \\"참조가\xA0변경되지\xA0않는다\\"란?\\r\\n\\r\\n함수\xA0객체의\xA0참조(주소)가\xA0변하지\xA0않는다는 뜻입니다. 즉, 리렌더링이\xA0여러\xA0번 일어나도, callback === callback이\xA0항상\xA0true입니다.\\r\\n\\r\\n❓ \\"항상\xA0새로운 값을\xA0참조한다\\"란?\\r\\n\\r\\n함수\xA0내부에서\xA0사용하는 값(예: state, props\xA0등)이 항상\xA0최신\xA0값을 참조한다는\xA0뜻입니다. 즉, 함수가 오래전에\xA0만들어졌더라도, 내부에서\xA0사용하는\xA0값은\xA0\\"현재 시점의\xA0최신 값\\"입니다.\\r\\n\\r\\n```js\\r\\nconst [count, setCount] = useState(0);\\r\\nconst callback = useAutoCallback(() => {\\r\\n  console.log(count); // 항상 최신 count 값이 출력됨\\r\\n});\\r\\n```\\r\\n\\r\\n❓ 왜\xA0이런 패턴이\xA0필요할까?\\r\\n\\r\\n- 일반적으로\xA0useCallback은\xA0의존성 배열이\xA0비어 있으면 함수\xA0참조는\xA0변하지 않지만, 내부에서\xA0사용하는 값은\xA0\\"생성\xA0시점의 값\\"에\xA0고정됩니다(클로저\xA0문제).\\r\\n- 콜백 함수가 오래된 상태(state)나 props를 참조하게 되어, 실제로는 최신 값을 사용해야 하는 상황에서 의도치 않은 동작이 발생할 수 있습니다.\\r\\n- setInterval, 이벤트 핸들러, 외부 라이브러리의 콜백 등에서 최신 상태를 항상 참조해야 할 때, useCallback만으로는 이 문제를 해결할 수 없습니다.\\r\\n\\r\\n```js\\r\\n// 의존성 배열이 비어 있으므로, handleAlert는 최초 렌더 시점의 count만 기억함\\r\\nconst handleAlert = useCallback(() => {\\r\\n  alert(`현재 count: ${count}`);\\r\\n}, []);\\r\\n```\\r\\n\\r\\n❌ 1차 시도\\r\\n\\r\\n```js\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  // 항상 같은 함수 참조를 반환\\r\\n  const stableCallback = useRef((...args: any[]) => {\\r\\n    // 여기서 fn(...args)를 하면 클로저가 생성\\r\\n    // 최신 상태, props를 사용하는 fn을 받아도 처음 fn만 사용하게 됨\\r\\n    return fn(...args);\\r\\n  });\\r\\n\\r\\n  return stableCallback.current as T;\\r\\n};\\r\\n```\\r\\n\\r\\n원인\\r\\n\\r\\n- stableCallback은 최신값을 사용하지 못합니다.\\r\\n- fn의 클로저가 생성되므로, 처음\xA0실행될 때의 fn을 클로저로\xA0\\"캡처\\"하게 됩니다. 즉, 컴포넌트가 리렌더링되어 fn이\xA0바뀌어도, 이 함수는 처음 fn만 계속 사용하므로 useAutoCallback을 사용하여 해결하고자 한 문제와 동일하게 동작하고 있습니다.\\r\\n\\r\\n✅ 해결 : 최신 fn을 useRef로 저장\\r\\n\\r\\n```js\\r\\n=export const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  const fnRef = useRef(fn);\\r\\n  fnRef.current = fn; // 최신 fn을 항상 즉시 반영\\r\\n\\r\\n  // 항상 같은 함수 참조를 반환\\r\\n  const stableCallback = useRef((...args: unknown[]) => {\\r\\n    // 여기서 fn(...args)를 하면 클로저가 생성\\r\\n    // 최신 상태, props를 사용하는 fn을 받아도 처음 fn만 사용하게 됨\\r\\n    return fnRef.current(...args);\\r\\n  });\\r\\n\\r\\n  return stableCallback.current as T;\\r\\n};\\r\\n```\\r\\n\\r\\n내부에서 사용하는 fnRef.current는 항상 최신 fn을 가리키므로, 콜백 함수가 항상 최신 상태/props를 사용할 수 있습니다.\\r\\n\\r\\n### 4. useStore\\r\\n\\r\\nuseStore를 구현하면서 제가 생각했던 구현 방향성은 아래와 같습니다.\\r\\n\\r\\n> 상태 비교 로직(shallowEquals)은 useShallowSelector에서만 적용\\r\\n> useStore에서는 단순히 스토어의 상태를 구독하고 사용할 수 있도록 최소한의 역할만 담당\\r\\n\\r\\n🔸 useSyncExternalStore의 동작 원리\\r\\n\\r\\n- getSnapshot의 반환값이 Object.is로 비교되어 값이 다르면 리렌더가 발생\\r\\n- 즉, store의 상태 객체가 내용은 같아도 참조가 다르면(예: {a:1} → {a:1}) 리렌더가 발생\\r\\n- getSnapshot에서 shallowEquals를 사용하지 않으면, store가 notify만 하면 무조건 리렌더가 발생하는 문제가 있음\\r\\n\\r\\n❌ 동일 상태값으로 업데이트해도 리렌더링되는 문제\\r\\n\\r\\n원인\\r\\n\\r\\n- 처음에는 getSnapshot의 반환값을 항상 새로운 객체로 만들어서 반환했했습니다. 이 경우 내용이 같아도 참조가 달라져서 리렌더가 계속 발생하는 문제가 있었습니다.\\r\\n\\r\\n✅ 해결\\r\\n\\r\\n- getSnapshot에서 selector를 적용한 결과가 shallowEquals로 이전 값과 같으면, 이전 참조를 그대로 반환하도록 개선했습니다.\\r\\n- store의 상태가 바뀌더라도 selector 결과가 같으면 리렌더가 발생하지 않습니다.\\r\\n\\r\\n```js\\r\\nfunction getSelectedSnapshot() {\\r\\n    return shallowSelector(store.getState());\\r\\n  }\\r\\n```\\r\\n\\r\\n> 트러블 슈팅\\r\\n\\r\\n### 1. 장바구니 추가 시 ProductCard가 모두 재렌더링\\r\\n\\r\\n❌\xA0같은 memo 컴포넌트에서 다른 prevProps, props가 찍힘\\r\\n\\r\\n```js\\r\\nimport { type FunctionComponent } from \\"react\\";\\r\\nimport { shallowEquals } from \\"../equals\\";\\r\\n\\r\\nexport function memo<P extends object>(Component: FunctionComponent<P>, equals = shallowEquals) {\\r\\n  let prevProps: P | null = null;\\r\\n  let prevRendered: ReturnType<typeof Component> | null = null;\\r\\n\\r\\n  return function (props: P) {\\r\\n    console.log(\\"memo\\");\\r\\n    console.log(\\"prevProps: \\", prevProps);\\r\\n    console.log(\\"props: \\", props);\\r\\n    console.log(\\"\\");\\r\\n\\r\\n    // 첫 렌더링 시\\r\\n    if (prevProps === null) {\\r\\n      prevProps = props;\\r\\n      prevRendered = Component(props);\\r\\n      return prevRendered;\\r\\n    }\\r\\n\\r\\n    if (equals(prevProps, props)) {\\r\\n      return prevRendered;\\r\\n    }\\r\\n\\r\\n    prevProps = props;\\r\\n    prevRendered = Component(props);\\r\\n    return prevRendered;\\r\\n  };\\r\\n}\\r\\n```\\r\\n\\r\\n위 구조에서 prevProps, props를 관리자 도구에서 찍어보면 아래처럼 각 ProductCard 컴포넌트가 렌더링될 때마다 prevProps와 props가 서로 다른 객체로 출력되는 현상을 확인했습니다.\\r\\n\\r\\n```js\\r\\nProductCard: 85067212996\\r\\nmemo.ts:9 memo\\r\\nmemo.ts:10 prevProps:  {title: \'PVC 투명 젤리 쇼핑백 1호 와인 답례품 구디백 비닐 손잡이 미니 간식 선물포장\', link: \'https://smartstore.naver.com/main/products/7522712674\', image: \'https://shopping-phinf.pstatic.net/main_8506721/85067212996.1.jpg\', lprice: \'220\', hprice: \'\',\xA0…}\\r\\nmemo.ts:11 props:  {title: \'샷시 풍지판 창문 바람막이 베란다 문 틈막이 창틀 벌레 차단 샤시 방충망 틈새막이\', link: \'https://smartstore.naver.com/main/products/9396357056\', image: \'https://shopping-phinf.pstatic.net/main_8694085/86940857379.1.jpg\', lprice: \'230\', hprice: \'\',\xA0…}\\r\\n```\\r\\n\\r\\n\xA0❌ 원인\\r\\n\\r\\n- memo.ts의\xA0커스텀\xA0memo 함수에서\xA0prevProps와\xA0prevRendered를\xA0컴포넌트 함수의\xA0클로저\xA0변수로 선언했습니다.\\r\\n- 모든\xA0ProductCard\xA0인스턴스가 같은\xA0memo 함수의\xA0클로저를\xA0공유하게 됩니다.\\r\\n- 즉, 여러 ProductCard가 각각의 상태를 가지지 못하고, 마지막으로 렌더링된 컴포넌트의 props만 기억하게 되어, memoization이 제대로 동작하지 않습니다.\\r\\n\\r\\n\xA0✅ 해결\\r\\n\\r\\n- prevProps와 prevRendered를 클로저가 아닌, 각 컴포넌트 인스턴스별로 관리해야 합니다.\\r\\n- 함수형 컴포넌트에서 값을 인스턴스별로 유지하려면 React의 useRef나 useState를 사용해야 합니다.\\r\\n- memo 함수 내부가 아닌 memo 함수가 반환하는 함수형 컴포넌트 코드 내부에 prevProps, prevRendered 값을 저장하여 각 컴포넌트 인스턴스 별로 해당 값을 저장하고 관리할 수 있도롣 수정했습니다. \\r\\n\\r\\n```js\\r\\nexport function memo<P extends object>(Component: FunctionComponent<P>, equals = shallowEquals) {\\r\\n  return function (props: P) {\\r\\n    const prevProps = useRef<P | null>(null);\\r\\n    const prevRendered = useRef<ReturnType<typeof Component> | null>(null);\\r\\n\\r\\n    // props가 같으면 이전 결과 반환\\r\\n    if (prevProps.current !== null && equals(prevProps.current, props)) {\\r\\n      return prevRendered.current;\\r\\n    }\\r\\n\\r\\n    // props가 다르면 새로 렌더링 결과 저장\\r\\n    prevProps.current = props;\\r\\n    prevRendered.current = createElement(Component, props);\\r\\n\\r\\n    return prevRendered.current;\\r\\n  };\\r\\n}\\r\\n```\\r\\n\\r\\n### 2. 장바구니를 추가하거나 삭제했을 때, 토스트 호출로 인하여 리렌더링\\r\\n\\r\\nToastProvider 최적화 후에도 계속 ProductCard가 재렌더링되는 문제가 있었습니다. ToastProvider에 사용된 useMemo 콜백에 콘솔로그 찍어봤는데 장바구니 담기 버튼 클릭할 때마다 콘솔 찍히는 거 확인하고, useMemo가 제대로 동작하고 있지 않은 것을 발견했습니다.\\r\\n\\r\\n❌\xA0useMemo 이전 구현 방식\\r\\n\\r\\n```js\\r\\nconst memoizedState: { value: unknown; deps: DependencyList | null } = {\\r\\n  value: null,\\r\\n  deps: null,\\r\\n};\\r\\n\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n  const compareFunc = _equals || shallowEquals;\\r\\n\\r\\n  if ((!memoizedState.value && !memoizedState.deps) || !compareFunc(memoizedState.deps, _deps)) {\\r\\n    memoizedState.value = factory();\\r\\n    memoizedState.deps = _deps;\\r\\n  }\\r\\n\\r\\n  return memoizedState.value as T;\\r\\n}\\r\\n```\\r\\n\\r\\n원인\\r\\n\\r\\n- memoizedState가 함수 바깥에 선언되어 모든 ProductCard 인스턴스가 memoizedState를 공유하여 메모이제이션이 제대로 동작하지 않고 있었습니다.\\r\\n\\r\\n해결\\r\\n\\r\\n- memoizedState를 함수 내 useRef로 저장하고 사용하도록 수정했습니다.\\r\\n\\r\\n```js\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n  // deps와 value는 1:1 대응\\r\\n  const memoizedState = useRef<{ value: T; deps: DependencyList } | null>(null);\\r\\n\\r\\n  const compareFunc = _equals || shallowEquals;\\r\\n\\r\\n  // 초기 렌더링 시 초기값 설정 or 의존성 배열이 변경되었을 때 새로운 값 계산\\r\\n  if (!memoizedState.current || !compareFunc(memoizedState.current.deps, _deps)) {\\r\\n    memoizedState.current = {\\r\\n      value: factory(),\\r\\n      deps: _deps,\\r\\n    };\\r\\n  }\\r\\n\\r\\n  // 의존성 배열이 변경되지 않았을 때 이전 값 반환\\r\\n  return memoizedState.current.value;\\r\\n}\\r\\n```\\r\\n\\r\\n❓ 잘못 구현했음에도 테스트 통과한 이유\\r\\n\\r\\n- 테스트는 보통 하나의 인스턴스에서만 동작을 확인하기 때문에, 여러 컴포넌트에서 동시에 useMemo를 사용할 때 발생하는 문제는 테스트에서 검증할 수 없습니다.\\r\\n- 실제 앱에서는 여러 컴포넌트가 useMemo를 동시에 사용할 수 있으므로, 이때 값이 꼬이는 문제가 발생했습니다.\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n- React 훅의 내부 동작 원리: 훅이 어떻게 상태를 저장하고, 왜 호출 순서가 중요한지, 그리고 인스턴스별로 상태가 분리되어야 하는 이유를 깊이 이해할 수 있었습니다.\\r\\n- 상태 관리와 최적화: useSyncExternalStore, selector, shallowEquals 등 실제 라이브러리에서 사용하는 패턴을 직접 구현해보며, 상태 관리와 리렌더링 최적화의 핵심 원리를 배웠습니다.\\r\\n- 실무 적용 가능성: 커스텀 훅, HOC, 상태 관리 로직을 직접 구현해본 경험은 앞으로 실무에서 라이브러리 없이도 필요한 기능을 직접 만들거나, 라이브러리의 동작을 더 잘 이해하는 데 큰 도움이 될 것 같습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n리액트의 렌더링 과정\\r\\n\\r\\n1. 상태나 props 변경\\r\\n2. 변경된 컴포넌트 함수 재실행 (→ JSX 반환)\\r\\n3. Virtual DOM 생성\\r\\n4. 이전 Virtual DOM과 비교(diffing)\\r\\n5. 실제 DOM과 최소한의 차이만 업데이트 (Reconciliation)\\r\\n\\r\\n렌더링 최적화 방법\\r\\n- memo를 사용해 props가 같다면 컴포넌트 재실행을 막을 수 있다.\\r\\n- useMemo로 연산 결과를 캐시해 불필요한 계산을 방지할 수 있다.\\r\\n- useCallback으로 함수를 메모이제이션해 자식 컴포넌트 리렌더링을 줄일 수 있다.\\r\\n- 리스트를 렌더링할 때는 key를 고유하게 지정하여 효율적인 DOM 업데이트가 가능하게 해야 한다.\\r\\n- React.lazy와 Suspense를 통해 컴포넌트를 지연 로딩할 수 있다.\\r\\n- useTransition을 통해 UI를 우선순위에 따라 나눠서 업데이트할 수 있다.\\r\\n- 외부 스토어와 동기화할 때는 useSyncExternalStore로 안정적인 구독과 렌더링 최적화가 가능하다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n메모이제이션은 \\"비싼 연산의 결과를 저장해두고, 동일한 입력이 들어오면 저장된 값을 재사용하는 최적화 기법\\"입니다.\\r\\n\\r\\n언제 필요할까?\\r\\n\\r\\n- 연산 비용이 큰 함수(예: 복잡한 계산, 대용량 데이터 가공 등)\\r\\n- React에서 컴포넌트가 자주 리렌더링되지만, props나 state가 바뀌지 않은 경우\\r\\n- selector, 콜백, 렌더링 결과 등 재사용 가능한 값이 있을 때\\r\\n\\r\\n사용하지 않으면?\\r\\n\\r\\n- 동일한 연산이 불필요하게 반복되어 성능 저하\\r\\n- React에서는 불필요한 리렌더링이 발생해 UI가 느려질 수 있음\\r\\n\\r\\n장점\\r\\n\\r\\n- 성능 최적화(불필요한 연산/렌더링 방지)\\r\\n- React에서는 useMemo, useCallback, React.memo 등으로 쉽게 적용 가능\\r\\n\\r\\n단점\\r\\n\\r\\n- 메모리 사용량 증가(캐시 공간 필요)\\r\\n- 의존성 관리가 잘못되면 오히려 버그나 불필요한 캐싱이 발생할 수 있음\\r\\n\\r\\n❌ useCallback 남용 예시\\r\\n\\r\\n```js\\r\\nfunction Parent() {\\r\\n  const [count, setCount] = useState(0);\\r\\n\\r\\n  const handleClick = useCallback(() => {\\r\\n    console.log(\\"clicked\\");\\r\\n  }, []); // ✅ 참조는 안정적이지만...\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <button onClick={() => setCount(count + 1)}>increase</button>\\r\\n      <Child onClick={handleClick} />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst Child = React.memo(({ onClick }: { onClick: () => void }) => {\\r\\n  console.log(\\"Child rendered\\");\\r\\n  return <button onClick={onClick}>click me</button>;\\r\\n});\\r\\n```\\r\\n\\r\\n- handleClick은 useCallback 덕분에 참조가 고정됨 → Child는 리렌더링 안 됨\\r\\n- 그런데… Child는 원래 handleClick이 변경되지 않아도 재렌더 안 될 상황\\r\\n- 즉, useCallback을 써도 체감 성능 차이 없음 + 메모리 사용 늘어남\\r\\n\\r\\n-> 로직이 단순한 함수에 useCallback 쓰는 건 과도한 최적화, 특히 자식 컴포넌트가 memo되지 않은 경우엔 의미 없음\\r\\n\\r\\n\\r\\n결론\\r\\n\\r\\n- 메모이제이션은 \\"필요할 때만, 신중하게\\" 사용하는 것이 중요하며, React에서는 props/state의 변화와 연산 비용을 잘 고려해 적용해야 한다고 생각합니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n컨텍스트와 상태관리가 필요한 이유\\r\\n\\r\\n- 여러 컴포넌트에서 동일한 데이터(상태)를 공유해야 할 때, props drilling 없이 효율적으로 상태를 전달/관리할 수 있습니다.\\r\\n\\r\\n사용하지 않으면?\\r\\n\\r\\n- props를 여러 단계로 전달해야 하거나, 상태 동기화가 어려워져 코드가 복잡해집니다.\\r\\n\\r\\n장점\\r\\n\\r\\n- 전역적으로 상태를 공유할 수 있어, 코드의 가독성과 유지보수성이 높아집니다.\\r\\n- Context API, Redux, Zustand 등 다양한 상태 관리 도구를 활용할 수 있습니다.\\r\\n\\r\\n단점\\r\\n\\r\\n- 상태 관리가 복잡해질수록 코드가 무거워질 수 있고, 불필요한 리렌더링이 발생할 수 있습니다.\\r\\n- Context는 값이 바뀌면 하위 트리 전체가 리렌더링될 수 있으므로, 최적화가 필요합니다.\\r\\n\\r\\n대안/주의점\\r\\n\\r\\n- 꼭 필요한 데이터만 Context/전역 상태로 관리하고, 나머지는 지역 상태(useState 등)로 관리하는 것이 좋습니다.\\r\\n- 불필요한 리렌더링을 막기 위해 selector, memoization, 분리된 context 등 다양한 최적화 기법을 적용해야 합니다.\\r\\n\\r\\n결론\\r\\n\\r\\n- 컨텍스트와 상태관리는 대규모 애플리케이션에서 필수적인 도구이지만, \\"적재적소에, 필요한 만큼만\\" 사용하는 것이 가장 중요하다고 생각합니다.\\r\\n- 상태의 범위와 변경 빈도, 성능 이슈 등을 고려해 적절한 도구와 패턴을 선택하는 것이 실무에서의 핵심이라고 느꼈습니다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요.\\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n\\r\\n- useRef를 useState 없이 구현할 방법이 없을까요?\\r\\n- useMemo를 useRef 사용없이 구현할 방법이 없을까요?\\r\\n","created_at":"2025-07-23T12:27:46Z","updated_at":"2025-07-26T05:57:19Z","closed_at":null,"merged_at":null,"merge_commit_sha":"05c514110f686b3695ec58be76a3a37ec68c547b","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/49/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/49/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/49/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/b6ca8d97de182c3faac7ab234d3e2c377fa4b65b","head":{"label":"angielxx:main","ref":"main","sha":"b6ca8d97de182c3faac7ab234d3e2c377fa4b65b","user":{"login":"angielxx","id":103434451,"node_id":"U_kgDOBipI0w","avatar_url":"https://avatars.githubusercontent.com/u/103434451?v=4","gravatar_id":"","url":"https://api.github.com/users/angielxx","html_url":"https://github.com/angielxx","followers_url":"https://api.github.com/users/angielxx/followers","following_url":"https://api.github.com/users/angielxx/following{/other_user}","gists_url":"https://api.github.com/users/angielxx/gists{/gist_id}","starred_url":"https://api.github.com/users/angielxx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/angielxx/subscriptions","organizations_url":"https://api.github.com/users/angielxx/orgs","repos_url":"https://api.github.com/users/angielxx/repos","events_url":"https://api.github.com/users/angielxx/events{/privacy}","received_events_url":"https://api.github.com/users/angielxx/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1024898497,"node_id":"R_kgDOPRa1wQ","name":"front_6th_chapter1-3","full_name":"angielxx/front_6th_chapter1-3","private":false,"owner":{"login":"angielxx","id":103434451,"node_id":"U_kgDOBipI0w","avatar_url":"https://avatars.githubusercontent.com/u/103434451?v=4","gravatar_id":"","url":"https://api.github.com/users/angielxx","html_url":"https://github.com/angielxx","followers_url":"https://api.github.com/users/angielxx/followers","following_url":"https://api.github.com/users/angielxx/following{/other_user}","gists_url":"https://api.github.com/users/angielxx/gists{/gist_id}","starred_url":"https://api.github.com/users/angielxx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/angielxx/subscriptions","organizations_url":"https://api.github.com/users/angielxx/orgs","repos_url":"https://api.github.com/users/angielxx/repos","events_url":"https://api.github.com/users/angielxx/events{/privacy}","received_events_url":"https://api.github.com/users/angielxx/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/angielxx/front_6th_chapter1-3","description":"항해플러스 프론트엔드 6기 3주차 과제","fork":true,"url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/angielxx/front_6th_chapter1-3/deployments","created_at":"2025-07-23T12:15:07Z","updated_at":"2025-07-23T15:20:36Z","pushed_at":"2025-07-23T15:20:32Z","git_url":"git://github.com/angielxx/front_6th_chapter1-3.git","ssh_url":"git@github.com:angielxx/front_6th_chapter1-3.git","clone_url":"https://github.com/angielxx/front_6th_chapter1-3.git","svn_url":"https://github.com/angielxx/front_6th_chapter1-3","homepage":"https://angielxx.github.io/front_6th_chapter1-3/","size":308,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/49"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/49"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/49"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/49/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/49/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/49/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/b6ca8d97de182c3faac7ab234d3e2c377fa4b65b"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/50","id":2689536005,"node_id":"PR_kwDOPMCTuc6gTxAF","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/50","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/50.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/50.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/50","number":50,"state":"open","locked":false,"title":"[4팀 김수민] Chapter 1-3. React, Beyond the Basics","user":{"login":"nimusmix","id":109320569,"node_id":"U_kgDOBoQZeQ","avatar_url":"https://avatars.githubusercontent.com/u/109320569?v=4","gravatar_id":"","url":"https://api.github.com/users/nimusmix","html_url":"https://github.com/nimusmix","followers_url":"https://api.github.com/users/nimusmix/followers","following_url":"https://api.github.com/users/nimusmix/following{/other_user}","gists_url":"https://api.github.com/users/nimusmix/gists{/gist_id}","starred_url":"https://api.github.com/users/nimusmix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nimusmix/subscriptions","organizations_url":"https://api.github.com/users/nimusmix/orgs","repos_url":"https://api.github.com/users/nimusmix/repos","events_url":"https://api.github.com/users/nimusmix/events{/privacy}","received_events_url":"https://api.github.com/users/nimusmix/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://nimusmix.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n드디어 1챕터가 끝이 나는군요!\\r\\n리액트를 나름대로 잘 쓴다고 생각했던 저는 진짜로 잘 \'쓰고\' 있기만 했더라고요?\\r\\n~~액트 너 없인 아무 것도 못해~~\\r\\njavascript로 하나씩 구현하면서 리액트가 무얼 해결하려고 했는지, 각 함수가 어떤 의미를 지니는지\\r\\n고민하고 해답을 찾아가는 과정이 기억에 많이 남아요.\\r\\n\\r\\n기술적인 성장도 물론 있었지만요,\\r\\n저에겐 공부는 이렇게 하는 거다 라는 방법론을 배운 것이 더욱 의미가 깊다고 느껴집니다!\\r\\n\\r\\n### 기술적 성장\\r\\n**1. 값은 useMemo, 함수는 useCallback 아니었나?**\\r\\n```javascript\\r\\nexport const ToastProvider = memo(({ children }: PropsWithChildren) => {\\r\\n  ...\\r\\n  const hideAfter = debounce(hide, DEFAULT_DELAY);\\r\\n  ...\\r\\n});\\r\\n```\\r\\n토스트 렌더링 최적화 과정 중, `hideAfter`를 메모이제이션해야 하는 상황이 있었습니다.\\r\\n함수니까 당연히 useCallback으로 감쌌는데, 이게 웬걸 자꾸만 틀렸다지 뭐예요?\\r\\n검색해보니까 useMemo가 맞다는데 도무지 이해가 안 갔죠..\\r\\n분명히 함수는 useCallback이고 값이 useMemo인데?\\r\\n네 아니었습니다\\r\\n\\r\\n<br/>\\r\\n\\r\\n**📍 useCallback(fn, deps)**\\r\\n- 함수 자체를 메모이제이션\\r\\n- 즉 위의 경우, `() => debounce(hide, DEFAULT_DELAY)` 형식이었다면 useCallback이 맞음\\r\\n\\r\\n**📍 useMemo(factory, deps)**\\r\\n- 어떤 값을 계산한 결과를 메모이징\\r\\n- `debounce(hide, DEFAULT_DELAY)`를 계산한 결과가 함수이므로, useMemo를 사용함\\r\\n\\r\\n<br/>\\r\\n\\r\\n**2. useState에 초기값을 직접 넘겼을 때와 함수로 넘겼을 때 동작이 다른 이유**\\r\\n```javascript\\r\\nexport function useRef<T>(initialValue: T): { current: T } {\\r\\n  const [ref] = useState({ current: initialValue });\\r\\n  return ref;\\r\\n}\\r\\n```\\r\\n\\r\\nuseRef에서 내부적으로 상태를 저장하기 위해 useState를 사용했어요.\\r\\ninitialValue로 위 코드처럼 객체를 바로 넣었더니\\r\\n`리렌더링이 되어도 useRef의 참조값이 유지된다.`라는 테스트 코드가 자꾸 실패하는 문제가 있었어요.\\r\\n어 그럴 수 있겠다 생각했는데, 검색해보니 초기값으로 함수를 넘기면 된다고 하더라구요?\\r\\n이해가 안 갔죠.. 왜 다른 건대 ???????\\r\\n~~액트는 계획이 다 있구나~~\\r\\n\\r\\n```javascript\\r\\n// packages/react-reconciler/src/ReactFiberHooks.js\\r\\n\\r\\nfunction mountState(initialState) {\\r\\n  const hook = mountWorkInProgressHook();\\r\\n\\r\\n  let memoizedState;\\r\\n  if (typeof initialState === \'function\') {\\r\\n    memoizedState = initialState(); // lazy init\\r\\n  } else {\\r\\n    memoizedState = initialState;\\r\\n  }\\r\\n...\\r\\n}\\r\\n```\\r\\n\\r\\n리액트에서는 마운트 시점에 `mountState`가 호출이 됩니다.\\r\\n이 때 initialState가 함수면 실행하고, 값이면 그대로 저장됩니다.\\r\\n근데 저걸 보고 또 `lazt init`이라고 하지 뭐예요?\\r\\n아니~ 마운트 시점에 실행하는데 뭐가 lazy냐! 라는 생각이 들었죠\\r\\n\\r\\n<br/>\\r\\n\\r\\n**📍 Lazy Initialization**\\r\\n- 리액트가 실행 시점을 제어할 수 있도록 초기값을 함수로 미뤄두는 게 lazy init의 핵심\\r\\n- `useState(fn())` 식으로 값을 전달하면 리액트가 실행 시점을 제어할 수 없기 때문에,\\r\\n- `useState(() => fn())` 이렇게 넘기는 것이다!\\r\\n\\r\\n<br/>\\r\\n\\r\\n즉, 값으로 넘긴다고 매 렌더마다 평가되고, 함수로 넘기면 초기에만 평가되고 이런 게 아니라\\r\\n`{ current: initialValue }` 이 객체가 렌더링마다 새로 생성되어서 그랬던 거였습니다!\\r\\n\\r\\n<br/>\\r\\n\\r\\n**3. useShallowState, useAutoCallback 등 새로운 hook 이해**\\r\\n**📍 useShallowState**\\r\\n- 얕은 비교를 활용해서 상태 변경 시 불필요한 리렌더링을 방지하는 구조\\r\\n- 일반 useState와 달리 객체나 배열 상태에서 참조 변경만으로 발생하는 리렌더링을 막을 수 있음\\r\\n\\r\\n**📍 useAutoCallback**\\r\\n- 의존성 배열 없이도 항상 최신 스코프를 캡처한 콜백을 제공\\r\\n- useCallback(fn, dep)에서 dep 누락으로 생기는 문제를 줄일 수 있음\\r\\n\\r\\n<br/>\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n비교 조건을 `shouldUpdate`, `shouldRecompute` 같은 변수로 추상화해서,\\r\\n조건의 목적이 드러나도록 선언형 스타일로 구현했습니다.\\r\\n\\r\\n```javascript\\r\\nexport const useShallowSelector = <T, S = T>(selector: Selector<T, S>) => {\\r\\n  ...\\r\\n  return (state: T): S => {\\r\\n    const selected = selector(state);\\r\\n    const shouldUpdate = !shallowEquals(prevRef.current, selected);\\r\\n\\r\\n    if (shouldUpdate) {\\r\\n      prevRef.current = selected;\\r\\n    }\\r\\n    return prevRef.current as S;\\r\\n  };\\r\\n};\\r\\n```\\r\\n```javascript\\r\\nexport function useMemo<T>(factory: () => T, _deps: DependencyList, _equals = shallowEquals): T {\\r\\n    ...\\r\\n  const shouldRecompute = !ref.current.deps || !_equals(ref.current.deps, _deps);\\r\\n  if (shouldRecompute) {\\r\\n    ...\\r\\n}\\r\\n```\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n비교 함수에서 두 값이 정확히 같은지 확인할 때, `Object.is`를 많이들 사용하시던데\\r\\n저는 냅다 `a === b`로 해도 잘 돌아가길래 이렇게 했습니다.. 코쓱\\r\\n\\r\\n```javascript\\r\\nexport const shallowEquals = (a: unknown, b: unknown) => {\\r\\n  if (a === b) return true;\\r\\n...\\r\\n};\\r\\n```\\r\\n\\r\\n다들 왜들 그렇게 `Object.is`를 쓰는가! 해서 좀 공부를 해봤는데요~\\r\\n`-0`, `+0`, `NaN` 정도에서 차이가 나는 것 같아요\\r\\n근데 저는 -0과 +0은 같은 값이라고 생각합니다! (당당)\\r\\n왜 다른 값이어야 하는지 모르겠고..\\r\\nNaN은 달라야 할 수도 있을 것 같은데 정확한 예시를 잘 모르겠어서\\r\\n좀 더 공부해서 이해해보고 싶어요!ㅎㅎ\\r\\n\\r\\n### 학습 효과 분석\\r\\n**- 가장 큰 배움이 있었던 부분**\\r\\n`useSyncExternalStore`를 이해하는 과정이 가장 큰 배움이 있었던 부분인 것 같아요.\\r\\n공부하면서 `Tearing`과 `Concurrent Feature`에 대해 알게 되었는데요!\\r\\nSuspense와 StartTransition을 잘 쓰고 있으면서도\\r\\n그게 동시성을 위한 거다! 라고 생각한 적이 없어서 머릿속에서 퍼즐 맞추듯이 정리가 되는 것 같았습니다.\\r\\n\\r\\n또한 useShallowSelector의 역할에 대해서도 알게 되었습니다.\\r\\n불필요한 렌더링을 막을 수 있는 귀한 역할을 하고 있는 친구예요.\\r\\n\\r\\n```javascript\\r\\nconst snapshot = useSyncExternalStore(store.subscribe, store.getState)\\r\\n```\\r\\n\\r\\n위 코드에서 snapshot은 항상 전체 상태 객체를 반환하기 때문에,\\r\\n상태의 일부만 변경되어도 이전 값과는 다른 객체가 되는 바, 불필요한 렌더링이 잦아지죠.\\r\\n그걸 해결하기 위해 얕은 비교로 진짜 변경된 부분만 쏙쏙 골라낼 수 있는 selector가 바로바로 useShallowSelector!\\r\\n\\r\\n```javascript\\r\\nconst snapshot = useSyncExternalStore(store.subscribe, () => shallowSelector(store.getState()));\\r\\n```\\r\\n\\r\\n**- 추가 학습이 필요한 영역**\\r\\njotai가 리액트 렌더 트리와 연동하는 방식!\\r\\n멘토링 때 추가로 공부해서 블로그 포스팅을 해서 꼭 피알에 넣어야지 다짐했건만..\\r\\n인생이 제 맘처럼 되지 않네요..\\r\\n이번 주 안으로 꼭 시간 내서 블로그를 써보고 싶어요\\r\\n진짜 궁금혀요 ,,\\r\\n\\r\\n\\r\\n### 과제 피드백\\r\\n과제의 요구사항이 명확해서 구현하기 편했습니다!\\r\\n이번 주차 과제를 하면서 차근차근 공부하는 것의 힘을 느끼고 있어요.\\r\\n3주차가 만족도 최강!\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n**- 리액트의 렌더링 과정**\\r\\n**1️⃣ createVNode**\\r\\n: JSX가 호출될 때 가상 DOM 노드를 만듭니다. 자식들을 평탄화하고 null | undefined | false를 필터링합니다.\\r\\n\\r\\n**2️⃣ normalizeVNode**\\r\\n: 재귀적으로 자식들을 정리하고, 컴포넌트 타입에 따라 각기 다른 처리를 하여 정규화합니다.\\r\\n\\r\\n**3️⃣ createElement**\\r\\n: 가상 노드를 기반으로 실제 DOM 요소를 생성합니다. props 및 이벤트 등록까지 마칩니다.\\r\\n\\r\\n**4️⃣ renderElement**\\r\\n: 첫 렌더링일 경우 createElement로 DOM을 생성하고, root에 이벤트를 등록합니다.\\r\\n업데이트일 경우, updateElement로 기존 DOM과 비교하여 갱신합니다.\\r\\n\\r\\n**5️⃣ updateElement**\\r\\n: 새로운 VNode와 이전 VNode를 비교합니다. (diff 알고리즘)\\r\\n속성과 자식을 차례로 업데이트합니다. (Reconciliation)\\r\\n\\r\\n**- 리액트의 렌더링 최적화 방법**\\r\\n**1️⃣ memo HOC**\\r\\n: 함수 컴포넌트의 props가 바뀌지 않으면 리렌더링을 하지 않습니다.\\r\\n\\r\\n**2️⃣ useMemo**\\r\\n: 연산 결과를 메모이징하여 리렌더링 시 재계산을 방지합니다.\\r\\n\\r\\n**3️⃣ useCallback**\\r\\n: 함수 재생성을 막아 불필요한 props의 변경으로 리렌더링이 되는 것을 막습니다.\\r\\n\\r\\n**- 리액트의 렌더링과 관련된 라이프사이클 메서드**\\r\\n검색하면 나오기는 하지만 함수형 컴포넌트를 주로 써서 써본 적이 없고 잘 모릅니다..!\\r\\nuseEffect, useLayoutEffect 등으로 라이프사이클에 따른 함수 실행을 처리했습니다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n**- 메모이제이션이 언제 필요할까?**\\r\\n복잡한 연산을 수행할 때, 불필요한 렌더링을 줄이고 싶을 때, 남의 의존성 배열에 내가 들어갔을 때 (ㅋㅋ)\\r\\n\\r\\n**- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?**\\r\\n**1️⃣ 복잡한 연산을 수행할 때**\\r\\n: 시간이 오래 걸리는 연산을 불필요하게 여러 번 실행하게 되어 성능이 저하될 것입니다.\\r\\n\\r\\n**2️⃣ 불필요한 렌더링을 줄이고 싶을 때**\\r\\n: 불필요한 렌더링이 발생할 것입니다 (?)\\r\\n\\r\\n**3️⃣ 남의 의존성 배열에 내가 들어갔을 때**\\r\\n: lint err.. 뿐만 아니라 불필요한 렌더링의 나비효과 연쇄효과 체험이 가능할 것 같아요\\r\\n예상하지 못한 side effect도 발생할 것 같습니다.\\r\\n\\r\\n**- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?**\\r\\n**✅ 장점**\\r\\n: 렌더링을 최소화하여 성능을 최적화할 수 있습니다.\\r\\n\\r\\n**⚠️ 단점**\\r\\n: 남용하면 오히려 메모리 사용량을 증가시켜 성능 저하의 우려가 있습니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n**- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?**\\r\\n: 각기 다른 위치에 있는 컴포넌트들이 같은 상태를 사용해야 하는 경우가 종종 발생합니다.\\r\\n어느 한 쪽에서 해당 데이터를 관리하는 것도 이상하고, 그렇다고 양쪽에서 데이터를 모두 관리할 수도 없는 노릇이죠.\\r\\n그래서 전역으로 관리해서 데이터가 안전하게 조작될 수 있도록 하는 것이 좋습니다!\\r\\n\\r\\n**- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?**\\r\\n: props drilling이 발생하여 코드가 복잡해지고 유지보수가 어려워집니다.\\r\\n같은 데이터를 여러 군데에서 변경할 가능성이 있어 예상치 못한 버그가 발생할 수 있습니다.\\r\\n어디서 수정하고 또 어디서 수정하다 보면 추적이 어려워져 디버깅이 골치아플 수 있지요.\\r\\n\\r\\n**- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?**\\r\\n**✅ 장점**\\r\\n: 컴포넌트가 어디에 위치해 있든 전역 상태를 쉽게 참조할 수 있습니다.\\r\\n여러 컴포넌트에서 하나의 상태를 바라볼 수 있습니다.\\r\\n\\r\\n**⚠️ 단점**\\r\\n: Context의 경우 value가 변경되면 하위 컴포넌트 전체가 리렌더링되기 때문에 주의해야 합니다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n코드 리뷰는 아니지만..! 저의 이력서에 HOC를 만들어서 문제를 해결했다 라는 내용이 있는데,\\r\\n면접에 갈 때마다 HOC 왜 썼냐고 물어보고,\\r\\n어떤 회사는 좀 지나간(?) 방식이고 다른 방법도 있었을텐데 왜 그걸 선택했냐고 물어보더라구요\\r\\n솔직히 사수가 HOC로 해결해보는 게 어떻겠냐고 해서 그냥 쓴 거라서.. 할 말이 없었습니다ㅠㅠ\\r\\n이후 학습을 통해 HOC의 장점에 대해 말을 할 수는 있는 상태에 이르렀으나,\\r\\nhook에 비해 어떤 부분이 좋다 이런 건 아직 잘 모르겠어요ㅎㅎ\\r\\n코치님이 생각하는 HOC의 장점은 무엇인가요!","created_at":"2025-07-23T17:11:29Z","updated_at":"2025-07-29T02:32:47Z","closed_at":null,"merged_at":null,"merge_commit_sha":"ad75c579b2fc477123e4400beaab30717e7ad22e","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/50/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/50/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/50/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/947221d710bee4f721085c8de304af9e6ad132df","head":{"label":"nimusmix:main","ref":"main","sha":"947221d710bee4f721085c8de304af9e6ad132df","user":{"login":"nimusmix","id":109320569,"node_id":"U_kgDOBoQZeQ","avatar_url":"https://avatars.githubusercontent.com/u/109320569?v=4","gravatar_id":"","url":"https://api.github.com/users/nimusmix","html_url":"https://github.com/nimusmix","followers_url":"https://api.github.com/users/nimusmix/followers","following_url":"https://api.github.com/users/nimusmix/following{/other_user}","gists_url":"https://api.github.com/users/nimusmix/gists{/gist_id}","starred_url":"https://api.github.com/users/nimusmix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nimusmix/subscriptions","organizations_url":"https://api.github.com/users/nimusmix/orgs","repos_url":"https://api.github.com/users/nimusmix/repos","events_url":"https://api.github.com/users/nimusmix/events{/privacy}","received_events_url":"https://api.github.com/users/nimusmix/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023143630,"node_id":"R_kgDOPPvuzg","name":"front_6th_chapter1-3","full_name":"nimusmix/front_6th_chapter1-3","private":false,"owner":{"login":"nimusmix","id":109320569,"node_id":"U_kgDOBoQZeQ","avatar_url":"https://avatars.githubusercontent.com/u/109320569?v=4","gravatar_id":"","url":"https://api.github.com/users/nimusmix","html_url":"https://github.com/nimusmix","followers_url":"https://api.github.com/users/nimusmix/followers","following_url":"https://api.github.com/users/nimusmix/following{/other_user}","gists_url":"https://api.github.com/users/nimusmix/gists{/gist_id}","starred_url":"https://api.github.com/users/nimusmix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nimusmix/subscriptions","organizations_url":"https://api.github.com/users/nimusmix/orgs","repos_url":"https://api.github.com/users/nimusmix/repos","events_url":"https://api.github.com/users/nimusmix/events{/privacy}","received_events_url":"https://api.github.com/users/nimusmix/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/nimusmix/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/nimusmix/front_6th_chapter1-3/deployments","created_at":"2025-07-20T16:07:53Z","updated_at":"2025-07-23T17:13:01Z","pushed_at":"2025-07-23T17:12:57Z","git_url":"git://github.com/nimusmix/front_6th_chapter1-3.git","ssh_url":"git@github.com:nimusmix/front_6th_chapter1-3.git","clone_url":"https://github.com/nimusmix/front_6th_chapter1-3.git","svn_url":"https://github.com/nimusmix/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":296,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/50"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/50"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/50"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/50/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/50/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/50/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/947221d710bee4f721085c8de304af9e6ad132df"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/51","id":2690675714,"node_id":"PR_kwDOPMCTuc6gYHQC","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/51","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/51.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/51.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/51","number":51,"state":"open","locked":false,"title":"[9팀 학습메이트]  Chapter 1-3. React, Beyond the Basics","user":{"login":"susmisc14","id":215831300,"node_id":"U_kgDODN1TBA","avatar_url":"https://avatars.githubusercontent.com/u/215831300?v=4","gravatar_id":"","url":"https://api.github.com/users/susmisc14","html_url":"https://github.com/susmisc14","followers_url":"https://api.github.com/users/susmisc14/followers","following_url":"https://api.github.com/users/susmisc14/following{/other_user}","gists_url":"https://api.github.com/users/susmisc14/gists{/gist_id}","starred_url":"https://api.github.com/users/susmisc14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/susmisc14/subscriptions","organizations_url":"https://api.github.com/users/susmisc14/orgs","repos_url":"https://api.github.com/users/susmisc14/repos","events_url":"https://api.github.com/users/susmisc14/events{/privacy}","received_events_url":"https://api.github.com/users/susmisc14/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-24T03:59:29Z","updated_at":"2025-07-25T19:05:34Z","closed_at":null,"merged_at":null,"merge_commit_sha":"a04518b70eff309c2b39c2c7fc439f4046700e96","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/51/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/51/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/51/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/f1283114227124eab2f75b56e4924f62994d3253","head":{"label":"susmisc14:main","ref":"main","sha":"f1283114227124eab2f75b56e4924f62994d3253","user":{"login":"susmisc14","id":215831300,"node_id":"U_kgDODN1TBA","avatar_url":"https://avatars.githubusercontent.com/u/215831300?v=4","gravatar_id":"","url":"https://api.github.com/users/susmisc14","html_url":"https://github.com/susmisc14","followers_url":"https://api.github.com/users/susmisc14/followers","following_url":"https://api.github.com/users/susmisc14/following{/other_user}","gists_url":"https://api.github.com/users/susmisc14/gists{/gist_id}","starred_url":"https://api.github.com/users/susmisc14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/susmisc14/subscriptions","organizations_url":"https://api.github.com/users/susmisc14/orgs","repos_url":"https://api.github.com/users/susmisc14/repos","events_url":"https://api.github.com/users/susmisc14/events{/privacy}","received_events_url":"https://api.github.com/users/susmisc14/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1021195431,"node_id":"R_kgDOPN40pw","name":"front_6th_chapter1-3","full_name":"susmisc14/front_6th_chapter1-3","private":false,"owner":{"login":"susmisc14","id":215831300,"node_id":"U_kgDODN1TBA","avatar_url":"https://avatars.githubusercontent.com/u/215831300?v=4","gravatar_id":"","url":"https://api.github.com/users/susmisc14","html_url":"https://github.com/susmisc14","followers_url":"https://api.github.com/users/susmisc14/followers","following_url":"https://api.github.com/users/susmisc14/following{/other_user}","gists_url":"https://api.github.com/users/susmisc14/gists{/gist_id}","starred_url":"https://api.github.com/users/susmisc14/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/susmisc14/subscriptions","organizations_url":"https://api.github.com/users/susmisc14/orgs","repos_url":"https://api.github.com/users/susmisc14/repos","events_url":"https://api.github.com/users/susmisc14/events{/privacy}","received_events_url":"https://api.github.com/users/susmisc14/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/susmisc14/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/susmisc14/front_6th_chapter1-3/deployments","created_at":"2025-07-17T03:33:06Z","updated_at":"2025-07-24T04:10:15Z","pushed_at":"2025-07-24T04:08:22Z","git_url":"git://github.com/susmisc14/front_6th_chapter1-3.git","ssh_url":"git@github.com:susmisc14/front_6th_chapter1-3.git","clone_url":"https://github.com/susmisc14/front_6th_chapter1-3.git","svn_url":"https://github.com/susmisc14/front_6th_chapter1-3","homepage":"https://susmisc14.github.io/front_6th_chapter1-3/","size":296,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/51"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/51"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/51"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/51/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/51/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/51/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/f1283114227124eab2f75b56e4924f62994d3253"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/52","id":2691778349,"node_id":"PR_kwDOPMCTuc6gcUct","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/52","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/52.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/52.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/52","number":52,"state":"open","locked":false,"title":"[3팀 이정우] Chapter 1-3. React, Beyond the Basics ","user":{"login":"JungWoo0203","id":102477444,"node_id":"U_kgDOBhuuhA","avatar_url":"https://avatars.githubusercontent.com/u/102477444?v=4","gravatar_id":"","url":"https://api.github.com/users/JungWoo0203","html_url":"https://github.com/JungWoo0203","followers_url":"https://api.github.com/users/JungWoo0203/followers","following_url":"https://api.github.com/users/JungWoo0203/following{/other_user}","gists_url":"https://api.github.com/users/JungWoo0203/gists{/gist_id}","starred_url":"https://api.github.com/users/JungWoo0203/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JungWoo0203/subscriptions","organizations_url":"https://api.github.com/users/JungWoo0203/orgs","repos_url":"https://api.github.com/users/JungWoo0203/repos","events_url":"https://api.github.com/users/JungWoo0203/events{/privacy}","received_events_url":"https://api.github.com/users/JungWoo0203/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://jungwoo0203.github.io/front_6th_chapter1-3/\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-24T12:02:29Z","updated_at":"2025-07-26T05:18:11Z","closed_at":null,"merged_at":null,"merge_commit_sha":"2a9d38428c3318131ded40ee3ccb167f3cf6e301","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/52/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/52/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/52/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/ee277cac724c4bbcea00c2da2fdc0207ead68fb8","head":{"label":"JungWoo0203:main","ref":"main","sha":"ee277cac724c4bbcea00c2da2fdc0207ead68fb8","user":{"login":"JungWoo0203","id":102477444,"node_id":"U_kgDOBhuuhA","avatar_url":"https://avatars.githubusercontent.com/u/102477444?v=4","gravatar_id":"","url":"https://api.github.com/users/JungWoo0203","html_url":"https://github.com/JungWoo0203","followers_url":"https://api.github.com/users/JungWoo0203/followers","following_url":"https://api.github.com/users/JungWoo0203/following{/other_user}","gists_url":"https://api.github.com/users/JungWoo0203/gists{/gist_id}","starred_url":"https://api.github.com/users/JungWoo0203/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JungWoo0203/subscriptions","organizations_url":"https://api.github.com/users/JungWoo0203/orgs","repos_url":"https://api.github.com/users/JungWoo0203/repos","events_url":"https://api.github.com/users/JungWoo0203/events{/privacy}","received_events_url":"https://api.github.com/users/JungWoo0203/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1024101743,"node_id":"R_kgDOPQqNbw","name":"front_6th_chapter1-3","full_name":"JungWoo0203/front_6th_chapter1-3","private":false,"owner":{"login":"JungWoo0203","id":102477444,"node_id":"U_kgDOBhuuhA","avatar_url":"https://avatars.githubusercontent.com/u/102477444?v=4","gravatar_id":"","url":"https://api.github.com/users/JungWoo0203","html_url":"https://github.com/JungWoo0203","followers_url":"https://api.github.com/users/JungWoo0203/followers","following_url":"https://api.github.com/users/JungWoo0203/following{/other_user}","gists_url":"https://api.github.com/users/JungWoo0203/gists{/gist_id}","starred_url":"https://api.github.com/users/JungWoo0203/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JungWoo0203/subscriptions","organizations_url":"https://api.github.com/users/JungWoo0203/orgs","repos_url":"https://api.github.com/users/JungWoo0203/repos","events_url":"https://api.github.com/users/JungWoo0203/events{/privacy}","received_events_url":"https://api.github.com/users/JungWoo0203/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/JungWoo0203/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/JungWoo0203/front_6th_chapter1-3/deployments","created_at":"2025-07-22T07:28:35Z","updated_at":"2025-07-24T21:54:13Z","pushed_at":"2025-07-24T21:51:32Z","git_url":"git://github.com/JungWoo0203/front_6th_chapter1-3.git","ssh_url":"git@github.com:JungWoo0203/front_6th_chapter1-3.git","clone_url":"https://github.com/JungWoo0203/front_6th_chapter1-3.git","svn_url":"https://github.com/JungWoo0203/front_6th_chapter1-3","homepage":"https://jungwoo0203.github.io/front_6th_chapter1-3/","size":284,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/52"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/52"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/52"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/52/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/52/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/52/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/ee277cac724c4bbcea00c2da2fdc0207ead68fb8"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/53","id":2691828235,"node_id":"PR_kwDOPMCTuc6gcgoL","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/53","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/53.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/53.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/53","number":53,"state":"open","locked":false,"title":"[2팀 학메 진채영]Chapter 1-3. React, Beyond the Basics","user":{"login":"devchaeyoung","id":124546770,"node_id":"U_kgDOB2xu0g","avatar_url":"https://avatars.githubusercontent.com/u/124546770?v=4","gravatar_id":"","url":"https://api.github.com/users/devchaeyoung","html_url":"https://github.com/devchaeyoung","followers_url":"https://api.github.com/users/devchaeyoung/followers","following_url":"https://api.github.com/users/devchaeyoung/following{/other_user}","gists_url":"https://api.github.com/users/devchaeyoung/gists{/gist_id}","starred_url":"https://api.github.com/users/devchaeyoung/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/devchaeyoung/subscriptions","organizations_url":"https://api.github.com/users/devchaeyoung/orgs","repos_url":"https://api.github.com/users/devchaeyoung/repos","events_url":"https://api.github.com/users/devchaeyoung/events{/privacy}","received_events_url":"https://api.github.com/users/devchaeyoung/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n[https://devchaeyoung.github.io/front_6th_chapter1-3/](https://devchaeyoung.github.io/front_6th_chapter1-3/)\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-24T12:18:20Z","updated_at":"2025-07-26T05:18:42Z","closed_at":null,"merged_at":null,"merge_commit_sha":"8cb7518b92ae82064dac15c3a44a16b285f7c9e1","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/53/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/53/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/53/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/7e81b01a8f700025fcce6776861991edf112ea45","head":{"label":"devchaeyoung:main","ref":"main","sha":"7e81b01a8f700025fcce6776861991edf112ea45","user":{"login":"devchaeyoung","id":124546770,"node_id":"U_kgDOB2xu0g","avatar_url":"https://avatars.githubusercontent.com/u/124546770?v=4","gravatar_id":"","url":"https://api.github.com/users/devchaeyoung","html_url":"https://github.com/devchaeyoung","followers_url":"https://api.github.com/users/devchaeyoung/followers","following_url":"https://api.github.com/users/devchaeyoung/following{/other_user}","gists_url":"https://api.github.com/users/devchaeyoung/gists{/gist_id}","starred_url":"https://api.github.com/users/devchaeyoung/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/devchaeyoung/subscriptions","organizations_url":"https://api.github.com/users/devchaeyoung/orgs","repos_url":"https://api.github.com/users/devchaeyoung/repos","events_url":"https://api.github.com/users/devchaeyoung/events{/privacy}","received_events_url":"https://api.github.com/users/devchaeyoung/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022488453,"node_id":"R_kgDOPPHvhQ","name":"front_6th_chapter1-3","full_name":"devchaeyoung/front_6th_chapter1-3","private":false,"owner":{"login":"devchaeyoung","id":124546770,"node_id":"U_kgDOB2xu0g","avatar_url":"https://avatars.githubusercontent.com/u/124546770?v=4","gravatar_id":"","url":"https://api.github.com/users/devchaeyoung","html_url":"https://github.com/devchaeyoung","followers_url":"https://api.github.com/users/devchaeyoung/followers","following_url":"https://api.github.com/users/devchaeyoung/following{/other_user}","gists_url":"https://api.github.com/users/devchaeyoung/gists{/gist_id}","starred_url":"https://api.github.com/users/devchaeyoung/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/devchaeyoung/subscriptions","organizations_url":"https://api.github.com/users/devchaeyoung/orgs","repos_url":"https://api.github.com/users/devchaeyoung/repos","events_url":"https://api.github.com/users/devchaeyoung/events{/privacy}","received_events_url":"https://api.github.com/users/devchaeyoung/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/devchaeyoung/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/devchaeyoung/front_6th_chapter1-3/deployments","created_at":"2025-07-19T07:16:06Z","updated_at":"2025-07-24T17:55:07Z","pushed_at":"2025-07-24T17:55:03Z","git_url":"git://github.com/devchaeyoung/front_6th_chapter1-3.git","ssh_url":"git@github.com:devchaeyoung/front_6th_chapter1-3.git","clone_url":"https://github.com/devchaeyoung/front_6th_chapter1-3.git","svn_url":"https://github.com/devchaeyoung/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":298,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/53"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/53"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/53"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/53/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/53/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/53/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/7e81b01a8f700025fcce6776861991edf112ea45"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/54","id":2691925799,"node_id":"PR_kwDOPMCTuc6gc4cn","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/54","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/54.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/54.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/54","number":54,"state":"open","locked":false,"title":"[3팀 장루빈] Chapter 1-3. 프레임워크 없이 SPA 만들기","user":{"login":"JangRuBin2","id":124133863,"node_id":"U_kgDOB2Yh5w","avatar_url":"https://avatars.githubusercontent.com/u/124133863?v=4","gravatar_id":"","url":"https://api.github.com/users/JangRuBin2","html_url":"https://github.com/JangRuBin2","followers_url":"https://api.github.com/users/JangRuBin2/followers","following_url":"https://api.github.com/users/JangRuBin2/following{/other_user}","gists_url":"https://api.github.com/users/JangRuBin2/gists{/gist_id}","starred_url":"https://api.github.com/users/JangRuBin2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JangRuBin2/subscriptions","organizations_url":"https://api.github.com/users/JangRuBin2/orgs","repos_url":"https://api.github.com/users/JangRuBin2/repos","events_url":"https://api.github.com/users/JangRuBin2/events{/privacy}","received_events_url":"https://api.github.com/users/JangRuBin2/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://jangrubin2.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n1. ShallowEqual\\r\\n참조 무결성 유지 목적\\r\\nReact의 memo, useMemo, useEffect, useCallback 등에서는 참조 변경 여부로 re-render 판단함\\r\\n얕은 비교로도 대부분의 상태 변경 감지 목적에는 충분\\r\\n\\r\\n2. DeepEquals\\r\\n상태 비교 / 동기화 여부 판단\\r\\n프론트엔드 상태 관리(예: Redux, Zustand)에서 이전 상태와 다음 상태가 완전히 같은지 확인할 때.\\r\\n재귀적으로 호출하여 값을 비교\\r\\n\\r\\n3. useRef\\r\\n```ts\\r\\nimport { useState } from \\"react\\";\\r\\nexport function useRef<T>(initialValue: T): { current: T } {\\r\\n  const [ref] = useState<{ current: T }>({ current: initialValue });\\r\\nor\\r\\n const [ref] = useState(() => ({ current: initialValue }));\\r\\n\\r\\n  return ref;\\r\\n}\\r\\n```\\r\\nuseState의 lazy(지연) or eager(즉시) initialization  + 불변성 유지를 통해 useRef구현\\r\\nuseState(() => init())는 초기 렌더링 시 한 번만 init() 함수를 호출하여 초기값을 설정하고,\\r\\nuseState(init())는 매 렌더링마다 init()이 평가되지만 처음 값만 사용합니다.\\r\\n\\r\\n복잡한 초기화 로직이 있다면 useState(() => init()) 방식이 더 효율적\\r\\n\\r\\n4. useMemo \\r\\n```ts\\r\\nexport function useMemo<T>(factory: () => T, deps: DependencyList, equals = shallowEquals): T {\\r\\n  const ref = useRef<{ deps: DependencyList; value: T } | null>(null);\\r\\n\\r\\n  if (ref.current === null || !equals(ref.current.deps, deps)) {\\r\\n    ref.current = {\\r\\n      deps,\\r\\n      value: factory(),\\r\\n    };\\r\\n  }\\r\\n\\r\\n  return ref.current.value;\\r\\n}\\r\\n```\\r\\ndeps가 변경되지 않으면 factory()를 다시 호출하지 않고, 기존 값을 재사용\\r\\ndependency array (의존성 배열)과 함수를 ref에 캐싱하고 캐시 무효화 조건문을 거쳐\\r\\n기존 값 혹은 새로운 값을 반환하게 했습니다.\\r\\n\\r\\n5. useCallback\\r\\n```ts\\r\\nexport function useCallback<T extends Function>(factory: T, _deps: DependencyList) {\\r\\n  // eslint-disable-next-line react-hooks/exhaustive-deps\\r\\n  return useMemo(() => factory, _deps);\\r\\n}\\r\\n```\\r\\nuseCallback(fn, deps)은 deps가 바뀌지 않는 한 fn의 참조를 유지해야합니다.\\r\\n기존에 만든 useMemo 훅을 이용해 메모이제이션하고 참조값이 바뀔 때만 함수를 다시 선언하게합니다.\\r\\n\\r\\n여기서 _deps에 아래 에러가 생기게 되는데\\r\\n```ts\\r\\nReact Hook useMemo was passed a dependency list that is not an array literal. This means we can\'t statically verify whether you\'ve passed the correct dependencies.eslint[react-hooks/exhaustive-deps](https://github.com/facebook/react/issues/14920)\\r\\nReact Hook useMemo has a missing dependency: \'factory\'. Either include it or remove the dependency array.eslint[react-hooks/exhaustive-deps](https://github.com/facebook/react/issues/14920)\\r\\n```\\r\\n이것은 _deps가 리터럴 값이 아니어서 deps 안에 무엇이 들어있는지 정적으로 분석할 수 없고\\r\\n콜백 안에서 사용하는 factory가 의존성 배열에 없다는 뜻인데 의존성 배열에 factory를 넣으면 의미 없는 캐싱이 되기 때문에 주석을 추가했습니다.\\r\\n\\r\\n6. useShallowState\\r\\n```ts\\r\\nexport const useShallowState = <T>(initialValue: T | (() => T)) => {\\r\\n  const [state, setState] = useState<T>(initialValue);\\r\\n  // setShallowState는 호출마다 새로정의 되기 때문에 메모이제이션\\r\\n  const setShallowState = useCallback((nextState: T) => {\\r\\n    setState((prev) => {\\r\\n      return shallowEquals(prev, nextState) ? prev : nextState;\\r\\n    });\\r\\n  }, []);\\r\\n\\r\\n  return [state, setShallowState] as const;\\r\\n};\\r\\n```\\r\\nreact에서 useState는 새로운 값이 Object.is(prev, next) 비교 결과 다르면 무조건 리렌더링을 발생시킵니다.\\r\\nuseShallowState는 내부적으로 shallowEquals를 사용하여 객체나 배열도 값만 같다면 상태를 변경하지 않고 리렌더링을 막습니다.\\r\\n\\r\\n얕은 비교는 객체 참조까지만 비교하므로 내부 객체가 새로 만들어지면 리렌더링이 발생합니다.\\r\\n\\r\\n7. useDeepMemo\\r\\n```ts\\r\\nexport function useDeepMemo<T>(factory: () => T, deps: DependencyList): T {\\r\\n  return useMemo(factory, deps, deepEquals);\\r\\n}\\r\\n```\\r\\nReact의 기본 useMemo는 deps 배열을 얕은 비교 (shallow equality) 로 비교합니다.\\r\\n깊은 비교(deep equality)를 사용해 값이 같으면 재계산 방지\\r\\n\\r\\n8. useAutoCallback\\r\\n```ts\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  const fnRef = useRef(fn);\\r\\n  // 갱신필요 => stale closure\\r\\n  fnRef.current = fn;\\r\\n  const stableFn = useCallback((...args: Parameters<T>) => {\\r\\n    return fnRef.current(...args);\\r\\n    // 참조유지\\r\\n  }, []);\\r\\n\\r\\n  return stableFn as T;\\r\\n};\\r\\n\\r\\n```\\r\\n참조는 고정되지만 내부 로직은 항상 최신 상태인 콜백 함수\\r\\nfn이 최신값일 수 있으므로 매 렌더마다 갱신함.\\r\\n이렇게 하지 않으면 fnRef.current는 오래된 함수(초기값) 를 참조하게 됨 → stale closure 발생.\\r\\nhttps://javascript.plainenglish.io/stale-closures-in-react-afb0dda37f0b\\r\\n\\r\\n참조는 유지하되 내용은 항상 최신으로 갱신하는 것이 핵심 코드.\\r\\nuseCallback의 deps가 []이므로 stableFn은 렌더링 간 절대로 바뀌지 않음\\r\\n\\r\\n9. memo\\r\\n얕은 비교를 기반으로 리렌더링을 방지하는 고차 컴포넌트(HOC)\\r\\nprevProps와 prevResult를 클로저에 저장하여 비교 및 캐싱 수행\\r\\n```ts\\r\\nexport function memo<P extends object>(Component: FunctionComponent<P>, equals = shallowEquals) {\\r\\n  let prevProps: P | null = null;\\r\\n  let prevResult: ReturnType<FunctionComponent<P>> | null = null;\\r\\n\\r\\n  return function MemoizedComponent(props: P) {\\r\\n    if (prevProps === null || !equals(prevProps, props)) {\\r\\n      prevResult = Component(props);\\r\\n      prevProps = props;\\r\\n    }\\r\\n\\r\\n    return prevResult;\\r\\n  };\\r\\n}\\r\\n```\\r\\n\\r\\n10. deepMemo\\r\\n컴포넌트 렌더링 결과를 deep equality로 캐싱하는 고차 컴포넌트(HOC)\\r\\n객체 안에 중첩된 속성이 있어 React.memo의 얕은 비교로는 리렌더링 방지가 어려운 경우에 사용합니다.\\r\\n```ts\\r\\nexport function deepMemo<P extends object>(Component: FunctionComponent<P>) {\\r\\n  let prevProps: P | null = null;\\r\\n  let prevResult: ReturnType<FunctionComponent<P>> | null = null;\\r\\n\\r\\n  return function MemoizedComponent(props: P) {\\r\\n    if (prevProps === null || !deepEquals(prevProps, props)) {\\r\\n      prevResult = Component(props);\\r\\n      prevProps = props;\\r\\n    }\\r\\n\\r\\n    return prevResult;\\r\\n  };\\r\\n}\\r\\n```\\r\\ndeepEquals(prevProps, props)를 통해 이전 프롭과 새 프롭을 깊은 비교\\r\\n동일한 경우 캐시된 렌더링 결과 prevResult를 반환하여 리렌더링 방지\\r\\n최초 렌더링이거나 프롭이 달라졌을 때만 실제 컴포넌트를 실행\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n직접 리액트훅을 만들어서 내부적으로 어떻게 동작하는지 알 수 있게 된 것이 가장 큰 러닝포인트였고,\\r\\n제네릭 타입의 활용에대한 학습이 필요할 듯합니다.\\r\\n실무에서는 커스텀 훅을 직접 만들 일이 없지만 내부적으로 어떻게 동작하는지 이해했으니 좀 더 적절한 때에 사용할 수 있지 않을까라는\\r\\n생각이 듭니다.\\r\\n### 과제 피드백\\r\\n이번 과제는 AI를 적극적으로 사용했습니다. 또 다른 분들의 pr을 보면서 참고한 내용이 많았는데 남의 코드를 보는 것에\\r\\n익숙해져야겠다고 느꼈습니다. 좋은 레퍼런스가 많네요\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n1.  상태 변경 or props 변경 발생\\r\\n2. 해당 컴포넌트의 함수 다시 실행 (Function Component 재호출)\\r\\n3. 이전 Virtual DOM과 새로운 Virtual DOM을 비교\\r\\n4. 변경된 부분만 실제 DOM에 반영\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n동일한 입력에 대해 계산 결과를 캐싱하여 불필요한 계산을 줄이고 렌더링 최적화\\r\\n메모이제이션을 하지 않으면 매 렌더링마다 함수나 값이 새로 생성되어 참조가 달라짐\\r\\nuseEffect, React.memo 등에서 불필요한 리렌더링/재실행 발생\\r\\n무거운 연산이 매번 다시 계산되어 성능 저하\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n컴포넌트 간 데이터 공유와 상태 동기화를 효율적으로 하기 위함\\r\\n컨텍스트를 사용하지 않으면 상태를 props로 계속 전달해야 함 (prop drilling)\\r\\n컴포넌트가 많아질수록 코드 복잡도가 상승할 것이고 상태의 출처와 흐름을 추적하기 어려워질 것입니다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n1. 이런 과제를 수행한다면 코치님은 AI를 어떻게 활용할 것인지 궁금합니다.\\r\\n2. 이번 과제는 완료하는 것을 목표로 했습니다. 과정을 완벽하게 이해하지 않고 넘어간 부분도 있으나 pr을 작성하면서 재학습하는 식으로 진행했는데요\\r\\n정리한 내용중에 모호하거나 본질적인 내용과 거리가 있다면 그것이 궁금합니다!\\r\\n","created_at":"2025-07-24T12:55:41Z","updated_at":"2025-07-26T05:04:41Z","closed_at":null,"merged_at":null,"merge_commit_sha":"bc86f79be1004589db6c6d4a789492911806be43","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/54/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/54/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/54/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/d9fb1e3a9026cb1d3e9e83bfbb96a8eb4b0aa2f1","head":{"label":"JangRuBin2:main","ref":"main","sha":"d9fb1e3a9026cb1d3e9e83bfbb96a8eb4b0aa2f1","user":{"login":"JangRuBin2","id":124133863,"node_id":"U_kgDOB2Yh5w","avatar_url":"https://avatars.githubusercontent.com/u/124133863?v=4","gravatar_id":"","url":"https://api.github.com/users/JangRuBin2","html_url":"https://github.com/JangRuBin2","followers_url":"https://api.github.com/users/JangRuBin2/followers","following_url":"https://api.github.com/users/JangRuBin2/following{/other_user}","gists_url":"https://api.github.com/users/JangRuBin2/gists{/gist_id}","starred_url":"https://api.github.com/users/JangRuBin2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JangRuBin2/subscriptions","organizations_url":"https://api.github.com/users/JangRuBin2/orgs","repos_url":"https://api.github.com/users/JangRuBin2/repos","events_url":"https://api.github.com/users/JangRuBin2/events{/privacy}","received_events_url":"https://api.github.com/users/JangRuBin2/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022497075,"node_id":"R_kgDOPPIRMw","name":"front_6th_chapter1-3","full_name":"JangRuBin2/front_6th_chapter1-3","private":false,"owner":{"login":"JangRuBin2","id":124133863,"node_id":"U_kgDOB2Yh5w","avatar_url":"https://avatars.githubusercontent.com/u/124133863?v=4","gravatar_id":"","url":"https://api.github.com/users/JangRuBin2","html_url":"https://github.com/JangRuBin2","followers_url":"https://api.github.com/users/JangRuBin2/followers","following_url":"https://api.github.com/users/JangRuBin2/following{/other_user}","gists_url":"https://api.github.com/users/JangRuBin2/gists{/gist_id}","starred_url":"https://api.github.com/users/JangRuBin2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JangRuBin2/subscriptions","organizations_url":"https://api.github.com/users/JangRuBin2/orgs","repos_url":"https://api.github.com/users/JangRuBin2/repos","events_url":"https://api.github.com/users/JangRuBin2/events{/privacy}","received_events_url":"https://api.github.com/users/JangRuBin2/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/JangRuBin2/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/JangRuBin2/front_6th_chapter1-3/deployments","created_at":"2025-07-19T07:41:03Z","updated_at":"2025-07-24T16:32:07Z","pushed_at":"2025-07-24T17:22:37Z","git_url":"git://github.com/JangRuBin2/front_6th_chapter1-3.git","ssh_url":"git@github.com:JangRuBin2/front_6th_chapter1-3.git","clone_url":"https://github.com/JangRuBin2/front_6th_chapter1-3.git","svn_url":"https://github.com/JangRuBin2/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":286,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/54"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/54"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/54"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/54/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/54/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/54/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/d9fb1e3a9026cb1d3e9e83bfbb96a8eb4b0aa2f1"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/55","id":2692018578,"node_id":"PR_kwDOPMCTuc6gdPGS","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/55","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/55.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/55.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/55","number":55,"state":"open","locked":false,"title":"[1팀 한아름] Chapter 1-3. React, Beyond the Basics","user":{"login":"areumH","id":94692566,"node_id":"U_kgDOBaTk1g","avatar_url":"https://avatars.githubusercontent.com/u/94692566?v=4","gravatar_id":"","url":"https://api.github.com/users/areumH","html_url":"https://github.com/areumH","followers_url":"https://api.github.com/users/areumH/followers","following_url":"https://api.github.com/users/areumH/following{/other_user}","gists_url":"https://api.github.com/users/areumH/gists{/gist_id}","starred_url":"https://api.github.com/users/areumH/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areumH/subscriptions","organizations_url":"https://api.github.com/users/areumH/orgs","repos_url":"https://api.github.com/users/areumH/repos","events_url":"https://api.github.com/users/areumH/events{/privacy}","received_events_url":"https://api.github.com/users/areumH/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://areumh.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n확실히 학습 자료를 먼저 읽고 과제를 시작하니 이번 과제에서 이뤄야하는 것이 뭔지, 어떻게 구현해야 하는지 감히 잡히는 것 같다. e2e 테스트 통과를 위해 ToastProvider 코드를 수정할 때 제일 많이 느꼈다.. \\r\\n\\r\\n그냥 \'이런 훅이 있구나\' 하고 아무 생각 없이 사용했던 리액트 훅들을 직접 구현해보면서 왜 이 훅이 필요한지, 어떻게 동작하는지, 언제 사용해야 하는 지에 대한 감이 생긴 것 같다. 단순히 \'이 훅은 이런 인자를 넘겨줘야 한다\' 라는 개념을 넘어서 훅 내부에서 어떤 로직으로 상태 변화가 일어나는지, 어떤 타이밍에서 값이 갱신되는지, 리렌더링에 어떤 영향을 주는지 이해할 수 있었다. \\r\\n\\r\\n직접 구현한 훅이 다른 훅 내부에서 사용되며 하나씩 연결되는 게 너무 신기했다. 독립적으로 사용이 가능하면서도, 서로 연결되어 복잡하면서도 깔끔한 훅을 만들어 내는 것이 재밌었다. 비밀을 파헤친 느낌.!!\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n`shallowEquals`와 `deepEquals` 함수에서 string, number, boolean과 같은 기본 타입 비교 구문을\\r\\n`if (a === b) return true;` 로 단순하게 구현하였는데 올바른 방식인지 확실치 않다. \\r\\n\\r\\n그리고 비교하는 값이 객체일 때 각 객체의 key 값을 문자열로 사용하기 위해 `Record<string, unknown>`와 같이 Record을 사용하였는데, 이 외에 객체를 비교하는 다른 방법이 있는지 궁금하다. solution 코드에는 어떻게 구현되어있을 지 제일 궁금한 부분이다..!! \\r\\n\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n- ✅ **useAutoCallback**\\r\\n\\r\\n기존의 useCallback 함수는 의존성 배열을 넘겨주어야 하는데, 값을 빠뜨릴 경우 너무 오래된 값을 사용하게 되거나, 너무 많이 넣을 경우 과도한 리렌더링을 유발하는 문제가 생길 수 있다. `useAutoCallback`은 이러한 문제를 덜기 위해 의존성 배열을 넘겨주지 않아도 항상 최신값을 유지하도록 하는 훅이다.\\r\\n\\r\\n ```javascript\\r\\n// lib/src/hooks/useAutoCallback.ts\\r\\n\\r\\n// 참조가 변경되지 않으면 항상 새로운 값을 참조\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  const ref = useRef(fn);\\r\\n\\r\\n  const callback = useCallback((...args: Parameters<T>) => {\\r\\n    return ref.current(...args);\\r\\n  }, []);\\r\\n\\r\\n  ref.current = fn;\\r\\n  return callback as T;\\r\\n};\\r\\n```\\r\\n`callback`은 의존성 배열이 비어있기 때문에 최초 한 번만 생성되고, 최신 ref의 함수를 호출한다. `ref.current = fn;`에서 매 렌더마다 ref의 함수가 갱신되기 때문에 고정된 callback 내부에서는 **항상 최신 상태의 함수를 참조**하게 된다!\\r\\n\\r\\n이로 인해 의존성 배열을 신경쓸 필요 없이, 매 렌더링 시점의 함수 로직을 유지하면서 불필요한 함수 재생성을 방지할 수 있다.\\r\\n\\r\\n<br />\\r\\n\\r\\n- ✅ **useSyncExternalStore**\\r\\n```javascript\\r\\nconst snapshot = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?)\\r\\n```\\r\\n이는 컴포넌트 최상위 레벨에 호출하여 외부 저장소(store)의 상태를 구독하고 읽는 훅이다. \\r\\n\\r\\n- **subscribe**\\r\\n외부 저장소의 변경을 구독하는 함수\\r\\n\\r\\n- **getSnapShot**\\r\\n현재 저장소 데이터 상태를 반환하는 함수\\r\\n\\r\\n- **getServerSnapShot**\\r\\n서버 사이드 렌더링(SSR) 환경에서 사용되는 데이터의 초기 상태를 반환하는 함수 (선택)\\r\\n\\r\\n<br />\\r\\n\\r\\n```javascript\\r\\n// lib/src/createStore.ts\\r\\n\\r\\nexport const createStore = <S, A = (args: { type: string; payload?: unknown }) => S>(\\r\\n  reducer: (state: S, action: A) => S,\\r\\n  initialState: S,\\r\\n) => {\\r\\n  const { subscribe, notify } = createObserver();\\r\\n\\r\\n  let state = initialState;\\r\\n\\r\\n  const getState = () => state;\\r\\n\\r\\n  const dispatch = (action: A) => {\\r\\n    const newState = reducer(state, action);\\r\\n    if (!Object.is(newState, state)) {\\r\\n      state = newState;\\r\\n      notify();\\r\\n    }\\r\\n  };\\r\\n\\r\\n  return { getState, dispatch, subscribe };\\r\\n};\\r\\n```\\r\\nstore로 전역 상태를 만들고, 변경, 구독할 수 있는 관리 시스템을 구성하는 함수이다. 상태를 변경하는 함수인 **reducer**과 초기 상태인 **initialState**를 인자로 받는다.\\r\\n\\r\\n`state`는 현재 store의 상태를 저장해두는 변수이며, `dispatch`를 호출할 때마다 바뀐다. 그리고 `subscribe`는 store의 상태 변화를 감지하는 함수, `getState`는 현재 store의 상태를 반환한다.\\r\\n\\r\\n이렇게 구성된 createStore 함수로 만든 store을 useSyncExternalStore와 함께 사용하면 안전하고 일관되게 전역 상태를 구독할 수 있다!\\r\\n\\r\\n\\r\\n<br />\\r\\n\\r\\n- ✅ **Context.Provider**\\r\\n\\r\\ncreateContext 함수는 `const SomeContext = createContext(defaultValue)`와 같은 형태로 컨텍스트를 생성하고, 여러 컴포넌트 간에 데이터를 전역적으로 공유할 수 있게 해준다. 그리고 `SomContext.Provider`와 같이 Provider를 사용하여 값을 하위 컴포넌트에 전달한다. \\r\\n\\r\\n```javascript\\r\\n// app/src/components/toast/ToastProvider.tsx\\r\\n\\r\\nreturn (\\r\\n  <ToastContext value={{ show: showWithHide, hide, ...state }}>\\r\\n    {children}\\r\\n    {visible && createPortal(<Toast />, document.body)}\\r\\n  </ToastContext>\\r\\n);\\r\\n\\r\\n\\r\\n// 학습 자료 예시\\r\\nreturn <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\\r\\n```\\r\\n과제 시작 전에 훑어봤던 학습 자료의 코드에서도 `.Provider`가 사용되었는데, 이미 주어진 ToastProvider.tsx의 코드에서는 Provider가 붙지 않은 `ToastContext`만 사용하여 값을 전달해주고 있었다. 이를 보고 둘 사이에 기능적으로 차이가 있는지 궁금해졌다.\\r\\n\\r\\n\\r\\n<img width=\\"1001\\" height=\\"293\\" alt=\\"스크린샷 2025-07-24 041647\\" src=\\"https://github.com/user-attachments/assets/8b2253a7-78f8-44aa-8726-a0357b87aa4f\\" />\\r\\n\\r\\n\\r\\n그래서 공식 문서를 찾아봤는데, 리액트 19부터는 Context 뒤에 Provider을 붙인 것과 안 붙인 것이 기능적으로 동일하게 작동한다는 것을 알 수 있었다..!! \\r\\n\\r\\n<br />\\r\\n\\r\\n\\r\\n- ✅ **shx**\\r\\n\\r\\n배포를 위해 `pnpm run gh-pages`를 실행했더니 터미널에 `\'cp\'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는 배치 파일이 아닙니다.` 와 같은 에러가 떴다. \\r\\n\\r\\n```javascript\\r\\n// app/package.json\\r\\n\\r\\n  \\"scripts\\": {\\r\\n    \\"build\\": \\"vite build && cp ./dist/index.html ./dist/404.html\\",\\r\\n    // ...\\r\\n  },\\r\\n```\\r\\npackage.json의 스크립트 명령어인데, `cp`는 Unix 기반 환경에서의 shell 명령어이기 때문에 윈도우에서는 작동하지 않는 것이었다... 관련하여 찾아보니 Unix shell  명령어를 Node.js 스크립트에서 사용할 수 있게 해주는 유틸리티 패키지 [shx](https://github.com/shelljs/shx) 라는게 있었다! \\r\\n\\r\\n해당 패키지 설치 후, 명령어를 `\\"build\\": \\"vite build && shx cp ./dist/index.html ./dist/404.html\\"` 로 수정하여 페이지 배포에 성공했다. 과제와 직접적인 연관이 있는 건 아니지만 그래도 하나 더 알게 되었다..!!\\r\\n(cp 대신 copy로 실행하면 된다는 걸 뒤늦게 알았다........)\\r\\n\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n사실 리액트에서 제공해주는 useCallback, useMemo와 같은 훅을 사용해본 경험 자체도 많지 않았기 때문에 과제를 시작할 때 많이 막막했던 것 같다. 그치만 useRef부터 차근차근 직접 구현해보면서 메모이제이션 동작 원리에 대해 조금이나마 더 알게 된 것 같다. 너무 좋은 기회였다! 이번 과제가 도움이 되었다고 직접적으로 체감할 수 있는 날이 얼른 오면 좋겠다는 생각이 든다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n- 변경된 컴포넌트를 Virtual DOM에 렌더링한 후, 이전과 비교하여 변경된 최소의 부분만 실제 DOM에 적용한다.\\r\\n- 렌더링 최적화를 위해 `memo`, `useMemo`, `useCallback` 등의 훅을 사용할 수 있고, 불필요한 렌더링을 막아 성능을 개선한다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n- 메모이제이션: 결과 값이나 콜백 함수를 캐싱해두고, 동일한 입력에 대하여 해당 캐싱 값을 재사용함으로써 렌더링 성능을 최적화한다.\\r\\n- 사용하지 않을 경우 불필요한 리렌더링이 발생하여 성능이 저하되지만, 과도하게 사용할 경우 오히려 값이 자주 바뀔 때 메모이제이션을 유지하려는 오버헤드가 발생할 수도 있다는 생각이 든다. \\r\\n- 의존성 배열도 관리를 잘못할 경우 예상 외의 결과가 나오는 등의 버그가 발생할 수 있다.\\r\\n\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n- 전역적으로 데이터를 공유하거나, props 전달이 번거로울 때 컨텍스트로 상태 관리를 하는 것이 편리하다.\\r\\n- 컨텍스트의 값이 바뀌면 해당 컨텍스트를 사용하는 컴포넌트가 모두 리렌더링되기 때문에 역할에 맞게 분리가 필요하다.\\r\\n- 자주 변경되는 상태는 컨텍스트보다 전역 상태 관리 라이브러리를 사용하는 것이 효율적이다.\\r\\n\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n이번 과제에서 useCallback과 useAutoCallback 훅을 구현하면서, 편의성과 명시성 측면에서 비슷하면서도 서로 다른 특징을 갖고 있다고 느꼈습니다. 특히 `useAutoCallback` 은 참조를 고정하면서도, 항상 새로운 값을 참조하도록 하는 게 굉장히 편리하다는 생각이 드는데, 아직 useCallback과 useAutoCallback 훅이 각각 어떤 상황에 더 적합한지 확실히 와닿지 않습니다. useAutoCallback을 사용할 때 조심해야 하는 부분이나, 문제가 생길 수 있는 경우가 있을 지 궁금합니다! \\r\\n","created_at":"2025-07-24T13:27:27Z","updated_at":"2025-07-26T05:58:27Z","closed_at":null,"merged_at":null,"merge_commit_sha":"2931e2f655e35473c5c75e7361be5d2374a36282","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/55/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/55/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/55/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/8a54fc004d5bbd22c2ea5bd8817ec1eb48dfe28d","head":{"label":"areumH:main","ref":"main","sha":"8a54fc004d5bbd22c2ea5bd8817ec1eb48dfe28d","user":{"login":"areumH","id":94692566,"node_id":"U_kgDOBaTk1g","avatar_url":"https://avatars.githubusercontent.com/u/94692566?v=4","gravatar_id":"","url":"https://api.github.com/users/areumH","html_url":"https://github.com/areumH","followers_url":"https://api.github.com/users/areumH/followers","following_url":"https://api.github.com/users/areumH/following{/other_user}","gists_url":"https://api.github.com/users/areumH/gists{/gist_id}","starred_url":"https://api.github.com/users/areumH/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areumH/subscriptions","organizations_url":"https://api.github.com/users/areumH/orgs","repos_url":"https://api.github.com/users/areumH/repos","events_url":"https://api.github.com/users/areumH/events{/privacy}","received_events_url":"https://api.github.com/users/areumH/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022524306,"node_id":"R_kgDOPPJ7kg","name":"front_6th_chapter1-3","full_name":"areumH/front_6th_chapter1-3","private":false,"owner":{"login":"areumH","id":94692566,"node_id":"U_kgDOBaTk1g","avatar_url":"https://avatars.githubusercontent.com/u/94692566?v=4","gravatar_id":"","url":"https://api.github.com/users/areumH","html_url":"https://github.com/areumH","followers_url":"https://api.github.com/users/areumH/followers","following_url":"https://api.github.com/users/areumH/following{/other_user}","gists_url":"https://api.github.com/users/areumH/gists{/gist_id}","starred_url":"https://api.github.com/users/areumH/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/areumH/subscriptions","organizations_url":"https://api.github.com/users/areumH/orgs","repos_url":"https://api.github.com/users/areumH/repos","events_url":"https://api.github.com/users/areumH/events{/privacy}","received_events_url":"https://api.github.com/users/areumH/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/areumH/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/areumH/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/areumH/front_6th_chapter1-3/deployments","created_at":"2025-07-19T09:00:46Z","updated_at":"2025-07-24T13:19:40Z","pushed_at":"2025-07-24T13:19:36Z","git_url":"git://github.com/areumH/front_6th_chapter1-3.git","ssh_url":"git@github.com:areumH/front_6th_chapter1-3.git","clone_url":"https://github.com/areumH/front_6th_chapter1-3.git","svn_url":"https://github.com/areumH/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":304,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/55"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/55"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/55"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/55/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/55/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/55/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/8a54fc004d5bbd22c2ea5bd8817ec1eb48dfe28d"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/56","id":2692203782,"node_id":"PR_kwDOPMCTuc6gd8UG","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/56","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/56.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/56.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/56","number":56,"state":"open","locked":false,"title":"[9팀 최재환] Chapter 1-3. React, Beyond the Basics","user":{"login":"lieblichoi","id":79303416,"node_id":"MDQ6VXNlcjc5MzAzNDE2","avatar_url":"https://avatars.githubusercontent.com/u/79303416?v=4","gravatar_id":"","url":"https://api.github.com/users/lieblichoi","html_url":"https://github.com/lieblichoi","followers_url":"https://api.github.com/users/lieblichoi/followers","following_url":"https://api.github.com/users/lieblichoi/following{/other_user}","gists_url":"https://api.github.com/users/lieblichoi/gists{/gist_id}","starred_url":"https://api.github.com/users/lieblichoi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lieblichoi/subscriptions","organizations_url":"https://api.github.com/users/lieblichoi/orgs","repos_url":"https://api.github.com/users/lieblichoi/repos","events_url":"https://api.github.com/users/lieblichoi/events{/privacy}","received_events_url":"https://api.github.com/users/lieblichoi/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\nhttps://lieblichoi.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n이번 과제는 React를 그저 사용만 하는 걸 넘어 왜 이렇게 만들었는지를 직접 짜보면서 고민해볼 수 있었던 좋은 기회였습니다. 이전에는 그냥 공식 문서에 나와 있어서, 아니면 그냥 최적화에 좋다해서 사용했던 훅들을 직접 만들어보니 각 기능이 어떤 문제를 해결하기 위해 나왔는지, 어느 부분을 고려해 만들어진건지 알 수 있었습니다.\\r\\n\\r\\n`useAutoCallback` 구현 과정이 좀 빡셌습니다. 처음에는 `useLayoutEffect`를 쓰면 간단히 해결될 줄 알았는데, 계속 테스트가 실패해서 당황했습니다. 원인이 렌더링과 이펙트 실행 사이의 타이밍 문제인가 싶어서 다른 방식으로 접근해봤는데 어찌저찌 해결이 되었습니다. 완전한 이해는 아니지만 훅의 동작 원리를 어느정도 이해할 수 있게 되었습니다.\\r\\n\\r\\n심화 과제에서 `useSyncExternalStore`를 다루고 Context API의 렌더링 문제를 직접 해결하면서, React에서 \'상태\'와 \'렌더링\'이 어떻게 맞물려 동작하는지에 대한 감도 익힐 수 있었습니다. 모든 기능을 100% 완벽하게 이해했다고 말하기는 어렵지만 이제는 문제가 터졌을 때 어디를 봐야 할지, 어떤 질문을 던져야 할지 조금은 알 것 같습니다. 그동안 궁금했던 부분들이 어느정도 풀린 것 같아 재밌었습니다.\\r\\n\\r\\n`ToastProvider`를 리팩토링하면서 Context API의 렌더링 문제 직접 해결했던 것도 재미는 있었습니다. 단순히 `useMemo`를 쓰는 게 다가 아니라, 상태와 함수를 분리해서 애초에 불필요한 의존성을 끊어내는게 더 중요하다는 걸 배웠습니다. 역시 설계적인 측면에서의 접근이 중요한 것 같ㅡㅂ니다.\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n#### `useAutoCallback.ts`\\r\\n\\r\\n앞에서도 잠깐 이야기 했지만 `useLayoutEffect`를 사용했다가 잘 되지 않고 나서 문제의 원인이 어디일까 고민하다 렌더링과 이펙트 실행 사이의 타이밍에 있다고 생각하고 **두 개의 `useRef`를 사용**하는 방법으로 해결했습니다. `fnRef`는 매번 렌더링될 때마다 최신 함수를 담아두고, `memoizedFn`은 맨 처음 렌더링될 때 딱 한 번만 생성됩니다. `memoizedFn`은 일종의 임시(?)함수인데, 실행될 때 `fnRef`에 담긴 최신 함수를 꺼내서 실행하는 구조입니다. 결과적으로 겉으로 보이는 함수 주소(참조)는 항상 똑같이 유지하면서 실제 로직은 항상 최신 상태를 따라가게 만들 수 있었습니다. 구조를 이해하는데에 AI의 도움을 많이 받았지만 그래도 가장 많이 공부가 되었던 부분이라 가져왔습니다.\\r\\n\\r\\n```typescript\\r\\n// packages/lib/src/hooks/useAutoCallback.ts\\r\\nimport { useRef } from \\"./useRef\\";\\r\\nimport type { AnyFunction } from \\"../types\\";\\r\\n\\r\\nexport const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n  const fnRef = useRef(fn);\\r\\n  fnRef.current = fn; // 1. 매 렌더링마다 최신 함수를 여기에 담는다.\\r\\n\\r\\n  const memoizedFn = useRef<T>();\\r\\n\\r\\n  if (!memoizedFn.current) {\\r\\n    // 2. 최초 렌더링 시에만 함수를 생성하여 참조를 고정한다.\\r\\n    memoizedFn.current = ((...args: Parameters<T>): ReturnType<T> => fnRef.current(...args)) as T;\\r\\n  }\\r\\n\\r\\n  return memoizedFn.current as T; // 3. 고정된 참조의 함수를 반환한다.\\r\\n};\\r\\n```\\r\\n\\r\\n#### `ToastProvider.tsx`\\r\\n\\r\\nContext API가 편리하지만 렌더링에 취약하다는 말만 들었지 직접 해결해본건 처음입니다. 기존에는 토스트 메시지와 토스트를 띄우는 함수가 한 Context에 있어서, 메시지가 바뀔 때마다 함수만 필요한 다른 컴포넌트들까지 덩달아 리렌더링되는 문제가 있었습니다.\\r\\n\\r\\n이걸 해결하려고 상태는 `ToastStateContext`에, 함수는 `ToastCommandsContext`에 담아 분리했습니다. 이렇게 나누니 상태 변화가 필요한 컴포넌트에만 영향을 미치게 되었습니다. `useMemo`와 `useCallback`으로 참조가 바뀌지 않도록 처리해서 불필요한 렌더링이 일어날 여지를 잘 없앴다고 생각합니다.\\r\\n\\r\\n```typescript\\r\\n// packages/app/src/components/toast/ToastProvider.tsx\\r\\nconst ToastStateContext = createContext(initialState);\\r\\nconst ToastCommandsContext = createContext<{\\r\\n  show: ShowToast;\\r\\n  hide: Hide;\\r\\n}>({ show: () => null, hide: () => null });\\r\\n\\r\\nexport const useToastCommand = () => useContext(ToastCommandsContext);\\r\\nexport const useToastState = () => useContext(ToastStateContext);\\r\\n\\r\\nexport const ToastProvider = memo(({ children }: PropsWithChildren) => {\\r\\n  const [state, dispatch] = useReducer(toastReducer, initialState);\\r\\n  // ...\\r\\n  const commands = useMemo(() => ({ show: showWithHide, hide }), [showWithHide, hide]);\\r\\n\\r\\n  return (\\r\\n    <ToastStateContext.Provider value={state}>\\r\\n      <ToastCommandsContext.Provider value={commands}>\\r\\n        {children}\\r\\n        {visible && createPortal(<Toast />, document.body)}\\r\\n      </ToastCommandsContext.Provider>\\r\\n    </ToastStateContext.Provider>\\r\\n  );\\r\\n});\\r\\n```\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n#### `deepEquals.ts`\\r\\n\\r\\n재귀를 통해 객체를 깊게 비교하면서 구현은 했지만 실제 프로젝트에 쓰기에는 부족하다 생각합니다. \\r\\n\\r\\n```typescript\\r\\n// packages/lib/src/equals/deepEquals.ts\\r\\nexport function deepEquals(a: unknown, b: unknown): boolean {\\r\\n  if (Object.is(a, b)) return true;\\r\\n\\r\\n  if (a && b && typeof a === \\"object\\" && typeof b === \\"object\\") {\\r\\n    // ...\\r\\n    // Set, Map, Date 등에 대한 처리가 없다.\\r\\n  }\\r\\n  // ...\\r\\n}\\r\\n```\\r\\n\\r\\n솔직히 이 부분은 알고리즘이 복잡해서 AI의 도움을 많이 받았습니다. 완벽한 코드를 짜는 것보다는,, 깊은 비교라는 게 이렇게 복잡하고 고려할 게 많구나하는 전체적인 틀을 이해하는 데 의미를 두었습니다. `lodash.isEqual` 같은 검증된 라이브러리가 얼마나 소중한지 느꼈습니다.\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\nReact의 성능 최적화는 단순히 `useMemo` 같은 훅을 쓰는게 아니라 왜 리렌더링이 일어나는지 원인을 파악하고 컴포넌트 구조와 데이터 흐름의 설계를 고민하는 것에 달려있다는 걸 가장 많이 느꼈던 것 같습니다. 문제가 생겼을 때 일단 훅부터 추가하고 보는 게 아니라 컴포넌트를 나누거나 상태 위치를 바꾸는 등 더 근본적인 해결책을 먼저 고민해야겠다는 생각이 들었습니다. \\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n단계별로 구현되는 구조가 좋았습니다. 기본 훅을 만들고, 그 훅을 이용해 심화 과제를 해결하는 과정이 자연스럽게 다가와서 흐름이 눈에 보여 좋았습니다.\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n1.  시작: `setState` 같은 상태 변경이 일어나서 이제 렌더링을 다시 해야한다는 신호를 보냅니다.\\r\\n2.  계산: 컴포넌트 함수를 실행해서, 이번엔 UI가 어떻게 그려져야 하는지 계산합니다. 이 단계에서 JSX가 Virtual DOM(가상돔)이라는, 진짜 DOM의 설계도 같은 객체로 바뀝니다. 그리고 전과 비교해서 바뀐 부분만 찾아냅니다.\\r\\n3.  반영: 계산 단계에서 찾아낸 바뀐 부분만 실제 화면(DOM)에 적용합니다. 이 단계가 끝나고 나서 `useEffect` 같은 부가적인 작업들이 실행됩니다.\\r\\n\\r\\n+ 렌더링 최적화는 이 과정 중 계산 단계를 건너뛰거나(메모이제이션), 반영 단계의 작업을 최소화하는 것입니다.\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n메모이제이션은 편하지만 쓰기 전에 이 계산이 정말 오래 걸리는지, 이 함수가 다시 만들어지는 게 정말 문제가 되는지에 대한 고민을 항상 먼저해야 합니다.\\r\\n\\r\\n-   정말 복잡한 계산 결과를 재사용할 때나 자식 컴포넌트에 함수나 객체를 넘겨줄 때 주소값이 바뀌지 않게 해서 불필요한 리렌더링을 막아야 때 필요합니다.\\r\\n-   성능 향상이라는 확실한 장점이 있지만, 예전 값을 기억하기 위해 메모리를 더 써야 하고, 의존성 배열을 관리해야 해서 코드가 조금 더 복잡해진다는 단점이 있습니다.\\r\\n-  컴포넌트 구조를 잘게 나누거나, 상태를 정말 필요한 곳에만 두는 설계적 측면의 접근이 더 근본적인 해결책이 될 수 있습니다.\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\nContext는 멀리 떨어져 있는 컴포넌트들끼리 데이터를 쉽게 주고받게 해주는 것입니다.\\r\\n\\r\\n-   `props`를 여러 단계에 걸쳐 계속 내려주는 \'Prop Drilling\'의 불편함을 없애고, 여러 곳에서 쓰는 데이터를 한 곳에서 관리하기 위해 필요합니다.\\r\\n-   렌더링이 문젱니데, Context의 값이 바뀌면 이걸 쓰는 모든 컴포넌트가 리렌더링 될 수 있기 때문입니다. 상태와 함수를 분리하고, Context에 넘겨주는 값의 주소값이 바뀌지 않도록 `useMemo` 등으로 감싸주는 것이 중요합니다.\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n1.  **`useAutoCallback`의 안정성**\\r\\n    `useLayoutEffect` 대신 두 개의 `useRef`를 사용하는 방식으로 구현했습니다. 그런데 이 방식이 React가 렌더링을 하다가 중간에 멈추거나 다시 시작하는 환경에서도 문제없이 잘 동작할지, 혹은 제가 생각하지 못한 다른 문제가 있을지 궁금합니다.\\r\\n    ```typescript\\r\\n    // packages/lib/src/hooks/useAutoCallback.ts\\r\\n    export const useAutoCallback = <T extends AnyFunction>(fn: T): T => {\\r\\n      const fnRef = useRef(fn);\\r\\n      fnRef.current = fn;\\r\\n\\r\\n      const memoizedFn = useRef<T>();\\r\\n\\r\\n      if (!memoizedFn.current) {\\r\\n        memoizedFn.current = ((...args: Parameters<T>): ReturnType<T> => fnRef.current(...args)) as T;\\r\\n      }\\r\\n\\r\\n      return memoizedFn.current as T;\\r\\n    };\\r\\n    ```\\r\\n\\r\\n2.  **`useRef`의 설계에 대한 고민**\\r\\n    과제 요구사항을 맞추기 위해, 직접 만든 `useRef`에 함수 오버로딩을 추가했습니다. 덕분에 `useRef()`처럼 인자 없이도 호출할 수 있게 되었지만 코드는 좀 더 복잡해졌습니다. 라이브러리를 만드는 관점에서 이렇게 API 사용성을 맞추기 위해 복잡도를 조금 높이는 게 괜찮은지, 아니면 단순하게 초기값을 꼭 받도록 하는 게 더 나았을지 궁금합니다.\\r\\n    ```typescript\\r\\n    // packages/lib/src/hooks/useRef.ts\\r\\n    export function useRef<T>(initialValue: T): { current: T };\\r\\n    export function useRef<T = undefined>(): { current: T | undefined };\\r\\n    export function useRef<T>(initialValue?: T) {\\r\\n      const [ref] = useState({ current: initialValue });\\r\\n      return ref;\\r\\n    }\\r\\n    ```","created_at":"2025-07-24T14:30:06Z","updated_at":"2025-07-26T05:15:33Z","closed_at":null,"merged_at":null,"merge_commit_sha":"9d41a7931559d3d459cfa1b1ec6c31d672b2b4f7","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/56/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/56/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/56/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/268cfe634ff1ad824425c38d3588f8756a9e9cdd","head":{"label":"lieblichoi:main","ref":"main","sha":"268cfe634ff1ad824425c38d3588f8756a9e9cdd","user":{"login":"lieblichoi","id":79303416,"node_id":"MDQ6VXNlcjc5MzAzNDE2","avatar_url":"https://avatars.githubusercontent.com/u/79303416?v=4","gravatar_id":"","url":"https://api.github.com/users/lieblichoi","html_url":"https://github.com/lieblichoi","followers_url":"https://api.github.com/users/lieblichoi/followers","following_url":"https://api.github.com/users/lieblichoi/following{/other_user}","gists_url":"https://api.github.com/users/lieblichoi/gists{/gist_id}","starred_url":"https://api.github.com/users/lieblichoi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lieblichoi/subscriptions","organizations_url":"https://api.github.com/users/lieblichoi/orgs","repos_url":"https://api.github.com/users/lieblichoi/repos","events_url":"https://api.github.com/users/lieblichoi/events{/privacy}","received_events_url":"https://api.github.com/users/lieblichoi/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1025375056,"node_id":"R_kgDOPR37UA","name":"front_6th_chapter1-3","full_name":"lieblichoi/front_6th_chapter1-3","private":false,"owner":{"login":"lieblichoi","id":79303416,"node_id":"MDQ6VXNlcjc5MzAzNDE2","avatar_url":"https://avatars.githubusercontent.com/u/79303416?v=4","gravatar_id":"","url":"https://api.github.com/users/lieblichoi","html_url":"https://github.com/lieblichoi","followers_url":"https://api.github.com/users/lieblichoi/followers","following_url":"https://api.github.com/users/lieblichoi/following{/other_user}","gists_url":"https://api.github.com/users/lieblichoi/gists{/gist_id}","starred_url":"https://api.github.com/users/lieblichoi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lieblichoi/subscriptions","organizations_url":"https://api.github.com/users/lieblichoi/orgs","repos_url":"https://api.github.com/users/lieblichoi/repos","events_url":"https://api.github.com/users/lieblichoi/events{/privacy}","received_events_url":"https://api.github.com/users/lieblichoi/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/lieblichoi/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/lieblichoi/front_6th_chapter1-3/deployments","created_at":"2025-07-24T06:54:14Z","updated_at":"2025-07-24T15:13:07Z","pushed_at":"2025-07-24T15:13:03Z","git_url":"git://github.com/lieblichoi/front_6th_chapter1-3.git","ssh_url":"git@github.com:lieblichoi/front_6th_chapter1-3.git","clone_url":"https://github.com/lieblichoi/front_6th_chapter1-3.git","svn_url":"https://github.com/lieblichoi/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":224,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/56"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/56"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/56"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/56/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/56/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/56/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/268cfe634ff1ad824425c38d3588f8756a9e9cdd"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/57","id":2692252688,"node_id":"PR_kwDOPMCTuc6geIQQ","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/57","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/57.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/57.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/57","number":57,"state":"open","locked":false,"title":"[7팀 양창훈] Chapter 1-3. React, Beyond the Basics ","user":{"login":"yangchanghun","id":162554010,"node_id":"U_kgDOCbBgmg","avatar_url":"https://avatars.githubusercontent.com/u/162554010?v=4","gravatar_id":"","url":"https://api.github.com/users/yangchanghun","html_url":"https://github.com/yangchanghun","followers_url":"https://api.github.com/users/yangchanghun/followers","following_url":"https://api.github.com/users/yangchanghun/following{/other_user}","gists_url":"https://api.github.com/users/yangchanghun/gists{/gist_id}","starred_url":"https://api.github.com/users/yangchanghun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yangchanghun/subscriptions","organizations_url":"https://api.github.com/users/yangchanghun/orgs","repos_url":"https://api.github.com/users/yangchanghun/repos","events_url":"https://api.github.com/users/yangchanghun/events{/privacy}","received_events_url":"https://api.github.com/users/yangchanghun/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://yangchanghun.github.io/front_6th_chapter1-3/\\r\\n\\r\\n ERR_PNPM_RECURSIVE_RUN_FIRST_FAIL  @hanghae-plus/shopping@0.0.1 build: `vite build && cp ./dist/index.html ./dist/404.html`\\r\\n빌드과정중  위 오류가 나와서 지피티한테 물어보니까 window에서는 호환이안되서 \\r\\n    \\"build\\": \\"vite build && copy dist\\\\\\\\index.html dist\\\\\\\\404.html\\", 이걸로 바꾸래서 바꾸니까 되네요\\r\\n윈도우에선 이 방식으로 해야하는건가용?\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\nuseRef를 제외하곤 과제에있는 훅들은 사용해본적이 없는데 실제로 구현을하면서 다양한 훅들이 왜 생겨났고 어떻게 생겨났는지 알게 된거같습니다.\\r\\n그리고 과제를 진행하면서 이번과제는 기본기(?)가 있으면 쉬웠을거 같다는 생각이 드는데., 저는 고차함수나 콜백함수에 관한 개념이 부족해서 그런지 모르겠지만 개념을 이해하는것도 어려웠고 과제도 어려웠습니다. ㅠ\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n\\r\\n### 추가 학습이 필요한 영역\\r\\n\\r\\n고차함수와 콜백함수에 대해서 정확히 이해가 안되어 추가 학습이 필요할거같당,,,\\r\\n\\r\\n### 학습 효과 분석??\\r\\n\\r\\nuseRef를 직접 구현하려고 할 때, 처음에는 아래와 같이 작성했다:\\r\\n\\r\\n```ts\\r\\nconst [ref] = useState<{ current: T }>({ current: initialValue });\\r\\n```\\r\\n하지만 이렇게 하면 initialValue가 렌더링 시마다 실행되어 ref의 안정성이 깨질 수 있다는 문제가 있다고 한다.\\r\\n\\r\\n찾아보니, useRef는 컴포넌트가 재렌더링되더라도 값이 재생성되면 안 된다는 특징이 있었고,\\r\\n이를 위해 React에서는 useState(() => ...)처럼 함수를 통해 lazy initialization 방식으로 한 번만 실행되도록 처리한다.\\r\\n\\r\\n그래서 아래처럼 했따.\\r\\n```ts\\r\\nconst [ref] = useState<{ current: T }>(() => ({ current: initialValue }));\\r\\n```\\r\\n이 방식은 컴포넌트가 마운트될 때 단 한 번만 실행되며,\\r\\n이후 재렌더링돼도 ref는 그대로 유지되므로 useRef와 동일한 효과를 갖는다.\\r\\n\\r\\n\\r\\n\\r\\n그다음에 useMemo는\\r\\n값이 변경되면 함수가 실행된다 라고 이해하면 얼추 맞는 것 같다?\\r\\n\\r\\n근데 정확히는 의존성 배열(deps)이 바뀔 때만 factory 함수가 실행되고,\\r\\n그 외엔 이전 값을 그대로 캐싱해서 반환한다.\\r\\nuseeffect와 차이점이 뭐가 있나 생각해봤는데 useMemo는 리턴값이 있고, useEffect는 리턴값이 없고 cleanup 함수만 리턴할 수 있다.\\r\\n그리고 useMemo는 값을 캐싱하고, useEffect는 그런 캐싱 기능은 없다.\\r\\n\\r\\n\\r\\nuseCallback은\\r\\n값이 변경되면 새로운 함수를 반환해주고,\\r\\n그 함수를 버튼 같은 데 달아놓으면 → 나중에 이벤트 발생 시 실행되는 구조다.\\r\\n함수 자체를 기억하고 있는 느낌?\\r\\n그 덕에 렌더링될 때마다 불필요하게 새 함수 안 만들어도 된다.\\r\\n\\r\\n\\r\\nuseMemo와 useCallback을 구현하면서 메모이제이션에대해 좀 더 알게 된거같습니다.\\r\\n아직까진 내부적으로 어떻게 캐싱되고 재렌더링시에 불필요한연산을 어떻게 최소화하는지는 이해는 못했지만\\r\\n그래도  이전 값을 저장해놨다가,  의존성이 바뀌지 않으면 → 기존 값 그대로 꺼내 쓰고\\r\\n 바뀌면 → 다시 계산해서 저장하는 방식까지는 이해한 것 같습니다\\r\\n\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n우선 저번 과제를 하면서 진행한 리액트 렌더링과정은 아래와 같습니다\\r\\n리액트 jsx문법 ->  createVNode 평탄화 -> normalizedNode 정규화 -> createElement 돔생성 -> renderElement 생성한 돔 렌더링\\r\\n\\r\\n그리고 구현엔 실패했지만 diff알고리즘을 통해 재렌더링될때 이전 돔과 비교하여 최소한의 연산을 통해 dom을 재생성하는 것이 리액트식 렌더링이라고 생각합니다\\r\\n\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n위 코드들을 구현하면서 느낀 메모이제이션의 대한 생각은\\r\\n우선 이전상태와 현재상태를 비교하여 재랜더링시에 불필요한 연산을 최소화 한다. 라고 이해했다\\r\\n근데 이전상태가 매우매우  크면 어떻게 됄까 라는 생각이 지금 이글을 쓸때 든다. 후에 찾아봐야겟따.\\r\\n\\r\\n\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 궁금한 내용.(?)\\r\\n\\r\\n고차함수란게 특정 매개변수를 받아서 함수를 다시 만들고 그 함수를 호출하는게 고차함수일까요?? ㅠㅠ\\r\\n어떻게 이해하면 될지 잘모르겠습니다. 제가 고차함수를 많이 안써봐서 이해가 안되는걸까요.. 흡 ㅠ\\r\\n\\r\\n\\r\\n```ts\\r\\nexport function memo<P extends object>(Component: FunctionComponent<P>, equals = shallowEquals): FunctionComponent<P> {\\r\\n  const memoComponent = (props: P) => {\\r\\n    const prevProps = useRef<P | null>(null);\\r\\n    const prevComponent = useRef<ReactNode | null>(null);\\r\\n    if (!equals(prevProps.current, props)) {\\r\\n      prevProps.current = props;\\r\\n\\r\\n      prevComponent.current = Component(props);\\r\\n    }\\r\\n    return prevComponent.current;\\r\\n  };\\r\\n  return memoComponent;\\r\\n}\\r\\n```\\r\\n\\r\\n```ts \\r\\nconst MemoizedComponent =memo(TestComponent) \\r\\n```\\r\\n에서 MemoizedComponent는 결국 memoComponent라는 함수이고\\r\\n이 함수에 prop을 전달해야지 컴포넌트가 되는 그런 구조일까요?\\r\\n\\r\\n어찌저찌 구현했지만 이해안되는 부분이 많네요 ㅠ.\\r\\n\\r\\n\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-24T14:46:00Z","updated_at":"2025-07-29T01:37:00Z","closed_at":null,"merged_at":null,"merge_commit_sha":"d077f6e3b43c090bdc54ca8b6dfb143d482708fc","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/57/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/57/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/57/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/65397818e41a14c262711fd36d634a84f68bc0e9","head":{"label":"yangchanghun:main","ref":"main","sha":"65397818e41a14c262711fd36d634a84f68bc0e9","user":{"login":"yangchanghun","id":162554010,"node_id":"U_kgDOCbBgmg","avatar_url":"https://avatars.githubusercontent.com/u/162554010?v=4","gravatar_id":"","url":"https://api.github.com/users/yangchanghun","html_url":"https://github.com/yangchanghun","followers_url":"https://api.github.com/users/yangchanghun/followers","following_url":"https://api.github.com/users/yangchanghun/following{/other_user}","gists_url":"https://api.github.com/users/yangchanghun/gists{/gist_id}","starred_url":"https://api.github.com/users/yangchanghun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yangchanghun/subscriptions","organizations_url":"https://api.github.com/users/yangchanghun/orgs","repos_url":"https://api.github.com/users/yangchanghun/repos","events_url":"https://api.github.com/users/yangchanghun/events{/privacy}","received_events_url":"https://api.github.com/users/yangchanghun/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1023031718,"node_id":"R_kgDOPPo5pg","name":"front_6th_chapter1-3","full_name":"yangchanghun/front_6th_chapter1-3","private":false,"owner":{"login":"yangchanghun","id":162554010,"node_id":"U_kgDOCbBgmg","avatar_url":"https://avatars.githubusercontent.com/u/162554010?v=4","gravatar_id":"","url":"https://api.github.com/users/yangchanghun","html_url":"https://github.com/yangchanghun","followers_url":"https://api.github.com/users/yangchanghun/followers","following_url":"https://api.github.com/users/yangchanghun/following{/other_user}","gists_url":"https://api.github.com/users/yangchanghun/gists{/gist_id}","starred_url":"https://api.github.com/users/yangchanghun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yangchanghun/subscriptions","organizations_url":"https://api.github.com/users/yangchanghun/orgs","repos_url":"https://api.github.com/users/yangchanghun/repos","events_url":"https://api.github.com/users/yangchanghun/events{/privacy}","received_events_url":"https://api.github.com/users/yangchanghun/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/yangchanghun/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/yangchanghun/front_6th_chapter1-3/deployments","created_at":"2025-07-20T11:34:39Z","updated_at":"2025-07-24T15:07:04Z","pushed_at":"2025-07-24T15:25:41Z","git_url":"git://github.com/yangchanghun/front_6th_chapter1-3.git","ssh_url":"git@github.com:yangchanghun/front_6th_chapter1-3.git","clone_url":"https://github.com/yangchanghun/front_6th_chapter1-3.git","svn_url":"https://github.com/yangchanghun/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":298,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/57"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/57"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/57"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/57/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/57/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/57/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/65397818e41a14c262711fd36d634a84f68bc0e9"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/58","id":2693545146,"node_id":"PR_kwDOPMCTuc6gjDy6","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/58","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/58.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/58.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/58","number":58,"state":"open","locked":false,"title":"[2팀 김연수] Chapter 1-3. React, Beyond the Basics","user":{"login":"yeonsookk","id":39474489,"node_id":"MDQ6VXNlcjM5NDc0NDg5","avatar_url":"https://avatars.githubusercontent.com/u/39474489?v=4","gravatar_id":"","url":"https://api.github.com/users/yeonsookk","html_url":"https://github.com/yeonsookk","followers_url":"https://api.github.com/users/yeonsookk/followers","following_url":"https://api.github.com/users/yeonsookk/following{/other_user}","gists_url":"https://api.github.com/users/yeonsookk/gists{/gist_id}","starred_url":"https://api.github.com/users/yeonsookk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yeonsookk/subscriptions","organizations_url":"https://api.github.com/users/yeonsookk/orgs","repos_url":"https://api.github.com/users/yeonsookk/repos","events_url":"https://api.github.com/users/yeonsookk/events{/privacy}","received_events_url":"https://api.github.com/users/yeonsookk/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\n\\r\\n<!--\\r\\n배포 링크를 적어주세요\\r\\n예시: https://<username>.github.io/front-6th-chapter1-3/\\r\\n\\r\\n배포가 완료되지 않으면 과제를 통과할 수 없습니다.\\r\\n배포 후에 정상 작동하는지 확인해주세요.\\r\\n-->\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [ ] shallowEquals 구현 완료\\r\\n- [ ] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [ ] useRef 구현 완료\\r\\n- [ ] useMemo 구현 완료\\r\\n- [ ] useCallback 구현 완료\\r\\n- [ ] useDeepMemo 구현 완료\\r\\n- [ ] useShallowState 구현 완료\\r\\n- [ ] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [ ] memo 구현 완료\\r\\n- [ ] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [ ] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [ ] useShallowSelector 구현\\r\\n- [ ] useStore 구현\\r\\n- [ ] useRouter 구현\\r\\n- [ ] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [ ] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n<!-- 과제에 대한 회고를 작성해주세요 -->\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n<!-- 예시\\r\\n- 새로 학습한 개념\\r\\n- 기존 지식의 재발견/심화\\r\\n- 구현 과정에서의 기술적 도전과 해결\\r\\n-->\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n<!-- 예시\\r\\n- 특히 만족스러운 구현\\r\\n- 리팩토링이 필요한 부분\\r\\n- 코드 설계 관련 고민과 결정\\r\\n-->\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n<!-- 예시\\r\\n- 가장 큰 배움이 있었던 부분\\r\\n- 추가 학습이 필요한 영역\\r\\n- 실무 적용 가능성\\r\\n-->\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n<!-- 예시\\r\\n- 과제에서 모호하거나 애매했던 부분\\r\\n- 과제에서 좋았던 부분\\r\\n-->\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-25T00:52:29Z","updated_at":"2025-07-25T00:52:29Z","closed_at":null,"merged_at":null,"merge_commit_sha":"aa6cf17db57dc98ce89a593d1a116a381fef722c","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/58/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/58/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/58/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/7fdc9b21cf75b8a41349d637bfb8186f2ef379af","head":{"label":"yeonsookk:main","ref":"main","sha":"7fdc9b21cf75b8a41349d637bfb8186f2ef379af","user":{"login":"yeonsookk","id":39474489,"node_id":"MDQ6VXNlcjM5NDc0NDg5","avatar_url":"https://avatars.githubusercontent.com/u/39474489?v=4","gravatar_id":"","url":"https://api.github.com/users/yeonsookk","html_url":"https://github.com/yeonsookk","followers_url":"https://api.github.com/users/yeonsookk/followers","following_url":"https://api.github.com/users/yeonsookk/following{/other_user}","gists_url":"https://api.github.com/users/yeonsookk/gists{/gist_id}","starred_url":"https://api.github.com/users/yeonsookk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yeonsookk/subscriptions","organizations_url":"https://api.github.com/users/yeonsookk/orgs","repos_url":"https://api.github.com/users/yeonsookk/repos","events_url":"https://api.github.com/users/yeonsookk/events{/privacy}","received_events_url":"https://api.github.com/users/yeonsookk/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1025878566,"node_id":"R_kgDOPSWqJg","name":"front_6th_chapter1-3","full_name":"yeonsookk/front_6th_chapter1-3","private":false,"owner":{"login":"yeonsookk","id":39474489,"node_id":"MDQ6VXNlcjM5NDc0NDg5","avatar_url":"https://avatars.githubusercontent.com/u/39474489?v=4","gravatar_id":"","url":"https://api.github.com/users/yeonsookk","html_url":"https://github.com/yeonsookk","followers_url":"https://api.github.com/users/yeonsookk/followers","following_url":"https://api.github.com/users/yeonsookk/following{/other_user}","gists_url":"https://api.github.com/users/yeonsookk/gists{/gist_id}","starred_url":"https://api.github.com/users/yeonsookk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yeonsookk/subscriptions","organizations_url":"https://api.github.com/users/yeonsookk/orgs","repos_url":"https://api.github.com/users/yeonsookk/repos","events_url":"https://api.github.com/users/yeonsookk/events{/privacy}","received_events_url":"https://api.github.com/users/yeonsookk/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/yeonsookk/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/yeonsookk/front_6th_chapter1-3/deployments","created_at":"2025-07-25T00:50:40Z","updated_at":"2025-07-25T00:52:03Z","pushed_at":"2025-07-25T00:51:59Z","git_url":"git://github.com/yeonsookk/front_6th_chapter1-3.git","ssh_url":"git@github.com:yeonsookk/front_6th_chapter1-3.git","clone_url":"https://github.com/yeonsookk/front_6th_chapter1-3.git","svn_url":"https://github.com/yeonsookk/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":97,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/58"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/58"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/58"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/58/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/58/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/58/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/7fdc9b21cf75b8a41349d637bfb8186f2ef379af"}},"author_association":"MEMBER","auto_merge":null,"active_lock_reason":null},{"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/59","id":2693852518,"node_id":"PR_kwDOPMCTuc6gkO1m","html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/59","diff_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/59.diff","patch_url":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/59.patch","issue_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/59","number":59,"state":"open","locked":false,"title":"[9팀 박상수] Chapter 1-3. React, Beyond the Basics ","user":{"login":"parksangsoo","id":37687621,"node_id":"MDQ6VXNlcjM3Njg3NjIx","avatar_url":"https://avatars.githubusercontent.com/u/37687621?v=4","gravatar_id":"","url":"https://api.github.com/users/parksangsoo","html_url":"https://github.com/parksangsoo","followers_url":"https://api.github.com/users/parksangsoo/followers","following_url":"https://api.github.com/users/parksangsoo/following{/other_user}","gists_url":"https://api.github.com/users/parksangsoo/gists{/gist_id}","starred_url":"https://api.github.com/users/parksangsoo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/parksangsoo/subscriptions","organizations_url":"https://api.github.com/users/parksangsoo/orgs","repos_url":"https://api.github.com/users/parksangsoo/repos","events_url":"https://api.github.com/users/parksangsoo/events{/privacy}","received_events_url":"https://api.github.com/users/parksangsoo/received_events","type":"User","user_view_type":"public","site_admin":false},"body":"## 과제 체크포인트\\r\\n\\r\\n### 배포 링크\\r\\nhttps://hanghae-plus.github.io/front_6th_chapter1-3/\\r\\n\\r\\n### 기본과제\\r\\n\\r\\n#### equalities\\r\\n\\r\\n- [x] shallowEquals 구현 완료\\r\\n- [x] deepEquals 구현 완료\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] useRef 구현 완료\\r\\n- [x] useMemo 구현 완료\\r\\n- [x] useCallback 구현 완료\\r\\n- [x] useDeepMemo 구현 완료\\r\\n- [x] useShallowState 구현 완료\\r\\n- [x] useAutoCallback 구현 완료\\r\\n\\r\\n#### High Order Components\\r\\n\\r\\n- [x] memo 구현 완료\\r\\n- [x] deepMemo 구현 완료\\r\\n\\r\\n### 심화 과제\\r\\n\\r\\n#### hooks\\r\\n\\r\\n- [x] createObserver를 useSyncExternalStore에 사용하기 적합한 코드로 개선\\r\\n- [x] useShallowSelector 구현\\r\\n- [x] useStore 구현\\r\\n- [x] useRouter 구현\\r\\n- [x] useStorage 구현\\r\\n\\r\\n### context\\r\\n\\r\\n- [x] ToastContext, ModalContext 개선\\r\\n\\r\\n## 과제 셀프회고\\r\\n\\r\\n리액트에서 쓰이는 hooks에 대해 어떤 원리로 쓰이고 어떻게 만드는지 좀 더 자세히 알게된 거 같았다.\\r\\n아직은 부족하지만 반복해서 공부하다보면 코드 리팩토링과 성능최적화를 좀 더 능숙하게 할 수 있을 거 같다\\r\\n\\r\\n\\r\\n### 기술적 성장\\r\\n\\r\\n어떤 hook을 어떤 상황에 필요하고 어떻게 써야하는 지에 대한 이해도를 바탕으로 좀 더 정교하고 세밀한 코딩이 가능해진 거 같다!\\r\\n나만 그렇게 느껴지는 건진 몰라도;\\r\\n\\r\\n### 자랑하고 싶은 코드\\r\\n\\r\\n<img width=\\"1317\\" height=\\"807\\" alt=\\"캡처\\" src=\\"https://github.com/user-attachments/assets/151c706e-4ce0-4a7a-94c1-1ea19f73c8b8\\" />\\r\\n\\r\\n내가 자랑하고 싶은 코드는 깊은 비교 함수에서 배열 비교와 객체 비교 부분인데\\r\\n왜 자랑하고 싶냐면 재귀함수라는 개념은 알고 있었고 알고리즘 공부할 때 깊은탐색 할 때만 써본 게 전부였었다\\r\\n그래서 알고리즘용 함수라는 인식이 박혔었는데 이번 과제를 통해서 그 인식이 깨져버린 거 같다\\r\\n이럴 때도 쓸 수 있는 거였다니\\r\\n\\r\\n### 개선이 필요하다고 생각하는 코드\\r\\n\\r\\n전체적으로 개선이 필요할 거 같긴 한데 \\r\\n현재 코드 흐름이 어떻게 되는 지 파악하는데 집중하고 있다\\r\\n\\r\\n### 학습 효과 분석\\r\\n\\r\\n아직은 잘 모르겠다 좀 더 공부를 해야 할 거 같다\\r\\n\\r\\n### 과제 피드백\\r\\n\\r\\n코드파악하는데 어려움이 있어 어느 부분을 피드백을 받아야 할지 감이 안오는 거 같다;\\r\\n\\r\\n## 학습 갈무리\\r\\n\\r\\n### 리액트의 렌더링이 어떻게 이루어지는지 정리해주세요.\\r\\n\\r\\nstate나 props가 변경되면 \\r\\n현재의 돔을 가상돔으로 만든 후 이전에 만든 가상돔과 비교하여(diffing)\\r\\n바뀐 부분만 실제 DOM에 반영하여 렌더링이 이루어진다\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- 예시\\r\\n- 리액트의 렌더링 과정\\r\\n- 리액트의 렌더링 최적화 방법\\r\\n- 리액트의 렌더링과 관련된 개념들 (예: Virtual DOM, Reconciliation 등)\\r\\n- 리액트의 렌더링과 관련된 라이프사이클 메서드\\r\\n- 리액트의 렌더링과 관련된 Hooks (예: useMemo, useCallback 등)\\r\\n-->\\r\\n\\r\\n### 메모이제이션에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n메모이제이션은 어차피 계산 결과는 똑같은데 렌더링 과정에서 불필요하게 계산이 이뤄지는 로직으로 인해\\r\\n성능 저하를 유발하여 사용자 체감이 나빠지는 걸 방지하기 위해 꼭 필요한 과정이라고 생각한다\\r\\n하지만 너무 남발해서 쓰게되면 코드도 복잡해지고 메모리 낭비도 심해질 거 같다\\r\\n\\r\\n\\r\\n\\r\\n<!-- 예시\\r\\n- 메모이제이션이 언제 필요할까?\\r\\n- 메모이제이션을 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 메모이제이션을 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 메모이제이션을 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n-->\\r\\n\\r\\n### 컨텍스트와 상태관리에 대한 나의 생각을 적어주세요.\\r\\n\\r\\n<!-- 예시\\r\\n- 컨텍스트와 상태관리가 필요한 이유는 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않으면 어떤 문제가 발생할까?\\r\\n- 컨텍스트와 상태관리를 사용했을 때의 장점과 단점은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용하지 않고도 해결할 수 있는 방법은 무엇일까?\\r\\n- 컨텍스트와 상태관리를 사용할 때 주의해야 할 점은 무엇일까?\\r\\n-->\\r\\n\\r\\n## 리뷰 받고 싶은 내용\\r\\n\\r\\n<!--\\r\\n피드백 받고 싶은 내용을 구체적으로 남겨주세요\\r\\n모호한 요청은 피드백을 남기기 어렵습니다.\\r\\n\\r\\n참고링크: https://chatgpt.com/share/675b6129-515c-8001-ba72-39d0fa4c7b62\\r\\n\\r\\n모호한 질문의 예시)\\r\\n- 무엇을 질문해야 할지 몰라서 코치님이 보시기에 고쳐야할것들 전반적으로 피드백 부탁드립니다.\\r\\n- 코드 스타일에 대한 피드백 부탁드립니다.\\r\\n- 코드 구조에 대한 피드백 부탁드립니다.\\r\\n- 개념적인 오류에 대한 피드백 부탁드립니다.\\r\\n- 추가 구현이 필요한 부분에 대한 피드백 부탁드립니다.\\r\\n\\r\\n구체적인 질문의 예시)\\r\\n- 파일A의 함수B와 그 안의 변수명을 보면 직관성이 떨어지는 것 같습니다. 함수와 변수 이름을 더 명확하게 지을 방법에 대해 조언해 주실 수 있나요?\\r\\n- 현재 파일 단위로 코드를 분리했지만, 이번 주차 발제를 기준으로 봤을 때 모듈화나 계층화에서 부족함이 있는 것 같습니다. 특히 A와 B 부분에서 모듈화를 더 진행할지 그대로 둘지 고민하였습니다. (...구체적인 고민 사항 적기...). 코치님의 의견이 궁금합니다.\\r\\n- 옵저버 패턴을 사용해 상태 관리 로직을 구현해 보려 했습니다. 제가 구현한 코드가 옵저버 패턴에 맞게 잘 구성되었는지 검토해 주시고, 보완할 부분을 제안해 주실 수 있을까요?\\r\\n- 컴포넌트 A를 테스트 할 때 B와의 의존성 때문에 테스트 코드를 작성하려다 포기했습니다. A와 B의 의존성을 낮추고 테스트 가능성을 높이는 구조 개선 방안이 있을까요?\\r\\n\\r\\n과제에서 디테일한 피드백을 받기 위해선 여러분의 생각을 디테일하게 표현해주셔야 한답니다.\\r\\n\\r\\n가령, \\"전반적으로 이 라우터 구조가 규모가 커졌을 때 유지보수나 기능 확장에 유리한지, 아니면 리팩토링이 필요할지 조언을 받고 싶습니다\\" 라는 질문이 있을 때, 답변드리기가 어려워요. \\r\\n이럴 때는 \\"기능 확장\\" 상황을 먼저 가정해봐야합니다. 테스트의 엣지케이스를 작성하는 것 처럼요! 그리고 그 상황에 대해 내가 작성한 코드가 이러저러한 이유 때문에 대응가능할 것 같은데 혹시 더 고려해야할 부분이 있을지를 물어보는거죠.\\r\\n\\r\\n이건 코치에게 이야기할 때 뿐만 아니라 팀원에게 이야기할 때에도 동일해요. 여러분의 컨텍스트를 명확하게 전달하지 않으면 여러분과 이야기할 때 시간이 무척 오래 걸린답니다.\\r\\n\\r\\n특히 멘토링 처럼 동기적으로 이루어지는 커뮤니케이션에서는 위와 같은 질문을 던져도, 상호 피드백으로 질문을 함께 만들어갈 수 있지만, 과제 피드백 처럼 비동기 방식 + 1회용 질문일 때에는 좋은 답변을 드리기가 어려운점 인지 부탁드립니다 ㅠㅠ\\r\\n-->\\r\\n","created_at":"2025-07-25T04:46:22Z","updated_at":"2025-07-25T18:10:54Z","closed_at":null,"merged_at":null,"merge_commit_sha":"1359bf2b9785c85763ed9dd16178e5145c9c3699","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/59/commits","review_comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/59/comments","review_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/59/comments","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/d9a1ba148192f3ba54bca82ad600f5d46c9d36ba","head":{"label":"parksangsoo:main","ref":"main","sha":"d9a1ba148192f3ba54bca82ad600f5d46c9d36ba","user":{"login":"parksangsoo","id":37687621,"node_id":"MDQ6VXNlcjM3Njg3NjIx","avatar_url":"https://avatars.githubusercontent.com/u/37687621?v=4","gravatar_id":"","url":"https://api.github.com/users/parksangsoo","html_url":"https://github.com/parksangsoo","followers_url":"https://api.github.com/users/parksangsoo/followers","following_url":"https://api.github.com/users/parksangsoo/following{/other_user}","gists_url":"https://api.github.com/users/parksangsoo/gists{/gist_id}","starred_url":"https://api.github.com/users/parksangsoo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/parksangsoo/subscriptions","organizations_url":"https://api.github.com/users/parksangsoo/orgs","repos_url":"https://api.github.com/users/parksangsoo/repos","events_url":"https://api.github.com/users/parksangsoo/events{/privacy}","received_events_url":"https://api.github.com/users/parksangsoo/received_events","type":"User","user_view_type":"public","site_admin":false},"repo":{"id":1022952037,"node_id":"R_kgDOPPkCZQ","name":"front_6th_chapter1-3","full_name":"parksangsoo/front_6th_chapter1-3","private":false,"owner":{"login":"parksangsoo","id":37687621,"node_id":"MDQ6VXNlcjM3Njg3NjIx","avatar_url":"https://avatars.githubusercontent.com/u/37687621?v=4","gravatar_id":"","url":"https://api.github.com/users/parksangsoo","html_url":"https://github.com/parksangsoo","followers_url":"https://api.github.com/users/parksangsoo/followers","following_url":"https://api.github.com/users/parksangsoo/following{/other_user}","gists_url":"https://api.github.com/users/parksangsoo/gists{/gist_id}","starred_url":"https://api.github.com/users/parksangsoo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/parksangsoo/subscriptions","organizations_url":"https://api.github.com/users/parksangsoo/orgs","repos_url":"https://api.github.com/users/parksangsoo/repos","events_url":"https://api.github.com/users/parksangsoo/events{/privacy}","received_events_url":"https://api.github.com/users/parksangsoo/received_events","type":"User","user_view_type":"public","site_admin":false},"html_url":"https://github.com/parksangsoo/front_6th_chapter1-3","description":null,"fork":true,"url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/parksangsoo/front_6th_chapter1-3/deployments","created_at":"2025-07-20T07:48:24Z","updated_at":"2025-07-24T12:24:22Z","pushed_at":"2025-07-25T04:53:50Z","git_url":"git://github.com/parksangsoo/front_6th_chapter1-3.git","ssh_url":"git@github.com:parksangsoo/front_6th_chapter1-3.git","clone_url":"https://github.com/parksangsoo/front_6th_chapter1-3.git","svn_url":"https://github.com/parksangsoo/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":122,"stargazers_count":0,"watchers_count":0,"language":"TypeScript","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"main"}},"base":{"label":"hanghae-plus:main","ref":"main","sha":"d6660f07d2ee7e8f6470228397be286cd9cb86d1","user":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"repo":{"id":1019253689,"node_id":"R_kgDOPMCTuQ","name":"front_6th_chapter1-3","full_name":"hanghae-plus/front_6th_chapter1-3","private":false,"owner":{"login":"hanghae-plus","id":144507192,"node_id":"O_kgDOCJ0BOA","avatar_url":"https://avatars.githubusercontent.com/u/144507192?v=4","gravatar_id":"","url":"https://api.github.com/users/hanghae-plus","html_url":"https://github.com/hanghae-plus","followers_url":"https://api.github.com/users/hanghae-plus/followers","following_url":"https://api.github.com/users/hanghae-plus/following{/other_user}","gists_url":"https://api.github.com/users/hanghae-plus/gists{/gist_id}","starred_url":"https://api.github.com/users/hanghae-plus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanghae-plus/subscriptions","organizations_url":"https://api.github.com/users/hanghae-plus/orgs","repos_url":"https://api.github.com/users/hanghae-plus/repos","events_url":"https://api.github.com/users/hanghae-plus/events{/privacy}","received_events_url":"https://api.github.com/users/hanghae-plus/received_events","type":"Organization","user_view_type":"public","site_admin":false},"html_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","description":null,"fork":false,"url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3","forks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/forks","keys_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/keys{/key_id}","collaborators_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/teams","hooks_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/hooks","issue_events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/events{/number}","events_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/events","assignees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/assignees{/user}","branches_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/branches{/branch}","tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/tags","blobs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/refs{/sha}","trees_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/trees{/sha}","statuses_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/{sha}","languages_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/languages","stargazers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/stargazers","contributors_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contributors","subscribers_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscribers","subscription_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/subscription","commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/commits{/sha}","git_commits_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/git/commits{/sha}","comments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/comments{/number}","issue_comment_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/comments{/number}","contents_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/contents/{+path}","compare_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/compare/{base}...{head}","merges_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/merges","archive_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/downloads","issues_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues{/number}","pulls_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls{/number}","milestones_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/milestones{/number}","notifications_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/labels{/name}","releases_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/releases{/id}","deployments_url":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/deployments","created_at":"2025-07-14T03:44:40Z","updated_at":"2025-07-19T03:19:30Z","pushed_at":"2025-07-25T23:19:59Z","git_url":"git://github.com/hanghae-plus/front_6th_chapter1-3.git","ssh_url":"git@github.com:hanghae-plus/front_6th_chapter1-3.git","clone_url":"https://github.com/hanghae-plus/front_6th_chapter1-3.git","svn_url":"https://github.com/hanghae-plus/front_6th_chapter1-3","homepage":"https://hanghae-plus.github.io/front_6th_chapter1-3/","size":121,"stargazers_count":1,"watchers_count":1,"language":"TypeScript","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":false,"has_pages":true,"has_discussions":false,"forks_count":61,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":54,"license":null,"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":61,"open_issues":54,"watchers":1,"default_branch":"main"}},"_links":{"self":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/59"},"html":{"href":"https://github.com/hanghae-plus/front_6th_chapter1-3/pull/59"},"issue":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/59"},"comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/issues/59/comments"},"review_comments":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/59/comments"},"review_comment":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/pulls/59/commits"},"statuses":{"href":"https://api.github.com/repos/hanghae-plus/front_6th_chapter1-3/statuses/d9a1ba148192f3ba54bca82ad600f5d46c9d36ba"}},"author_association":"FIRST_TIME_CONTRIBUTOR","auto_merge":null,"active_lock_reason":null}]');export{e as default};